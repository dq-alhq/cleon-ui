{
  "collections/multiple-menu-demo": {
    "component": "@/components/docs/collections/multiple-menu-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Menu } from '@/components/ui'\nimport type { Selection } from '@react-types/shared'\n\nexport default function MultipleMenuDemo() {\n    const [selected, setSelected] = React.useState<Selection>(new Set(['status']))\n    return (\n        <Menu>\n            <Button aria-labelledby='multiple-menu-trigger' variant='outline'>\n                Open\n            </Button>\n            <Menu.Content\n                placement='bottom'\n                selectionMode='multiple'\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n                className='w-56'\n                disabledKeys={['activity']}\n            >\n                <Menu.Section>\n                    <Menu.Header separator>Appearance</Menu.Header>\n                    <Menu.CheckboxItem id='status'>Status Bar</Menu.CheckboxItem>\n                    <Menu.CheckboxItem id='activity'>Activity Bar</Menu.CheckboxItem>\n                    <Menu.CheckboxItem id='panel'>Panel</Menu.CheckboxItem>\n                </Menu.Section>\n            </Menu.Content>\n        </Menu>\n    )\n}\n",
    "type": "docs"
  },
  "collections/grid-list-demo": {
    "component": "@/components/docs/collections/grid-list-demo",
    "raw": "'use client'\n\nimport { GridList } from '@/components/ui'\n\nexport default function GridListDemo() {\n    return (\n        <GridList\n            items={items}\n            aria-label='Select your favorite bands'\n            className='min-w-64'\n        >\n            {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n        </GridList>\n    )\n}\n\nconst items = [\n    { id: '1', name: 'The Beatles' },\n    { id: '2', name: 'Led Zeppelin' },\n    { id: '3', name: 'Pink Floyd' },\n    { id: '4', name: 'Queen' },\n    { id: '5', name: 'The Rolling Stones' }\n]\n",
    "type": "docs"
  },
  "collections/grid-list-drag-demo": {
    "component": "@/components/docs/collections/grid-list-drag-demo",
    "raw": "'use client'\n\nimport { GridList } from '@/components/ui'\nimport { useDragAndDrop } from 'react-aria-components'\nimport { useListData } from 'react-stately'\n\nexport default function GridListDragDemo() {\n    const list = useListData({\n        initialItems: items\n    })\n    const { dragAndDropHooks } = useDragAndDrop({\n        getItems: (keys) =>\n            [...keys].map((key) => ({ 'text/plain': list.getItem(key).name })),\n        onReorder(e) {\n            if (e.target.dropPosition === 'before') {\n                list.moveBefore(e.target.key, e.keys)\n            } else if (e.target.dropPosition === 'after') {\n                list.moveAfter(e.target.key, e.keys)\n            }\n        }\n    })\n\n    return (\n        <div>\n            <GridList\n                items={list.items}\n                aria-label='Droppable list'\n                selectionMode='multiple'\n                dragAndDropHooks={dragAndDropHooks}\n            >\n                {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n            </GridList>\n        </div>\n    )\n}\n\nconst items = [\n    { id: 1, name: 'The Beatles' },\n    { id: 2, name: 'Led Zeppelin' },\n    { id: 3, name: 'Pink Floyd' },\n    { id: 4, name: 'Queen' },\n    { id: 5, name: 'The Rolling Stones' },\n    { id: 6, name: 'The Beach Boys' },\n    { id: 7, name: 'The Kinks' },\n    { id: 8, name: 'The Who' }\n]\n",
    "type": "docs"
  },
  "collections/grid-list-drag-between-item-demo": {
    "component": "@/components/docs/collections/grid-list-drag-between-item-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport GridListDragDemo from '@/components/docs/collections/grid-list-drag-demo'\nimport { Grid, GridList } from '@/components/ui'\nimport { useDragAndDrop } from 'react-aria-components'\nimport { useListData } from 'react-stately'\n\nexport default function GridListDragBetweenItemDemo() {\n    const list = useListData({\n        initialItems: [\n            { id: 6, name: 'The Byrds' },\n            { id: 7, name: 'The Yardbirds' }\n        ]\n    })\n\n    const { dragAndDropHooks } = useDragAndDrop({\n        async onInsert(e) {\n            const items = await Promise.all(\n                e.items.map(async (item) => {\n                    const name =\n                        item.kind === 'text'\n                            ? await item.getText('text/plain')\n                            : item.name\n                    return { id: Math.random(), name }\n                })\n            )\n\n            if (e.target.dropPosition === 'before') {\n                list.insertBefore(e.target.key, ...items)\n            } else if (e.target.dropPosition === 'after') {\n                list.insertAfter(e.target.key, ...items)\n            }\n        }\n    })\n\n    return (\n        <Grid gap={4} columns={3}>\n            <Grid.Item>\n                <GridListDragDemo />\n            </Grid.Item>\n            <Grid.Item>\n                <GridList\n                    aria-label='Droppable list'\n                    items={list.items}\n                    dragAndDropHooks={dragAndDropHooks}\n                >\n                    {(item) => <GridList.Item>{item.name}</GridList.Item>}\n                </GridList>\n            </Grid.Item>\n            <Grid.Item>\n                <OtherEmptyList />\n            </Grid.Item>\n        </Grid>\n    )\n}\n\nfunction OtherEmptyList() {\n    const list = useListData({\n        initialItems: [{ id: 7, name: 'The Who' }]\n    })\n\n    const { dragAndDropHooks } = useDragAndDrop({\n        async onInsert(e) {\n            const items = await Promise.all(\n                e.items.map(async (item) => {\n                    const name =\n                        item.kind === 'text'\n                            ? await item.getText('text/plain')\n                            : item.name\n                    return { id: Math.random(), name }\n                })\n            )\n\n            if (e.target.dropPosition === 'before') {\n                list.insertBefore(e.target.key, ...items)\n            } else if (e.target.dropPosition === 'after') {\n                list.insertAfter(e.target.key, ...items)\n            }\n        }\n    })\n\n    return (\n        <GridList\n            aria-label='Droppable list'\n            items={list.items}\n            dragAndDropHooks={dragAndDropHooks}\n            renderEmptyState={() => (\n                <GridList.EmptyState>No bands selected</GridList.EmptyState>\n            )}\n        >\n            {(item) => <GridList.Item>{item.name}</GridList.Item>}\n        </GridList>\n    )\n}\n",
    "type": "docs"
  },
  "collections/grid-list-disabled-demo": {
    "component": "@/components/docs/collections/grid-list-disabled-demo",
    "raw": "'use client'\n\nimport { GridList } from '@/components/ui'\n\nexport default function GridListDisabledDemo() {\n    return (\n        <GridList\n            items={items}\n            aria-label='Select your favorite bands'\n            selectionMode='multiple'\n            className='min-w-64'\n        >\n            {(item) => (\n                <GridList.Item isDisabled={[2, 5].includes(Number(item.id))} id={item.id}>\n                    {item.name}\n                </GridList.Item>\n            )}\n        </GridList>\n    )\n}\n\nconst items = [\n    { id: '1', name: 'The Beatles' },\n    { id: '2', name: 'Led Zeppelin' },\n    { id: '3', name: 'Pink Floyd' },\n    { id: '4', name: 'Queen' },\n    { id: '5', name: 'The Rolling Stones' }\n]\n",
    "type": "docs"
  },
  "collections/tag-group-href-demo": {
    "component": "@/components/docs/collections/tag-group-href-demo",
    "raw": "import React from 'react'\n\nimport { Tag, TagGroup } from '@/components/ui'\n\nconst articles = [\n    { name: 'React Tutorial', url: '#' },\n    { name: 'TypeScript Handbook', url: '#' },\n    { name: 'JavaScript Guide', url: '#' }\n]\n\nexport default function TagGroupControlledDemo() {\n    return (\n        <TagGroup items={articles}>\n            {(item) => (\n                <Tag id={item.name} href={item.url}>\n                    {item.name}\n                </Tag>\n            )}\n        </TagGroup>\n    )\n}\n",
    "type": "docs"
  },
  "collections/list-box-rearrange-demo": {
    "component": "@/components/docs/collections/list-box-rearrange-demo",
    "raw": "'use client'\n\nimport { ListBox } from '@/components/ui'\nimport { useDragAndDrop } from 'react-aria-components'\nimport { useListData } from 'react-stately'\n\nexport default function ListBoxRearrangeDemo() {\n    const list = useListData({\n        initialItems: [\n            { id: '1', name: 'HTML' },\n            { id: '2', name: 'CSS' },\n            { id: '3', name: 'Javascript' },\n            { id: '4', name: 'Typescript' },\n            { id: '5', name: 'PHP' }\n        ]\n    })\n    const { dragAndDropHooks } = useDragAndDrop({\n        getItems: (keys: any) =>\n            [...keys].map((key) => ({ 'text/plain': list.getItem(key).name })),\n        onReorder(e: any) {\n            if (e.target.dropPosition === 'before') {\n                list.moveBefore(e.target.key, e.keys)\n            } else if (e.target.dropPosition === 'after') {\n                list.moveAfter(e.target.key, e.keys)\n            }\n        }\n    })\n    return (\n        <ListBox\n            items={list.items}\n            aria-label='Langueges'\n            selectionMode='multiple'\n            dragAndDropHooks={dragAndDropHooks}\n        >\n            {(item) => (\n                <ListBox.Item id={item.id} key={item.id}>\n                    {item.name}\n                </ListBox.Item>\n            )}\n        </ListBox>\n    )\n}\n",
    "type": "docs"
  },
  "collections/table-demo": {
    "component": "@/components/docs/collections/table-demo",
    "raw": "'use client'\n\nimport { Table } from '@/components/ui'\n\nexport const presidents = [\n    { id: '1', name: 'Soekarno', year: '1945 - 1965', terms: '20 Years' },\n    { id: '2', name: 'Soeharto', year: '1965 - 1998', terms: '32 Years' },\n    { id: '3', name: 'B.J. Habibie', year: '1998 - 1999', terms: '1 Year' },\n    { id: '4', name: 'Abdurrahman Wahid', year: '1999 - 2001', terms: '2 Years' },\n    { id: '5', name: 'Megawati Soekarnoputri', year: '2001 - 2004', terms: '3 Years' },\n    { id: '6', name: 'Susilo Bambang Yudhoyono', year: '2004 - 2014', terms: '10 Years' },\n    { id: '7', name: 'Joko Widodo', year: '2014 - 2024', terms: '10 Years' },\n    { id: '8', name: 'Prabowo Subianto', year: '2024 - Now', terms: 'Not yet' }\n]\n\nexport default function TableDemo() {\n    return (\n        <Table aria-label='President of Indonesia' selectionMode='multiple'>\n            <Table.Header>\n                <Table.Column>#</Table.Column>\n                <Table.Column>Name</Table.Column>\n                <Table.Column>Year</Table.Column>\n                <Table.Column>Terms</Table.Column>\n            </Table.Header>\n            <Table.Body items={presidents}>\n                {(item) => (\n                    <Table.Row key={item.id}>\n                        <Table.Cell>{item.id}</Table.Cell>\n                        <Table.Cell>{item.name}</Table.Cell>\n                        <Table.Cell>{item.year}</Table.Cell>\n                        <Table.Cell>{item.terms}</Table.Cell>\n                    </Table.Row>\n                )}\n            </Table.Body>\n        </Table>\n    )\n}\n",
    "type": "docs"
  },
  "collections/accordion-demo": {
    "component": "@/components/docs/collections/accordion-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionDemo() {\n    return (\n        <Accordion className='w-full'>\n            <Accordion.Item key='1'>\n                <Accordion.Trigger>Is it accessible?</Accordion.Trigger>\n                <Accordion.Content>\n                    Yes. It adheres to the WAI-ARIA design pattern.\n                </Accordion.Content>\n            </Accordion.Item>\n            <Accordion.Item key='2'>\n                <Accordion.Trigger>Is it styled?</Accordion.Trigger>\n                <Accordion.Content>\n                    Yes. It comes with default styles that matches the other\n                    components&apos; aesthetic.\n                </Accordion.Content>\n            </Accordion.Item>\n            <Accordion.Item key='3'>\n                <Accordion.Trigger>Is it animated?</Accordion.Trigger>\n                <Accordion.Content>\n                    Yes. It&apos;s animated by default, but you can disable it if you\n                    prefer.\n                </Accordion.Content>\n            </Accordion.Item>\n        </Accordion>\n    )\n}\n",
    "type": "docs"
  },
  "collections/grid-list-controlled-demo": {
    "component": "@/components/docs/collections/grid-list-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, GridList } from '@/components/ui'\nimport type { Selection } from 'react-aria-components'\n\nexport default function GridListControlledDemo() {\n    const [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set([]))\n    return (\n        <div>\n            <GridList\n                selectedKeys={selectedKeys}\n                onSelectionChange={setSelectedKeys}\n                items={items}\n                aria-label='Select items'\n                selectionMode='multiple'\n                className='min-w-64'\n            >\n                {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n            </GridList>\n            <Description className='mt-2 block [&>strong]:text-foreground text-muted-foreground'>\n                You have selected: <strong>{Array.from(selectedKeys).join(', ')}</strong>\n            </Description>\n        </div>\n    )\n}\n\nconst items = [\n    { id: '1', name: 'The Beatles' },\n    { id: '2', name: 'Led Zeppelin' },\n    { id: '3', name: 'Pink Floyd' },\n    { id: '4', name: 'Queen' },\n    { id: '5', name: 'The Rolling Stones' }\n]\n",
    "type": "docs"
  },
  "collections/list-box-demo": {
    "component": "@/components/docs/collections/list-box-demo",
    "raw": "'use client'\n\nimport { ListBox } from '@/components/ui'\n\nconst libraries = [\n    { id: 'tw', name: 'Tailwind CSS' },\n    { id: 'bs', name: 'Bootstrap' },\n    { id: 'react', name: 'React.Js' },\n    { id: 'jq', name: 'JQuery' },\n    { id: 'alpine', name: 'Alpine.Js' }\n]\n\nexport default function ListBoxDemo() {\n    return (\n        <ListBox items={libraries} aria-label='Libraries' selectionMode='multiple'>\n            {(item) => (\n                <ListBox.Item id={item.id} key={item.id}>\n                    {item.name}\n                </ListBox.Item>\n            )}\n        </ListBox>\n    )\n}\n",
    "type": "docs"
  },
  "collections/tag-group-demo": {
    "component": "@/components/docs/collections/tag-group-demo",
    "raw": "'use client'\n\nimport { Tag, TagGroup } from '@/components/ui'\n\nexport const androidBrands = [\n    { id: '1', name: 'Samsung', available: false },\n    { id: '2', name: 'OnePlus', available: true },\n    { id: '3', name: 'Google', available: true },\n    { id: '4', name: 'Xiaomi', available: false }\n]\n\nexport default function TagGroupDemo() {\n    return (\n        <TagGroup label='Android Brands' selectionMode='multiple' items={androidBrands}>\n            {(item) => <Tag isDisabled={!item.available}>{item.name}</Tag>}\n        </TagGroup>\n    )\n}\n",
    "type": "docs"
  },
  "collections/tag-group-disabled-demo": {
    "component": "@/components/docs/collections/tag-group-disabled-demo",
    "raw": "import { androidBrands } from '@/components/docs/collections/tag-group-demo'\nimport { Tag, TagGroup } from '@/components/ui'\n\nexport default function TagGroupDisabledDemo() {\n    return (\n        <div className='space-y-6'>\n            <TagGroup\n                disabledKeys={androidBrands\n                    .filter((brand) => !brand.available)\n                    .map((brand) => brand.id)}\n                label='Disabled Key'\n                selectionMode='multiple'\n                items={androidBrands}\n            >\n                {(item) => <Tag>{item.name}</Tag>}\n            </TagGroup>\n\n            <TagGroup\n                label='Disabled by Tag'\n                selectionMode='multiple'\n                items={androidBrands}\n            >\n                {(item) => <Tag isDisabled={!item.available}>{item.name}</Tag>}\n            </TagGroup>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "collections/accordion-multiple-demo": {
    "component": "@/components/docs/collections/accordion-multiple-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionMultipleDemo() {\n    return (\n        <Accordion multiple defaultValue={[1, 2]}>\n            <Accordion.Item key='1'>\n                <Accordion.Trigger>Is it accessible?</Accordion.Trigger>\n                <Accordion.Content>\n                    Yes. It adheres to the WAI-ARIA design pattern.\n                </Accordion.Content>\n            </Accordion.Item>\n            <Accordion.Item key='2'>\n                <Accordion.Trigger>Is it styled?</Accordion.Trigger>\n                <Accordion.Content>\n                    Yes. It comes with default styles that matches the other\n                    components&apos; aesthetic.\n                </Accordion.Content>\n            </Accordion.Item>\n            <Accordion.Item key='3'>\n                <Accordion.Trigger>Is it animated?</Accordion.Trigger>\n                <Accordion.Content>\n                    Yes. It&apos;s animated by default, but you can disable it if you\n                    prefer.\n                </Accordion.Content>\n            </Accordion.Item>\n        </Accordion>\n    )\n}\n",
    "type": "docs"
  },
  "collections/command-basic-demo": {
    "component": "@/components/docs/collections/command-basic-demo",
    "raw": "'use client'\n\nimport React, { useState } from 'react'\n\nimport { Button, Command } from '@/components/ui'\nimport { useMediaQuery } from '@/lib/utils'\n\nexport default function CommandBasicDemo() {\n    const [open, setOpen] = useState(false)\n    React.useEffect(() => {\n        const down = (e: KeyboardEvent) => {\n            if (e.key === 'j') {\n                e.preventDefault()\n                setOpen((open: boolean) => !open)\n            }\n        }\n        document.addEventListener('keydown', down)\n        return () => document.removeEventListener('keydown', down)\n    }, [])\n\n    const isDesktop = useMediaQuery('(min-width: 1024px)')\n    return (\n        <>\n            <Button\n                onPress={() => setOpen((open: boolean) => !open)}\n                variant='outline'\n                aria-label='Open command'\n            >\n                Press <kbd className='rounded border px-2 py-1 text-xs'>⌘J</kbd>\n            </Button>\n            <Command.Modal isOpen={open} onOpenChange={setOpen}>\n                <Command.Input autoFocus={isDesktop} placeholder='Search Item' />\n                <Command.List>\n                    <Command.Empty>No results found.</Command.Empty>\n                    <Command.Group heading='First Section'>\n                        <Command.Item>First</Command.Item>\n                        <Command.Item>Second</Command.Item>\n                        <Command.Item>Third</Command.Item>\n                    </Command.Group>\n                    <Command.Separator />\n                    <Command.Group heading='Second Section'>\n                        <Command.Item>Fourth</Command.Item>\n                        <Command.Item>Fifth</Command.Item>\n                        <Command.Item>Sixth</Command.Item>\n                    </Command.Group>\n                </Command.List>\n            </Command.Modal>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "collections/menu-basic-demo": {
    "component": "@/components/docs/collections/menu-basic-demo",
    "raw": "'use client'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuBasicDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger aria-labelledby='basic-menu-trigger'>Open</Menu.Trigger>\n            <Menu.Content aria-labelledby='basic-menu-trigger' placement='bottom'>\n                <Menu.Item>Inbox</Menu.Item>\n                <Menu.Item>Sent</Menu.Item>\n                <Menu.Item>New Message</Menu.Item>\n                <Menu.Item isDanger>Spam</Menu.Item>\n                <Menu.Item isDisabled>Outbox</Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n",
    "type": "docs"
  },
  "collections/grid-list-multiple-demo": {
    "component": "@/components/docs/collections/grid-list-multiple-demo",
    "raw": "'use client'\n\nimport { GridList } from '@/components/ui'\n\nexport default function GridListMultipleDemo() {\n    return (\n        <div>\n            <GridList\n                items={items}\n                aria-label='Select items'\n                selectionMode='multiple'\n                className='min-w-64'\n            >\n                {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n            </GridList>\n        </div>\n    )\n}\n\nconst items = [\n    { id: '1', name: 'The Beatles' },\n    { id: '2', name: 'Led Zeppelin' },\n    { id: '3', name: 'Pink Floyd' },\n    { id: '4', name: 'Queen' },\n    { id: '5', name: 'The Rolling Stones' }\n]\n",
    "type": "docs"
  },
  "collections/menu-with-icon-demo": {
    "component": "@/components/docs/collections/menu-with-icon-demo",
    "raw": "'use client'\n\nimport React, { useState } from 'react'\n\nimport { OptionPreview } from '@/components/docs/outside/option-preview'\nimport { FacebookLogo, XLogo } from '@/components/logo'\nimport { Avatar, Menu, Select, Switch } from '@/components/ui'\nimport type { Placement } from '@react-types/overlays'\nimport {\n    ChevronsUpDown,\n    Hash,\n    Headphones,\n    LogOut,\n    Mail,\n    MessageCircle,\n    Plus,\n    Settings,\n    Share2,\n    UserPlus\n} from 'lucide-react'\n\nimport { placements } from './single-menu-demo'\n\nexport default function MenuWithIconDemo() {\n    const [showArrow, setShowArrow] = useState(false)\n    const [selected, setSelected] = React.useState<Placement>('bottom')\n    return (\n        <>\n            <OptionPreview className='space-y-2'>\n                <Switch isSelected={showArrow} onChange={() => setShowArrow(!showArrow)}>\n                    Show arrow\n                </Switch>\n                <Select\n                    aria-label='placement'\n                    className='[&>.btr]:h-8'\n                    selectedKey={selected}\n                    onSelectionChange={(v) => setSelected(v as Placement)}\n                    items={placements}\n                >\n                    {(item) => <Select.Item id={item.name}>{item.name}</Select.Item>}\n                </Select>\n            </OptionPreview>\n            <Menu>\n                <Menu.Trigger aria-labelledby='basic-menu-trigger'>\n                    <Avatar className='size-10' initials='DQ' />\n                </Menu.Trigger>\n                <Menu.Content\n                    showArrow={showArrow}\n                    placement={selected}\n                    className='min-w-64'\n                >\n                    <Menu.Section>\n                        <Menu.Header separator>\n                            <span className='block'>DQ Nahdliyan</span>\n                            <span className='font-normal text-muted-foreground'>\n                                @dqnahdliyan\n                            </span>\n                        </Menu.Header>\n                    </Menu.Section>\n                    <Menu.Item onAction={() => setShowArrow(!showArrow)}>\n                        <ChevronsUpDown />\n                        {showArrow ? 'Hide' : 'Show'} Arrow\n                    </Menu.Item>\n                    <Menu.Item>\n                        <Settings />\n                        Settings\n                    </Menu.Item>\n                    <Menu.Item href='#'>\n                        <Plus />\n                        Create Team\n                    </Menu.Item>\n                    <Menu.Item href='#'>\n                        <Hash />\n                        Command Menu\n                        <Menu.Keyboard keys='⌘K' />\n                    </Menu.Item>\n                    <Menu.SubTrigger>\n                        <Menu.Item>\n                            <UserPlus />\n                            <span>Invite users</span>\n                        </Menu.Item>\n                        <Menu.Content\n                            aria-labelledby='basic-menu-trigger-submenu'\n                            offset={8}\n                        >\n                            <Menu.Item>\n                                <Mail />\n                                <span>Email</span>\n                            </Menu.Item>\n                            <Menu.Item>\n                                <MessageCircle />\n                                <span>Message</span>\n                            </Menu.Item>\n                            <Menu.Separator />\n                            <Menu.SubTrigger>\n                                <Menu.Item>\n                                    <Share2 />\n                                    <span>Share</span>\n                                </Menu.Item>\n                                <Menu.Content\n                                    aria-labelledby='basic-menu-trigger-submenu'\n                                    offset={8}\n                                >\n                                    <Menu.Item>\n                                        <XLogo className='size-4' />\n                                        <span>Twitter</span>\n                                    </Menu.Item>\n                                    <Menu.Item>\n                                        <FacebookLogo className='size-4' />\n                                        <span>Facebook</span>\n                                    </Menu.Item>\n                                </Menu.Content>\n                            </Menu.SubTrigger>\n                        </Menu.Content>\n                    </Menu.SubTrigger>\n                    <Menu.Separator />\n                    <Menu.Item href='#'>\n                        <Headphones />\n                        Contact Support\n                    </Menu.Item>\n                    <Menu.Separator />\n                    <Menu.Item>\n                        <LogOut />\n                        Log out\n                    </Menu.Item>\n                </Menu.Content>\n            </Menu>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "collections/single-menu-demo": {
    "component": "@/components/docs/collections/single-menu-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Menu } from '@/components/ui'\nimport type { Placement } from '@react-types/overlays'\nimport type { Selection } from '@react-types/shared'\n\nexport const placements = [\n    'bottom',\n    'bottom left',\n    'bottom right',\n    'bottom start',\n    'bottom end',\n    'top',\n    'top left',\n    'top right',\n    'top start',\n    'top end',\n    'left',\n    'left top',\n    'left bottom',\n    'start',\n    'start top',\n    'start bottom',\n    'right',\n    'right top',\n    'right bottom',\n    'end',\n    'end top',\n    'end bottom'\n].map((item, i) => ({ id: i, name: item }))\n\nexport default function SingleMenuDemo() {\n    const [selected, setSelected] = React.useState<Selection>(new Set(['bottom']))\n    return (\n        <Menu>\n            <Button variant='outline'>Placement</Button>\n            <Menu.Content\n                placement={Array.from(selected)[0] as Placement}\n                selectionMode='single'\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n                items={placements}\n                className='max-h-72 min-w-52'\n            >\n                {(item) => <Menu.RadioItem id={item.name}>{item.name}</Menu.RadioItem>}\n            </Menu.Content>\n        </Menu>\n    )\n}\n",
    "type": "docs"
  },
  "collections/grid-list-render-empty-state-demo": {
    "component": "@/components/docs/collections/grid-list-render-empty-state-demo",
    "raw": "'use client'\n\nimport { GridList } from '@/components/ui'\n\nexport default function GridListRenderEmptyStateDemo() {\n    return (\n        <GridList\n            items={items}\n            aria-label='Select items'\n            selectionMode='multiple'\n            className='min-w-64'\n            renderEmptyState={() => (\n                <GridList.EmptyState>No bands selected</GridList.EmptyState>\n            )}\n        />\n    )\n}\n\nconst items: Iterable<any> | undefined = []\n",
    "type": "docs"
  },
  "collections/tag-group-with-remove-demo": {
    "component": "@/components/docs/collections/tag-group-with-remove-demo",
    "raw": "'use client'\n\nimport { Tag, TagGroup } from '@/components/ui'\nimport { useListData } from 'react-stately'\n\nexport default function TagGroupWithRemoveDemo() {\n    const list = useListData({\n        initialItems: [\n            { id: '1', name: 'Samsung', available: false },\n            { id: '2', name: 'OnePlus', available: true },\n            { id: '3', name: 'Google', available: true },\n            { id: '4', name: 'Xiaomi', available: false }\n        ]\n    })\n\n    return (\n        <TagGroup\n            label='Android Brands'\n            selectionMode='multiple'\n            items={list.items}\n            onRemove={(keys: any) => list.remove(...keys)}\n        >\n            {(item) => <Tag>{item.name}</Tag>}\n        </TagGroup>\n    )\n}\n",
    "type": "docs"
  },
  "collections/tag-group-controlled-demo": {
    "component": "@/components/docs/collections/tag-group-controlled-demo",
    "raw": "import React from 'react'\n\nimport type { Selection } from 'react-aria-components'\nimport { Description, Tag, TagGroup } from 'ui'\n\nconst fruitList = [\n    { id: '1', name: 'Apple', available: false },\n    { id: '2', name: 'Banana', available: true },\n    { id: '3', name: 'Cherry', available: true },\n    { id: '4', name: 'Date', available: false }\n]\n\nexport default function TagGroupControlledDemo() {\n    const [selected, setSelected] = React.useState<Selection>(new Set([]))\n    return (\n        <div>\n            <TagGroup\n                selectionMode='multiple'\n                items={fruitList}\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n            >\n                {(item) => <Tag>{item.name}</Tag>}\n            </TagGroup>\n\n            <Description className='mt-2 block [&>strong]:text-foreground text-muted-foreground'>\n                You have selected: <strong>{Array.from(selected).join(', ')}</strong>\n            </Description>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "pickers/select-invalid-demo": {
    "component": "@/components/docs/pickers/select-invalid-demo",
    "raw": "'use client'\n\nimport { Select } from '@/components/ui'\n\nconst software = [\n    { id: 1, name: 'Adobe Photoshop' }\n    //...\n]\n\nexport default function SelectInvalidDemo() {\n    return (\n        <Select\n            label='Design software'\n            isInvalid\n            placeholder='Select a software'\n            items={software}\n        >\n            {(item) => (\n                <Select.Item id={item.id} textValue={item.name}>\n                    {item.name}\n                </Select.Item>\n            )}\n        </Select>\n    )\n}\n",
    "type": "docs"
  },
  "pickers/combo-box-invalid-demo": {
    "component": "@/components/docs/pickers/combo-box-invalid-demo",
    "raw": "'use client'\n\nimport { Avatar, ComboBox } from '@/components/ui'\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' }\n    //...\n]\nexport default function ComboBoxInvalidDemo() {\n    return (\n        <ComboBox\n            placeholder='Select a user'\n            isInvalid\n            label='Users'\n            isRequired\n            items={users}\n        >\n            {(item) => (\n                <ComboBox.Item key={item.id} id={item.id} textValue={item.name}>\n                    <Avatar src={item.image_url} />\n                    {item.name}\n                </ComboBox.Item>\n            )}\n        </ComboBox>\n    )\n}\n",
    "type": "docs"
  },
  "pickers/combo-box-demo": {
    "component": "@/components/docs/pickers/combo-box-demo",
    "raw": "'use client'\n\nimport { ComboBox } from '@/components/ui'\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n    { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n    { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n    {\n        id: 4,\n        name: 'Ms. Ettie Abshire DVM',\n        image_url: 'https://i.pravatar.cc/150?img=4'\n    },\n    { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n    { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' },\n    {\n        id: 7,\n        name: 'Miss Jacinthe Gerlach DVM',\n        image_url: 'https://i.pravatar.cc/150?img=7'\n    },\n    {\n        id: 8,\n        name: 'Miss Stephania Schaefer Sr.',\n        image_url: 'https://i.pravatar.cc/150?img=8'\n    },\n    { id: 9, name: 'Kevon Hackett MD', image_url: 'https://i.pravatar.cc/150?img=9' },\n    { id: 10, name: 'Tom Ledner', image_url: 'https://i.pravatar.cc/150?img=10' }\n]\n\nexport default function ComboBoxDemo() {\n    return (\n        <ComboBox placeholder='Select a user' label='Users' isRequired items={users}>\n            {(item) => (\n                <ComboBox.Item key={item.id} id={item.id} textValue={item.name}>\n                    {item.name}\n                </ComboBox.Item>\n            )}\n        </ComboBox>\n    )\n}\n",
    "type": "docs"
  },
  "pickers/combo-box-avatar-demo": {
    "component": "@/components/docs/pickers/combo-box-avatar-demo",
    "raw": "'use client'\n\nimport { Avatar, ComboBox } from '@/components/ui'\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n    { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n    { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n    {\n        id: 4,\n        name: 'Ms. Ettie Abshire DVM',\n        image_url: 'https://i.pravatar.cc/150?img=4'\n    },\n    { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n    { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' },\n    {\n        id: 7,\n        name: 'Miss Jacinthe Gerlach DVM',\n        image_url: 'https://i.pravatar.cc/150?img=7'\n    },\n    {\n        id: 8,\n        name: 'Miss Stephania Schaefer Sr.',\n        image_url: 'https://i.pravatar.cc/150?img=8'\n    },\n    { id: 9, name: 'Kevon Hackett MD', image_url: 'https://i.pravatar.cc/150?img=9' },\n    { id: 10, name: 'Tom Ledner', image_url: 'https://i.pravatar.cc/150?img=10' }\n]\n\nexport default function ComboBoxAvatarDemo() {\n    return (\n        <ComboBox placeholder='Select a user' label='Users' isRequired items={users}>\n            {(item) => (\n                <ComboBox.Item key={item.id} id={item.id} textValue={item.name}>\n                    <Avatar src={item.image_url} />\n                    {item.name}\n                </ComboBox.Item>\n            )}\n        </ComboBox>\n    )\n}\n",
    "type": "docs"
  },
  "pickers/select-demo": {
    "component": "@/components/docs/pickers/select-demo",
    "raw": "'use client'\n\nimport { Select } from '@/components/ui'\n\nexport const distros = [\n    { id: 1, name: 'Debian' },\n    { id: 2, name: 'Ubuntu' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'OpenSUSE' },\n    { id: 6, name: 'Red Hat' }\n]\nexport default function SelectDemo() {\n    return (\n        <Select label='Linux Distros' placeholder='Select a linux distro' items={distros}>\n            {(item) => (\n                <Select.Item key={item.id} id={item.id} textValue={item.name}>\n                    {item.name}\n                </Select.Item>\n            )}\n        </Select>\n    )\n}\n",
    "type": "docs"
  },
  "pickers/select-disabled-demo": {
    "component": "@/components/docs/pickers/select-disabled-demo",
    "raw": "'use client'\n\nimport { Select } from '@/components/ui'\n\nconst software = [\n    { id: 1, name: 'Adobe Photoshop' }\n    //...\n]\n\nexport default function SelectDisabledDemo() {\n    return (\n        <Select\n            label='Design software'\n            isDisabled\n            placeholder='Select a software'\n            items={software}\n        >\n            {(item) => (\n                <Select.Item id={item.id} textValue={item.name}>\n                    {item.name}\n                </Select.Item>\n            )}\n        </Select>\n    )\n}\n",
    "type": "docs"
  },
  "pickers/combo-box-disabled-demo": {
    "component": "@/components/docs/pickers/combo-box-disabled-demo",
    "raw": "'use client'\n\nimport { Avatar, ComboBox } from '@/components/ui'\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' }\n    //...\n]\nexport default function ComboBoxDisabledDemo() {\n    return (\n        <ComboBox\n            placeholder='Select a user'\n            isDisabled\n            label='Users'\n            isRequired\n            items={users}\n        >\n            {(item) => (\n                <ComboBox.Item key={item.id} id={item.id} textValue={item.name}>\n                    <Avatar src={item.image_url} />\n                    {item.name}\n                </ComboBox.Item>\n            )}\n        </ComboBox>\n    )\n}\n",
    "type": "docs"
  },
  "pickers/multi-select-demo": {
    "component": "@/components/docs/pickers/multi-select-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { MultiSelect } from '@/components/ui'\n\nconst frameworks = [\n    { value: 'next', label: 'Next' },\n    { value: 'astro', label: 'Astro' },\n    { value: 'nuxt', label: 'Nuxt' },\n    { value: 'svelte', label: 'Svelte' },\n    { value: 'laravel', label: 'Laravel' },\n    { value: 'ci', label: 'Codeigniter' }\n]\nexport default function MultiSelectDemo() {\n    const [selectedItems, setSelectedItems] = React.useState<\n        { value: string; label: string }[]\n    >([])\n    return (\n        <MultiSelect\n            className='max-w-72'\n            label='Tags'\n            selected={selectedItems}\n            setSelected={setSelectedItems}\n            placeholder='Select frameworks'\n            items={frameworks}\n        ></MultiSelect>\n    )\n}\n",
    "type": "docs"
  },
  "surfaces/card-demo": {
    "component": "@/components/docs/surfaces/card-demo",
    "raw": "'use client'\n\nimport { Button, Card } from '@/components/ui'\n\nexport default function CardDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Teerakat UI</Card.Title>\n                <Card.Description>UI Library for your react project</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                Make beautiful websites regardless of your design experience.\n            </Card.Content>\n            <Card.Footer>\n                <Button>View Details</Button>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "surfaces/grid-debug-demo": {
    "component": "@/components/docs/surfaces/grid-debug-demo",
    "raw": "import { Grid } from '@/components/ui'\n\nexport default function GridDebugDemo() {\n    return (\n        <Grid debug columns={3} gap={4}>\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n        </Grid>\n    )\n}\n",
    "type": "docs"
  },
  "surfaces/grid-collections-demo": {
    "component": "@/components/docs/surfaces/grid-collections-demo",
    "raw": "import { Card, Grid } from '@/components/ui'\n\nexport default function GridCollectionsDemo() {\n    return (\n        <Grid\n            aria-label='List articles'\n            columns={{ initial: 1, sm: 2, '2xl': 3 }}\n            gap={2}\n            items={articles}\n        >\n            {(item) => (\n                <Grid.Item>\n                    <Card>\n                        <Card.Header>\n                            <Card.Title>{item.title}</Card.Title>\n                            <Card.Description>{item.description}</Card.Description>\n                        </Card.Header>\n                    </Card>\n                </Grid.Item>\n            )}\n        </Grid>\n    )\n}\n\nconst articles = [\n    {\n        id: 1,\n        title: 'Understanding React Hooks',\n        description:\n            \"Get the lowdown on React Hooks, how to use 'em, and best practices for those sleek functional components.\"\n    },\n    {\n        id: 2,\n        title: 'Mastering TypeScript',\n        description:\n            'Dive deep into TypeScript, from basic stuff to pro features, for building rock-solid apps.'\n    },\n    {\n        id: 3,\n        title: 'Laravel Eloquent Tips',\n        description:\n            'Check out advanced tricks for using Laravel Eloquent ORM to make your database game strong.'\n    },\n    {\n        id: 4,\n        title: 'Building with Next.js',\n        description:\n            'A full-on tutorial on creating server-rendered React apps with the Next.js framework.'\n    },\n    {\n        id: 5,\n        title: 'Inertia.js for Full-Stack Devs',\n        description:\n            'Learn how Inertia.js smooths out the gap between client-side frameworks and server-side apps.'\n    },\n    {\n        id: 6,\n        title: 'Optimizing Web Performance',\n        description:\n            'Tips and tricks to boost the performance and speed of your web apps.'\n    }\n]\n",
    "type": "docs"
  },
  "surfaces/card-table-demo": {
    "component": "@/components/docs/surfaces/card-table-demo",
    "raw": "'use client'\n\nimport { Card, Menu, Pagination, Table } from '@/components/ui'\nimport { Edit, Eye, MoreVertical, Trash } from 'lucide-react'\n\nconst users = [\n    {\n        id: 1,\n        name: 'John Doe',\n        gender: 'Male',\n        age: 30,\n        occupation: 'Software Engineer'\n    },\n    {\n        id: 2,\n        name: 'Jane Smith',\n        gender: 'Female',\n        age: 25,\n        occupation: 'Marketing Manager'\n    },\n    {\n        id: 3,\n        name: 'Bob Johnson',\n        gender: 'Male',\n        age: 40,\n        occupation: 'Doctor'\n    },\n    {\n        id: 4,\n        name: 'Emily Chen',\n        gender: 'Female',\n        age: 28,\n        occupation: 'Teacher'\n    },\n    {\n        id: 5,\n        name: 'Michael Brown',\n        gender: 'Male',\n        age: 35,\n        occupation: 'Lawyer'\n    },\n    {\n        id: 6,\n        name: 'Sarah Lee',\n        gender: 'Female',\n        age: 32,\n        occupation: 'Designer'\n    },\n    {\n        id: 7,\n        name: 'Kevin White',\n        gender: 'Male',\n        age: 45,\n        occupation: 'CEO'\n    },\n    {\n        id: 8,\n        name: 'Lisa Nguyen',\n        gender: 'Female',\n        age: 29,\n        occupation: 'Engineer'\n    },\n    {\n        id: 9,\n        name: 'David Kim',\n        gender: 'Male',\n        age: 38,\n        occupation: 'Consultant'\n    },\n    {\n        id: 10,\n        name: 'Hannah Patel',\n        gender: 'Female',\n        age: 26,\n        occupation: 'Writer'\n    }\n]\n\nexport default function CardTableDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Users</Card.Title>\n                <Card.Description>Manage users, groups, and roles.</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Table aria-label='Bands'>\n                    <Table.Header>\n                        <Table.Column>#</Table.Column>\n                        <Table.Column>Name</Table.Column>\n                        <Table.Column>Genre</Table.Column>\n                        <Table.Column>Age</Table.Column>\n                        <Table.Column>Occupation</Table.Column>\n                        <Table.Column />\n                    </Table.Header>\n                    <Table.Body items={users}>\n                        {(item) => (\n                            <Table.Row key={item.id}>\n                                <Table.Cell>{item.id}</Table.Cell>\n                                <Table.Cell>{item.name}</Table.Cell>\n                                <Table.Cell>{item.gender}</Table.Cell>\n                                <Table.Cell>{item.age}</Table.Cell>\n                                <Table.Cell>{item.occupation}</Table.Cell>\n                                <Table.Cell className='flex justify-end'>\n                                    <Menu>\n                                        <Menu.Trigger>\n                                            <MoreVertical />\n                                        </Menu.Trigger>\n                                        <Menu.Content showArrow placement='left'>\n                                            <Menu.Item>\n                                                <Eye /> View\n                                            </Menu.Item>\n                                            <Menu.Item>\n                                                <Edit /> Edit\n                                            </Menu.Item>\n                                            <Menu.Separator />\n                                            <Menu.Item isDanger>\n                                                <Trash /> Delete\n                                            </Menu.Item>\n                                        </Menu.Content>\n                                    </Menu>\n                                </Table.Cell>\n                            </Table.Row>\n                        )}\n                    </Table.Body>\n                </Table>\n            </Card.Content>\n            <Card.Footer>\n                <Pagination>\n                    <Pagination.Content>\n                        <Pagination.Item>\n                            <Pagination.First href='#' />\n                        </Pagination.Item>\n                        <Pagination.Item>\n                            <Pagination.Previous href='#' />\n                        </Pagination.Item>\n                        <Pagination.Item>\n                            <Pagination.Link href='#'>1</Pagination.Link>\n                        </Pagination.Item>\n                        <Pagination.Item>\n                            <Pagination.Link href='#' isActive>\n                                2\n                            </Pagination.Link>\n                        </Pagination.Item>\n                        <Pagination.Item>\n                            <Pagination.Ellipsis />\n                        </Pagination.Item>\n                        <Pagination.Item>\n                            <Pagination.Next href='#' />\n                        </Pagination.Item>\n                        <Pagination.Item>\n                            <Pagination.Last href='#' />\n                        </Pagination.Item>\n                    </Pagination.Content>\n                </Pagination>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "surfaces/grid-gap-demo": {
    "component": "@/components/docs/surfaces/grid-gap-demo",
    "raw": "import { Grid } from '@/components/ui'\n\nexport default function GridGapDemo() {\n    return (\n        <Grid\n            columns={{\n                initial: 4,\n                sm: 5,\n                md: 6\n            }}\n            gap={{\n                initial: 2,\n                sm: 4\n            }}\n        >\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n        </Grid>\n    )\n}\n",
    "type": "docs"
  },
  "surfaces/grid-responsive-demo": {
    "component": "@/components/docs/surfaces/grid-responsive-demo",
    "raw": "import { Grid } from '@/components/ui'\n\nexport default function GridResponsiveDemo() {\n    return (\n        <Grid\n            columns={{\n                initial: 3,\n                sm: 4,\n                md: 5,\n                xl: 6\n            }}\n            gap={{\n                initial: 2,\n                sm: 3,\n                lg: 4\n            }}\n        >\n            <Grid.Item>\n                <div className='p-4 border h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-32' />\n            </Grid.Item>\n        </Grid>\n    )\n}\n",
    "type": "docs"
  },
  "surfaces/card-login-form-demo": {
    "component": "@/components/docs/surfaces/card-login-form-demo",
    "raw": "'use client'\n\nimport { Button, Card, Checkbox, Form, Link, TextField } from '@/components/ui'\n\nexport default function CardLoginFormDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Login</Card.Title>\n                <Card.Description>Use your email and password to login</Card.Description>\n            </Card.Header>\n            <Form action={() => {}}>\n                <Card.Content className='space-y-6'>\n                    <TextField isRequired label='Email' placeholder='Enter your email' />\n                    <TextField\n                        isRequired\n                        label='Password'\n                        type='password'\n                        placeholder='Enter your password'\n                    />\n                    <div className='flex items-center justify-between'>\n                        <Checkbox>Remember me</Checkbox>\n                        <Link href='#' className='text-sm text-muted-foreground'>\n                            Forgot password?\n                        </Link>\n                    </div>\n                </Card.Content>\n                <Card.Footer>\n                    <Button type='submit'>Login</Button>\n                </Card.Footer>\n            </Form>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "surfaces/grid-gap-x-y-demo": {
    "component": "@/components/docs/surfaces/grid-gap-x-y-demo",
    "raw": "import { Grid } from '@/components/ui'\n\nexport default function GridGapXYDemo() {\n    return (\n        <Grid\n            columns={{\n                initial: 3,\n                sm: 4,\n                md: 6\n            }}\n            gapX={{\n                initial: 2,\n                sm: 4\n            }}\n            gapY={{\n                initial: 4,\n                sm: 6\n            }}\n        >\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n        </Grid>\n    )\n}\n",
    "type": "docs"
  },
  "surfaces/grid-item-demo": {
    "component": "@/components/docs/surfaces/grid-item-demo",
    "raw": "import { Grid } from '@/components/ui'\n\nexport default function GridItemDemo() {\n    return (\n        <Grid debug columns={3} gap={4}>\n            <Grid.Item\n                colSpan={{\n                    initial: 1,\n                    sm: 2\n                }}\n                className='w-full h-24 grid place-content-center'\n            >\n                1\n            </Grid.Item>\n            <Grid.Item className='w-full h-24 grid place-content-center'>2</Grid.Item>\n            <Grid.Item\n                colSpan={{\n                    initial: 1,\n                    sm: 3\n                }}\n                className='w-full h-24 grid place-content-center'\n            >\n                3\n            </Grid.Item>\n        </Grid>\n    )\n}\n",
    "type": "docs"
  },
  "surfaces/grid-basic-demo": {
    "component": "@/components/docs/surfaces/grid-basic-demo",
    "raw": "import { Grid } from '@/components/ui'\n\nexport default function GridBasicDemo() {\n    return (\n        <div>\n            <Grid columns={6}>\n                <Grid.Item>\n                    <div className='p-4 border-l border-y h-32' />\n                </Grid.Item>\n                <Grid.Item>\n                    <div className='p-4 border-l border-y h-32' />\n                </Grid.Item>\n                <Grid.Item>\n                    <div className='p-4 border-l border-y h-32' />\n                </Grid.Item>\n                <Grid.Item>\n                    <div className='p-4 border-l border-y h-32' />\n                </Grid.Item>\n                <Grid.Item>\n                    <div className='p-4 border-l border-y h-32' />\n                </Grid.Item>\n                <Grid.Item>\n                    <div className='p-4 border-l border-y h-32 border-r' />\n                </Grid.Item>\n            </Grid>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "drag-and-drop/drop-zone-demo": {
    "component": "@/components/docs/drag-and-drop/drop-zone-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DropZone, Label } from 'ui'\n\nexport default function DropZoneDemo() {\n    const [dropped, setDropped] = React.useState(false)\n\n    return (\n        <DropZone onDrop={() => setDropped(true)}>\n            <Label>{dropped ? 'Drop nailed' : 'Toss your stuff here'}</Label>\n        </DropZone>\n    )\n}\n",
    "type": "docs"
  },
  "drag-and-drop/drop-zone-and-file-trigger-demo": {
    "component": "@/components/docs/drag-and-drop/drop-zone-and-file-trigger-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DropZone, Label } from '@/components/ui'\n\nexport default function DropZoneDemo() {\n    const [dropped, setDropped] = React.useState(false)\n\n    return (\n        <DropZone onDrop={() => setDropped(true)}>\n            <Label>{dropped ? 'Drop nailed' : 'Toss your stuff here'}</Label>\n        </DropZone>\n    )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-picker-disabled-demo": {
    "component": "@/components/docs/date-and-time/date-picker-disabled-demo",
    "raw": "'use client'\n\nimport { DatePicker } from '@/components/ui'\n\nexport default function DatePickerDisabledDemo() {\n    return <DatePicker isDisabled label='Event date' />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-field-demo": {
    "component": "@/components/docs/date-and-time/date-field-demo",
    "raw": "'use client'\n\nimport { DateField } from '@/components/ui'\n\nexport default function DateFieldDemo() {\n    return <DateField label='Event date' />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-range-picker-validation-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker-validation-demo",
    "raw": "'use client'\n\nimport { Button, DateRangePicker, Form } from '@/components/ui'\n\nexport default function DateRangePickerValidationDemo() {\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <DateRangePicker isRequired label='Event date' className='mb-2' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field-hc-demo": {
    "component": "@/components/docs/date-and-time/time-field-hc-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { OptionPreview } from '@/components/docs/outside/option-preview'\nimport { Switch, TimeField } from '@/components/ui'\nimport { Time } from '@internationalized/date'\n\nexport default function TimeFieldHcDemo() {\n    const [hc, setHc] = React.useState<12 | 24>(24)\n    const [value, setValue] = React.useState(new Time(13, 45))\n    return (\n        <>\n            <OptionPreview>\n                <Switch\n                    isSelected={hc === 24}\n                    onChange={() => setHc((prevHc) => (prevHc === 24 ? 12 : 24))}\n                >\n                    {hc} hour\n                </Switch>\n            </OptionPreview>\n            <TimeField\n                value={value}\n                onChange={setValue}\n                hourCycle={hc}\n                label='Event time'\n            />\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-field-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DateField } from '@/components/ui'\nimport { getLocalTimeZone, parseDate, today } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\n\nexport default function DateFieldDisabledDemo() {\n    const now = today(getLocalTimeZone())\n    const [value, setValue] = React.useState(parseDate(now.toString()))\n\n    const formatter = useDateFormatter({ dateStyle: 'full' })\n\n    return (\n        <div className='space-y-3'>\n            <div className='divide-y [&_p]:py-2'>\n                <p>{value ? formatter.format(value.toDate(getLocalTimeZone())) : '--'}</p>\n                <p>{value ? value.toString() : '--'}</p>\n            </div>\n            <DateField value={value} onChange={setValue} label='Event date' />\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-range-picker-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker-demo",
    "raw": "'use client'\n\nimport { DateRangePicker } from '@/components/ui'\n\nexport default function DateRangePickerDemo() {\n    return <DateRangePicker label='Event date' />\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field-controlled-demo": {
    "component": "@/components/docs/date-and-time/time-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { TimeField } from '@/components/ui'\nimport { Time } from '@internationalized/date'\n\nexport default function TimeFieldValidationDemo() {\n    const [value, setValue] = React.useState(new Time(11, 45))\n    return (\n        <div className='space-y-3'>\n            <div className='divide-y [&_p]:py-2'>\n                <p>{value ? value.toString() : '--'}</p>\n            </div>\n            <TimeField label='Event time' value={value} onChange={setValue} />\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-picker-required-demo": {
    "component": "@/components/docs/date-and-time/date-picker-required-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, DatePicker, Form } from '@/components/ui'\n\nexport default function DatePickerRequiredDemo() {\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <DatePicker\n                label='Delivery date'\n                name='deliveryDate'\n                isRequired\n                className='mb-2'\n            />\n\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-field-disabled-demo": {
    "component": "@/components/docs/date-and-time/date-field-disabled-demo",
    "raw": "'use client'\n\nimport { DateField } from '@/components/ui'\n\nexport default function DateFieldDisabledDemo() {\n    return <DateField isDisabled label='Event date' />\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field-validation-demo": {
    "component": "@/components/docs/date-and-time/time-field-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, TimeField } from '@/components/ui'\n\nexport default function TimeFieldValidationDemo() {\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <TimeField label='Event time' isRequired className='mb-2' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field-disabled-demo": {
    "component": "@/components/docs/date-and-time/time-field-disabled-demo",
    "raw": "'use client'\n\nimport { TimeField } from '@/components/ui'\n\nexport default function TimeFieldDisabledDemo() {\n    return <TimeField isDisabled label='Event time' />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-picker-demo": {
    "component": "@/components/docs/date-and-time/date-picker-demo",
    "raw": "'use client'\n\nimport { DatePicker } from '@/components/ui'\n\nexport default function DatePickerDemo() {\n    return <DatePicker label='Event date' />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-range-picker-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DateRangePicker } from '@/components/ui'\nimport { getLocalTimeZone, today } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\n\nexport default function DateRangePickerControlledDemo() {\n    const now = today(getLocalTimeZone())\n    const tomorrowWeek = today(getLocalTimeZone()).add({ days: 12 })\n    const formatter = useDateFormatter({ dateStyle: 'full' })\n\n    const [value, setValue] = React.useState({\n        start: now,\n        end: tomorrowWeek\n    })\n\n    return (\n        <div className='space-y-3'>\n            <div className='divide-y [&_p]:py-2'>\n                <p>\n                    {value\n                        ? `${formatter.format(value.start.toDate(getLocalTimeZone()))} to ${formatter.format(value.end.toDate(getLocalTimeZone()))}`\n                        : '-- to --'}\n                </p>\n                <p>\n                    {value\n                        ? `${value.start.toString()} to ${value.end.toString()}`\n                        : '-- to --'}\n                </p>\n            </div>\n            <DateRangePicker value={value} onChange={setValue} label='Event date' />\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-range-picker-disabled-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker-disabled-demo",
    "raw": "'use client'\n\nimport { DateRangePicker } from '@/components/ui'\n\nexport default function DateRangePickerDisabledDemo() {\n    return <DateRangePicker isDisabled label='Event date' />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-range-picker-custom-validation-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker-custom-validation-demo",
    "raw": "'use client'\n\nimport { Button, DateRangePicker, Form } from '@/components/ui'\nimport { getLocalTimeZone, today } from '@internationalized/date'\n\nexport default function DateRangePickerCustomValidationDemo() {\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <DateRangePicker\n                label='Room Booking Dates'\n                validate={(range) =>\n                    range?.end.compare(range.start) > 7\n                        ? 'Maximum booking duration is 1 week.'\n                        : null\n                }\n                defaultValue={{\n                    start: today(getLocalTimeZone()),\n                    end: today(getLocalTimeZone()).add({ weeks: 2 })\n                }}\n                className='mb-2'\n            />\n            <Button type='submit'>Book Room</Button>\n        </Form>\n    )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-field-validation-demo": {
    "component": "@/components/docs/date-and-time/date-field-validation-demo",
    "raw": "'use client'\n\nimport { Button, DateField, Form } from '@/components/ui'\n\nexport default function DateFieldDisabledDemo() {\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <DateField isRequired label='Event date' className='mb-2' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-picker-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-picker-controlled-demo",
    "raw": "import React from 'react'\n\nimport { DatePicker } from '@/components/ui'\nimport { getLocalTimeZone, parseDate, today } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\n\nexport default function DatePickerControlledDemo() {\n    const now = today(getLocalTimeZone())\n\n    const [value, setValue] = React.useState(parseDate(now.toString()))\n\n    const formatter = useDateFormatter({ dateStyle: 'full' })\n\n    return (\n        <div className='space-y-3'>\n            <div className='divide-y [&_p]:py-2'>\n                <p>{value ? formatter.format(value.toDate(getLocalTimeZone())) : '--'}</p>\n                <p>{value ? value.toString() : '--'}</p>\n            </div>\n            <DatePicker value={value} onChange={setValue} label='Event date' />\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "date-and-time/calendar-demo": {
    "component": "@/components/docs/date-and-time/calendar-demo",
    "raw": "'use client'\n\nimport { Calendar } from '@/components/ui'\n\nexport default function CalendarDemo() {\n    return (\n        <Calendar\n            aria-label='Event date'\n            onChange={function Qa() {}}\n            onFocusChange={function Qa() {}}\n        />\n    )\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field-demo": {
    "component": "@/components/docs/date-and-time/time-field-demo",
    "raw": "'use client'\n\nimport { TimeField } from '@/components/ui'\n\nexport default function TimeFieldDemo() {\n    return <TimeField label='Event time' />\n}\n",
    "type": "docs"
  },
  "date-and-time/range-calendar-demo": {
    "component": "@/components/docs/date-and-time/range-calendar-demo",
    "raw": "'use client'\n\nimport { Calendar } from '@/components/ui'\n\nexport default function RangeCalendarDemo() {\n    return <Calendar.RangeCalendar aria-label='Trip dates' />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-picker-custom-validation-demo": {
    "component": "@/components/docs/date-and-time/date-picker-custom-validation-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, DatePicker, Form } from '@/components/ui'\nimport { getLocalTimeZone, parseDate, startOfYear, today } from '@internationalized/date'\n\nexport default function DatePickerInvalidDemo() {\n    const ly = startOfYear(today(getLocalTimeZone()))\n    const now = today(getLocalTimeZone())\n    const [value, setValue] = React.useState(parseDate(ly.toString()))\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <DatePicker\n                validate={(date) => (date < now ? 'Select a future date, please.' : null)}\n                value={value}\n                onChange={setValue}\n                label='Delivery date'\n                className='mb-2'\n            />\n\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n",
    "type": "docs"
  },
  "navigation/pagination-demo": {
    "component": "@/components/docs/navigation/pagination-demo",
    "raw": "'use client'\n\nimport { Pagination } from '@/components/ui'\n\nexport default function PaginationDemo() {\n    return (\n        <Pagination>\n            <Pagination.Content>\n                <Pagination.Item>\n                    <Pagination.First href='#' />\n                </Pagination.Item>\n                <Pagination.Item>\n                    <Pagination.Previous href='#' />\n                </Pagination.Item>\n                <Pagination.Item>\n                    <Pagination.Link href='#'>1</Pagination.Link>\n                </Pagination.Item>\n                <Pagination.Item>\n                    <Pagination.Link href='#' isActive>\n                        2\n                    </Pagination.Link>\n                </Pagination.Item>\n                <Pagination.Item>\n                    <Pagination.Ellipsis />\n                </Pagination.Item>\n                <Pagination.Item>\n                    <Pagination.Next href='#' />\n                </Pagination.Item>\n                <Pagination.Item>\n                    <Pagination.Last href='#' />\n                </Pagination.Item>\n            </Pagination.Content>\n        </Pagination>\n    )\n}\n",
    "type": "docs"
  },
  "navigation/breadcrumbs-demo": {
    "component": "@/components/docs/navigation/breadcrumbs-demo",
    "raw": "'use client'\n\nimport { Breadcrumb, Breadcrumbs } from '@/components/ui'\n\nexport default function BreadcrumbsDemo() {\n    return (\n        <Breadcrumbs onAction={() => {}}>\n            <Breadcrumb href='/'>Home</Breadcrumb>\n            <Breadcrumb href='/docs'>Docs</Breadcrumb>\n            <Breadcrumb href='/docs/components'>Components</Breadcrumb>\n            <Breadcrumb href='/docs/components/navigation'>Navigations</Breadcrumb>\n            <Breadcrumb>Breadcrumbs</Breadcrumb>\n        </Breadcrumbs>\n    )\n}\n",
    "type": "docs"
  },
  "navigation/simple-pagination-demo": {
    "component": "@/components/docs/navigation/simple-pagination-demo",
    "raw": "'use client'\n\nimport { Pagination } from '@/components/ui'\n\nexport default function SimplePaginationDemo() {\n    return (\n        <Pagination>\n            <Pagination.Content>\n                <Pagination.Item>\n                    <Pagination.First href='#' />\n                </Pagination.Item>\n                <Pagination.Item>\n                    <Pagination.Previous href='#' />\n                </Pagination.Item>\n                <Pagination.Item>\n                    <Pagination.Content>\n                        <Pagination.Item>\n                            <Pagination.Label className='font-semibold'>\n                                1\n                            </Pagination.Label>\n                        </Pagination.Item>\n                        <Pagination.Item>\n                            <Pagination.Separator />\n                        </Pagination.Item>\n                        <Pagination.Item>\n                            <Pagination.Label className='text-muted-foreground'>\n                                10\n                            </Pagination.Label>\n                        </Pagination.Item>\n                    </Pagination.Content>\n                </Pagination.Item>\n                <Pagination.Item>\n                    <Pagination.Next href='#' />\n                </Pagination.Item>\n                <Pagination.Item>\n                    <Pagination.Last href='#' />\n                </Pagination.Item>\n            </Pagination.Content>\n        </Pagination>\n    )\n}\n",
    "type": "docs"
  },
  "navigation/link-demo": {
    "component": "@/components/docs/navigation/link-demo",
    "raw": "'use client'\n\nimport { Link } from '@/components/ui'\n\nexport default function LinkDemo() {\n    return <Link href='/'>Go Home</Link>\n}\n",
    "type": "docs"
  },
  "navigation/tabs-demo": {
    "component": "@/components/docs/navigation/tabs-demo",
    "raw": "'use client'\n\nimport { Tabs } from '@/components/ui'\n\nexport default function TabsDemo() {\n    return (\n        <Tabs aria-label='Packages'>\n            <Tabs.List>\n                <Tabs.Label id='t1'>First Tab</Tabs.Label>\n                <Tabs.Label id='t2'>Second Tab</Tabs.Label>\n                <Tabs.Label id='t3'>Third Tab</Tabs.Label>\n            </Tabs.List>\n            <Tabs.Content id='t1'>\n                Lorem ipsum dolor sit amet consectetur adipisicing elit.\n            </Tabs.Content>\n            <Tabs.Content id='t2'>\n                Consectetur adipisicing elit. Quibusdam, suscipit.\n            </Tabs.Content>\n            <Tabs.Content id='t3'>\n                Amet fuga reprehenderit earum adipisci maiores voluptas.\n            </Tabs.Content>\n        </Tabs>\n    )\n}\n",
    "type": "docs"
  },
  "navigation/tabs-orientation-demo": {
    "component": "@/components/docs/navigation/tabs-orientation-demo",
    "raw": "'use client'\n\nimport { Tabs } from '@/components/ui'\n\nexport default function TabsOrientationDemo() {\n    return (\n        <Tabs orientation='vertical' aria-label='Packages'>\n            <Tabs.List>\n                <Tabs.Label id='t1'>First Tab</Tabs.Label>\n                <Tabs.Label id='t2'>Second Tab</Tabs.Label>\n                <Tabs.Label id='t3'>Third Tab</Tabs.Label>\n            </Tabs.List>\n            <Tabs.Content id='t1'>\n                Lorem ipsum dolor sit amet consectetur adipisicing elit.\n            </Tabs.Content>\n            <Tabs.Content id='t2'>\n                Consectetur adipisicing elit. Quibusdam, suscipit.\n            </Tabs.Content>\n            <Tabs.Content id='t3'>\n                Amet fuga reprehenderit earum adipisci maiores voluptas.\n            </Tabs.Content>\n        </Tabs>\n    )\n}\n",
    "type": "docs"
  },
  "navigation/pagination-dynamic-demo": {
    "component": "@/components/docs/navigation/pagination-dynamic-demo",
    "raw": "'use client'\n\nimport { Pagination } from '@/components/ui'\nimport { Collection } from 'react-aria-components'\n\nconst pages = Array.from({ length: 6 }, (_, i) => ({ value: i + 1 }))\nexport default function PaginationDynamicDemo() {\n    return (\n        <Pagination>\n            <Pagination.Content>\n                <Pagination.Item>\n                    <Pagination.First href='#' />\n                </Pagination.Item>\n                <Pagination.Item>\n                    <Pagination.Previous href='#' />\n                </Pagination.Item>\n                <Pagination.Item className='lg:hidden'>\n                    <Pagination.Content className='rounded-lg border'>\n                        <Pagination.Label className='font-semibold'>1</Pagination.Label>\n                        <Pagination.Separator />\n                        <Pagination.Label className='text-muted-foreground'>\n                            6\n                        </Pagination.Label>\n                    </Pagination.Content>\n                </Pagination.Item>\n                <Pagination.Item className='hidden lg:inline'>\n                    <Pagination.Content>\n                        <Collection items={pages}>\n                            {(item) => (\n                                <Pagination.Item id={item.value.toString()}>\n                                    <Pagination.Link isActive={item.value === 4} href='#'>\n                                        {item.value}\n                                    </Pagination.Link>\n                                </Pagination.Item>\n                            )}\n                        </Collection>\n                    </Pagination.Content>\n                </Pagination.Item>\n                <Pagination.Item>\n                    <Pagination.Next href='#' />\n                </Pagination.Item>\n                <Pagination.Item>\n                    <Pagination.Last href='#' />\n                </Pagination.Item>\n            </Pagination.Content>\n        </Pagination>\n    )\n}\n",
    "type": "docs"
  },
  "statuses/badge-shape-demo": {
    "component": "@/components/docs/statuses/badge-shape-demo",
    "raw": "'use client'\n\nimport { Badge } from '@/components/ui'\n\nexport default function BadgeShapeDemo() {\n    return (\n        <div className='flex gap-2'>\n            <Badge shape='square'>Square</Badge>\n            <Badge shape='circle'>Circle</Badge>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "statuses/badge-demo": {
    "component": "@/components/docs/statuses/badge-demo",
    "raw": "'use client'\n\nimport { Badge, badgeVariants } from '@/components/ui'\n\ntype Variant = keyof typeof badgeVariants.variants.variant\n\nexport default function BadgeDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap'>\n            {Object.keys(badgeVariants.variants.variant).map((variant) => (\n                <div key={variant}>\n                    <Badge variant={variant as Variant}>{variant}</Badge>\n                </div>\n            ))}\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "statuses/progress-bar-demo": {
    "component": "@/components/docs/statuses/progress-bar-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Progress } from '@/components/ui'\n\nexport default function ProgressDemo() {\n    const [value, setValue] = React.useState(1)\n\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            setValue((prev) => (prev < 100 ? prev + 1 : 100))\n        }, 50)\n\n        return () => clearInterval(interval)\n    }, [])\n\n    return <Progress label='Loading…' value={60} />\n}\n",
    "type": "docs"
  },
  "statuses/toaster-action-demo": {
    "component": "@/components/docs/statuses/toaster-action-demo",
    "raw": "import { Button } from '@/components/ui'\nimport { toast } from 'sonner'\n\nexport default function ToasterActionDemo() {\n    return (\n        <div className='flex gap-3'>\n            <Button\n                variant='outline'\n                size='sm'\n                onPress={() =>\n                    toast('New comment on your post!', {\n                        action: {\n                            label: 'View',\n                            onClick: () => alert('Viewed')\n                        }\n                    })\n                }\n            >\n                Action\n            </Button>\n            <Button\n                variant='outline'\n                size='sm'\n                onPress={() =>\n                    toast('New comment on your post!', {\n                        cancel: {\n                            label: 'Cancel',\n                            onClick: () => alert('Cancelled')\n                        }\n                    })\n                }\n            >\n                Cancel\n            </Button>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "statuses/note-demo": {
    "component": "@/components/docs/statuses/note-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { OptionPreview } from '@/components/docs/outside/option-preview'\nimport { Note, Select } from '@/components/ui'\n\nconst notes = [\n    'info',\n    'primary',\n    'secondary',\n    'warning',\n    'danger',\n    'success',\n    'outline'\n].map((n) => ({\n    name: n\n}))\nexport default function NoteDemo() {\n    const [selected, setSelected] = React.useState<any>('secondary')\n    return (\n        <>\n            <OptionPreview>\n                <Select\n                    aria-labelledby='Variant'\n                    className='[&_button]:h-9'\n                    selectedKey={selected}\n                    onSelectionChange={setSelected}\n                    placeholder='Choose an variant'\n                    items={notes}\n                >\n                    {(item) => (\n                        <Select.Item id={item.name} textValue={item.name}>\n                            {item.name}\n                        </Select.Item>\n                    )}\n                </Select>\n            </OptionPreview>\n            <Note variant={selected as any}>\n                <Note.Title>Note Title</Note.Title>\n                <Note.Description>Note Description</Note.Description>\n            </Note>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "statuses/indeterminate-progress-bar-demo": {
    "component": "@/components/docs/statuses/indeterminate-progress-bar-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Progress } from '@/components/ui'\n\nexport default function ProgressDemo() {\n    const [value, setValue] = React.useState(1)\n\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            setValue((prev) => (prev < 100 ? prev + 1 : 100))\n        }, 50)\n\n        return () => clearInterval(interval)\n    }, [])\n\n    return <Progress label='Loading…' isIndeterminate value={60} />\n}\n",
    "type": "docs"
  },
  "statuses/meter-demo": {
    "component": "@/components/docs/statuses/meter-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Meter } from '@/components/ui'\n\nexport default function MeterDemo() {\n    const [value, setValue] = React.useState(1)\n\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            setValue((prev) => (prev < 100 ? prev + 1 : 100))\n        }, 50)\n\n        return () => clearInterval(interval)\n    }, [])\n    return <Meter label='Storage space' value={value} />\n}\n",
    "type": "docs"
  },
  "statuses/toaster-status-demo": {
    "component": "@/components/docs/statuses/toaster-status-demo",
    "raw": "import { Button } from '@/components/ui'\nimport { toast } from 'sonner'\n\nexport default function ToasterStatusDemo() {\n    return (\n        <div className='grid grid-cols-2 gap-3'>\n            <Button\n                variant='danger'\n                size='sm'\n                onPress={() => toast.error('The registration failed')}\n            >\n                Error\n            </Button>\n            <Button\n                variant='success'\n                size='sm'\n                onPress={() => toast.success('The registration was successful.')}\n            >\n                Success\n            </Button>\n            <Button\n                variant='warning'\n                size='sm'\n                onPress={() => toast.warning('There was an issue during registration')}\n            >\n                Warning\n            </Button>\n            <Button\n                variant='info'\n                size='sm'\n                onPress={() =>\n                    toast.info('Here is some information about your registration.')\n                }\n            >\n                Info\n            </Button>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "statuses/toaster-demo": {
    "component": "@/components/docs/statuses/toaster-demo",
    "raw": "import { Button } from '@/components/ui'\nimport { toast } from 'sonner'\n\nexport default function ToasterDemo() {\n    return <Button onPress={() => toast('You have been toasted')}>Toast</Button>\n}\n",
    "type": "docs"
  },
  "statuses/table-of-badges": {
    "component": "@/components/docs/statuses/table-of-badges",
    "raw": "'use client'\n\nimport { Badge, badgeVariants, Table } from '@/components/ui'\n\nexport default function TableOfBadges() {\n    const colors = Object.keys(badgeVariants).map((i) => {\n        return {\n            color: i\n        }\n    })\n    return (\n        <div className='not-prose rounded-xl border'>\n            <Table aria-label='Available Badge Colors'>\n                <Table.Header>\n                    <Table.Column id='props'>Props</Table.Column>\n                    <Table.Column id='name'>Name</Table.Column>\n                    <Table.Column />\n                </Table.Header>\n                <Table.Body items={colors}>\n                    {(item) => (\n                        <Table.Row id={item.color}>\n                            <Table.Cell>\n                                <code>color</code>\n                            </Table.Cell>\n                            <Table.Cell>\n                                <code>{item.color}</code>\n                            </Table.Cell>\n                            <Table.Cell>\n                                <Badge variant={item.color as any}>Label</Badge>\n                            </Table.Cell>\n                        </Table.Row>\n                    )}\n                </Table.Body>\n            </Table>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "statuses/toaster-positions-demo": {
    "component": "@/components/docs/statuses/toaster-positions-demo",
    "raw": "import { Button } from '@/components/ui'\nimport { toast, type ToastT } from 'sonner'\n\nconst positions: ToastT['position'][] = [\n    'top-left',\n    'top-center',\n    'top-right',\n    'bottom-left',\n    'bottom-center',\n    'bottom-right'\n]\n\nexport default function ToasterPositionsDemo() {\n    return (\n        <div className='grid grid-cols-2 gap-4 sm:grid-cols-3'>\n            {positions.map((position) => (\n                <Button\n                    variant='outline'\n                    size='sm'\n                    key={position}\n                    onPress={() =>\n                        toast('The registration is successful, click here to continue.', {\n                            position\n                        })\n                    }\n                >\n                    {position}\n                </Button>\n            ))}\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "forms/slider-step-demo": {
    "component": "@/components/docs/forms/slider-step-demo",
    "raw": "'use client'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderStepDemo() {\n    return <Slider step={10} description='Step in 10' label='Order amount' />\n}\n",
    "type": "docs"
  },
  "forms/form-demo": {
    "component": "@/components/docs/forms/form-demo",
    "raw": "'use client'\n\nimport { Button, Form, Heading, TextField } from '@/components/ui'\n\nexport default function FormDemo() {\n    return (\n        <div className='mx-auto max-w-md py-10'>\n            <Heading level={2} className='mb-4'>\n                Register\n            </Heading>\n            <Form onSubmit={() => {}} className='space-y-4'>\n                <TextField isRequired label='Name' placeholder='Enter your name' />\n                <TextField isRequired label='Email' placeholder='Enter your email' />\n                <div className='grid grid-cols-2 gap-4'>\n                    <TextField\n                        isRequired\n                        label='Password'\n                        placeholder='Enter your password'\n                        type='password'\n                    />\n                    <TextField\n                        isRequired\n                        label='Confirm Password'\n                        placeholder='Enter your password again'\n                        type='password'\n                    />\n                </div>\n                <Button type='submit'>Submit</Button>\n            </Form>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "forms/textarea-disabled-demo": {
    "component": "@/components/docs/forms/textarea-disabled-demo",
    "raw": "'use client'\n\nimport { Textarea } from '@/components/ui'\n\nexport default function TextareaDisabledDemo() {\n    return <Textarea isDisabled label=\"Don't fill this Textarea\" />\n}\n",
    "type": "docs"
  },
  "forms/input-otp-controlled-demo": {
    "component": "@/components/docs/forms/input-otp-controlled-demo",
    "raw": "import React from 'react'\n\nimport { InputOTP } from '@/components/ui'\n\nexport default function InputOtpControlledDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <div className='space-y-2'>\n            <InputOTP maxLength={6} value={value} onChange={setValue}>\n                <InputOTP.Group>\n                    {[...Array(6)].map((_, index) => (\n                        <InputOTP.Slot key={index} index={index} />\n                    ))}\n                </InputOTP.Group>\n            </InputOTP>\n\n            <div className='text-center text-sm'>\n                {value === '' ? <>PIN</> : <>YOUR PIN: {value}</>}\n            </div>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "forms/text-field-loading-demo": {
    "component": "@/components/docs/forms/text-field-loading-demo",
    "raw": "'use client'\n\nimport { TextField } from '@/components/ui'\n\nexport default function TextFieldLoadingDemo() {\n    return <TextField isLoading indicatorPlace='suffix' label='Checking your name' />\n}\n",
    "type": "docs"
  },
  "forms/search-field-with-label-demo": {
    "component": "@/components/docs/forms/search-field-with-label-demo",
    "raw": "'use client'\n\nimport { SearchField } from '@/components/ui'\n\nexport default function SearchFieldWithLabelDemo() {\n    return <SearchField label='Search' />\n}\n",
    "type": "docs"
  },
  "forms/switch-disabled-demo": {
    "component": "@/components/docs/forms/switch-disabled-demo",
    "raw": "'use client'\n\nimport { Switch } from '@/components/ui'\n\nexport default function SwitchDemo() {\n    return <Switch isDisabled>Don't turn the light on</Switch>\n}\n",
    "type": "docs"
  },
  "forms/radio-group-disabled-demo": {
    "component": "@/components/docs/forms/radio-group-disabled-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupDisabledDemo() {\n    return (\n        <RadioGroup isDisabled label='Features'>\n            <Radio value='fs'>Font size: Small, Medium, Large</Radio>\n            <Radio value='dr'>Display resolution: 1080p, 1440p, 4K</Radio>\n            <Radio value='ss'>Sound settings: Mute, Low, Medium, High</Radio>\n            <Radio value='bi'>Background image: Default, Custom</Radio>\n            <Radio value='ks'>Keyboard shortcuts: Enabled, Disabled</Radio>\n        </RadioGroup>\n    )\n}\n",
    "type": "docs"
  },
  "forms/textarea-validation-demo": {
    "component": "@/components/docs/forms/textarea-validation-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Form, Textarea } from '@/components/ui'\n\nexport default function TextareaControlledDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <Textarea\n                value={value}\n                onChange={setValue}\n                label='Address'\n                isRequired\n                className='mb-2'\n            />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n",
    "type": "docs"
  },
  "forms/slider-controlled-demo": {
    "component": "@/components/docs/forms/slider-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, Slider } from '@/components/ui'\n\nexport default function SearchFieldControlledDemo() {\n    const [temperature, setTemperature] = React.useState<number>(31)\n    const [saturation, setSaturation] = React.useState<number[]>([21, 86])\n    return (\n        <div className='space-y-6'>\n            <div>\n                <Slider\n                    value={temperature}\n                    onChange={(v) => setTemperature(v as number)}\n                    label='Temperature'\n                />\n                <Description className='mt-2 block [&>strong]:text-foreground'>\n                    Current temperature: <strong>{temperature ?? '-'}</strong>\n                </Description>\n            </div>\n            <div>\n                <Slider\n                    value={saturation}\n                    onChange={(v) => setSaturation(v as number[])}\n                    label='Saturation'\n                />\n                <Description className='mt-2 block [&>strong]:text-foreground'>\n                    Current saturation: <strong>{saturation ?? '-'}</strong>\n                </Description>\n            </div>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "forms/checkbox-group-demo": {
    "component": "@/components/docs/forms/checkbox-group-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Checkbox, CheckboxGroup } from '@/components/ui'\n\nexport default function CheckboxGroupDemo() {\n    return (\n        <CheckboxGroup label='Settings'>\n            <React.Fragment key='.0'>\n                <Checkbox value='notifications'>Enable notifications</Checkbox>\n                <Checkbox value='auto_update'>Auto-update applications</Checkbox>\n                <Checkbox value='dark_mode'>Enable dark mode</Checkbox>\n                <Checkbox value='location_access'>Allow location access</Checkbox>\n                <Checkbox value='two_factor_auth'>\n                    Enable two-factor authentication\n                </Checkbox>\n            </React.Fragment>\n        </CheckboxGroup>\n    )\n}\n",
    "type": "docs"
  },
  "forms/checkbox-demo": {
    "component": "@/components/docs/forms/checkbox-demo",
    "raw": "'use client'\n\nimport { Checkbox } from '@/components/ui'\n\nexport default function CheckboxDemo() {\n    return <Checkbox>I Agree with the terms and conditions</Checkbox>\n}\n",
    "type": "docs"
  },
  "forms/search-field-validation-demo": {
    "component": "@/components/docs/forms/search-field-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, SearchField } from '@/components/ui'\n\nexport default function SearchFieldValidationDemo() {\n    return (\n        <Form>\n            <SearchField isRequired label='Name' className='mb-2' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n",
    "type": "docs"
  },
  "forms/radio-group-demo": {
    "component": "@/components/docs/forms/radio-group-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupDemo() {\n    return (\n        <RadioGroup label='Features'>\n            <Radio value='fs'>Font size: Small, Medium, Large</Radio>\n            <Radio value='dr'>Display resolution: 1080p, 1440p, 4K</Radio>\n            <Radio value='ss'>Sound settings: Mute, Low, Medium, High</Radio>\n            <Radio value='bi'>Background image: Default, Custom</Radio>\n            <Radio value='ks'>Keyboard shortcuts: Enabled, Disabled</Radio>\n        </RadioGroup>\n    )\n}\n",
    "type": "docs"
  },
  "forms/radio-group-controlled-demo": {
    "component": "@/components/docs/forms/radio-group-controlled-demo",
    "raw": "import React from 'react'\n\nimport { Description, Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupControlledDemo() {\n    const [selected, setSelected] = React.useState('')\n    return (\n        <>\n            <RadioGroup label='Features' value={selected} onChange={setSelected}>\n                <Radio value='theme'>Theme</Radio>\n                <Radio value='language'>Language</Radio>\n                <Radio value='timezone'>Timezone</Radio>\n                <Radio value='notifications'>Notifications</Radio>\n                <Radio value='privacy'>Privacy</Radio>\n            </RadioGroup>\n            <Description className='mt-2 block [&>strong]:text-foreground'>\n                You have selected: <strong>{selected ?? '-'}</strong>\n            </Description>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "forms/slider-demo": {
    "component": "@/components/docs/forms/slider-demo",
    "raw": "import { Slider } from '@/components/ui'\n\nexport default function SliderDemo() {\n    return <Slider label='Volume' />\n}\n",
    "type": "docs"
  },
  "forms/number-field-disabled-demo": {
    "component": "@/components/docs/forms/number-field-disabled-demo",
    "raw": "'use client'\n\nimport { NumberField } from '@/components/ui'\n\nexport default function NumberFieldDisabledDemo() {\n    return <NumberField isDisabled label='Value' />\n}\n",
    "type": "docs"
  },
  "forms/number-field-demo": {
    "component": "@/components/docs/forms/number-field-demo",
    "raw": "'use client'\n\nimport { NumberField } from '@/components/ui'\n\nexport default function NumberFieldDemo() {\n    return <NumberField label='Quantity' />\n}\n",
    "type": "docs"
  },
  "forms/form-validation-demo": {
    "component": "@/components/docs/forms/form-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, TextField } from '@/components/ui'\n\nexport default function FormValidationDemo() {\n    return (\n        <Form onSubmit={() => {}}>\n            <TextField label='Name' isRequired className='mb-2' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n",
    "type": "docs"
  },
  "forms/text-field-validation-demo": {
    "component": "@/components/docs/forms/text-field-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, TextField } from '@/components/ui'\n\nexport default function TextFieldValidationDemo() {\n    return (\n        <Form>\n            <TextField isRequired label='Name' className='mb-2' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n",
    "type": "docs"
  },
  "forms/textarea-controlled-demo": {
    "component": "@/components/docs/forms/textarea-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Textarea } from '@/components/ui'\n\nexport default function TextareaControlledDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <>\n            <Textarea\n                value={value}\n                onChange={setValue}\n                label='Address'\n                className='mb-2'\n            />\n            <p className='mt-2'>You have typed: {value ?? '-'}</p>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "forms/search-field-disabled-demo": {
    "component": "@/components/docs/forms/search-field-disabled-demo",
    "raw": "'use client'\n\nimport { SearchField } from '@/components/ui'\n\nexport default function SearchFieldDisabledDemo() {\n    return <SearchField isDisabled />\n}\n",
    "type": "docs"
  },
  "forms/slider-disabled-demo": {
    "component": "@/components/docs/forms/slider-disabled-demo",
    "raw": "'use client'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderDisabledDemo() {\n    return <Slider isDisabled label=\"Don't raise the volume\" />\n}\n",
    "type": "docs"
  },
  "forms/input-otp-demo": {
    "component": "@/components/docs/forms/input-otp-demo",
    "raw": "import { InputOTP } from '@/components/ui'\n\nexport default function InputOtpDemo() {\n    return (\n        <div>\n            <InputOTP maxLength={6}>\n                <InputOTP.Group>\n                    {[...Array(6)].map((_, index) => (\n                        <InputOTP.Slot key={index} index={index} />\n                    ))}\n                </InputOTP.Group>\n            </InputOTP>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "forms/input-otp-separator-demo": {
    "component": "@/components/docs/forms/input-otp-separator-demo",
    "raw": "import { InputOTP } from '@/components/ui'\n\nexport default function InputOtpSeparatorDemo() {\n    return (\n        <InputOTP maxLength={6}>\n            <InputOTP.Group>\n                <InputOTP.Slot index={0} />\n                <InputOTP.Slot index={1} />\n                <InputOTP.Slot index={2} />\n            </InputOTP.Group>\n            <InputOTP.Separator />\n            <InputOTP.Group>\n                <InputOTP.Slot index={3} />\n                <InputOTP.Slot index={4} />\n                <InputOTP.Slot index={5} />\n            </InputOTP.Group>\n        </InputOTP>\n    )\n}\n",
    "type": "docs"
  },
  "forms/radio-group-invalid-demo": {
    "component": "@/components/docs/forms/radio-group-invalid-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupInvalidDemo() {\n    return (\n        <RadioGroup isInvalid label='Features'>\n            <Radio value='fs'>Font size: Small, Medium, Large</Radio>\n            <Radio value='dr'>Display resolution: 1080p, 1440p, 4K</Radio>\n            <Radio value='ss'>Sound settings: Mute, Low, Medium, High</Radio>\n            <Radio value='bi'>Background image: Default, Custom</Radio>\n            <Radio value='ks'>Keyboard shortcuts: Enabled, Disabled</Radio>\n        </RadioGroup>\n    )\n}\n",
    "type": "docs"
  },
  "forms/text-field-demo": {
    "component": "@/components/docs/forms/text-field-demo",
    "raw": "'use client'\n\nimport { TextField } from '@/components/ui'\n\nexport default function TextFieldDemo() {\n    return <TextField label='Name' />\n}\n",
    "type": "docs"
  },
  "forms/switch-demo": {
    "component": "@/components/docs/forms/switch-demo",
    "raw": "'use client'\n\nimport { Switch } from '@/components/ui'\nimport { useTheme } from 'next-themes'\n\nexport default function SwitchDemo() {\n    const { resolvedTheme, setTheme } = useTheme()\n    return (\n        <Switch onChange={() => setTheme(resolvedTheme === 'light' ? 'dark' : 'light')}>\n            Turn on the light\n        </Switch>\n    )\n}\n",
    "type": "docs"
  },
  "forms/checkbox-invalid-demo": {
    "component": "@/components/docs/forms/checkbox-invalid-demo",
    "raw": "'use client'\n\nimport { Checkbox } from '@/components/ui'\n\nexport default function CheckboxInvalidDemo() {\n    return <Checkbox isInvalid>There is something wrong</Checkbox>\n}\n",
    "type": "docs"
  },
  "forms/number-field-invalid-demo": {
    "component": "@/components/docs/forms/number-field-invalid-demo",
    "raw": "'use client'\n\nimport { NumberField } from '@/components/ui'\n\nexport default function NumberFieldInvalidDemo() {\n    return <NumberField isInvalid label=\"You can't count on me\" />\n}\n",
    "type": "docs"
  },
  "forms/text-field-disabled-demo": {
    "component": "@/components/docs/forms/text-field-disabled-demo",
    "raw": "'use client'\n\nimport { TextField } from '@/components/ui'\n\nexport default function TextFieldDisabledDemo() {\n    return <TextField isDisabled label='Name' />\n}\n",
    "type": "docs"
  },
  "forms/text-field-prefix-suffix-demo": {
    "component": "@/components/docs/forms/text-field-prefix-suffix-demo",
    "raw": "'use client'\n\nimport { XLogo } from '@/components/logo'\nimport { TextField } from '@/components/ui'\n\nexport default function TextFieldDemo() {\n    return (\n        <div className='flex flex-col gap-4'>\n            <TextField label='Twitter' suffix={<XLogo className='h-4 w-4' />} />\n            <TextField label='Sites' prefix='https://' suffix='.com' />\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "forms/text-field-controlled-demo": {
    "component": "@/components/docs/forms/text-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, TextField } from '@/components/ui'\n\nexport default function TextFieldControlledDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <>\n            <TextField value={value} onChange={setValue} label='Name' className='mb-2' />\n            <Description className='mt-2 block [&>strong]:text-foreground'>\n                You have typed: <strong>{value ?? '-'}</strong>\n            </Description>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "forms/search-field-demo": {
    "component": "@/components/docs/forms/search-field-demo",
    "raw": "import { SearchField } from '@/components/ui'\n\nexport default function SearchFieldDemo() {\n    return <SearchField aria-label='Search' placeholder='Search' />\n}\n",
    "type": "docs"
  },
  "forms/textarea-demo": {
    "component": "@/components/docs/forms/textarea-demo",
    "raw": "'use client'\n\nimport { Textarea } from '@/components/ui'\n\nexport default function TextareaDemo() {\n    return <Textarea label='Address' />\n}\n",
    "type": "docs"
  },
  "forms/checkbox-disabled-demo": {
    "component": "@/components/docs/forms/checkbox-disabled-demo",
    "raw": "'use client'\n\nimport { Checkbox } from '@/components/ui'\n\nexport default function CheckboxDisabledDemo() {\n    return <Checkbox isDisabled>You can't select me</Checkbox>\n}\n",
    "type": "docs"
  },
  "forms/checkbox-controlled-demo": {
    "component": "@/components/docs/forms/checkbox-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Checkbox, Description } from '@/components/ui'\n\nexport default function CheckboxControlledDemo() {\n    const [selected, setSelection] = React.useState(false)\n    return (\n        <>\n            <Checkbox isSelected={selected} onChange={setSelection} value='updates'>\n                Receive Updates\n            </Checkbox>\n            <Description className='mt-2 block [&>strong]:text-foreground'>\n                You have <strong>{selected ? 'enabled' : 'disabled'}</strong> the option.\n            </Description>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "forms/slider-range-demo": {
    "component": "@/components/docs/forms/slider-range-demo",
    "raw": "'use client'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderRangeDemo() {\n    return <Slider defaultValue={[25, 75]} label='Your budget' />\n}\n",
    "type": "docs"
  },
  "forms/search-field-controlled-demo": {
    "component": "@/components/docs/forms/search-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, SearchField } from '@/components/ui'\n\nexport default function SearchFieldControlledDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <>\n            <SearchField value={value} onChange={setValue} className='mb-2' />\n            <Description className='mt-2 block [&>strong]:text-foreground'>\n                You have typed: <strong>{value ?? '-'}</strong>\n            </Description>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "forms/switch-controlled-demo": {
    "component": "@/components/docs/forms/switch-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, Switch } from '@/components/ui'\n\nexport default function SwitchControlledDemo() {\n    const [darkMode, setDarkMode] = React.useState(false)\n    return (\n        <>\n            <Switch isSelected={darkMode} onChange={setDarkMode} value='dark_mode'>\n                Enable Dark Mode\n            </Switch>\n\n            <Description className='mt-2 block [&>strong]:text-foreground'>\n                Dark Mode is <strong>{darkMode ? 'enabled' : 'disabled'}</strong>\n            </Description>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "forms/switch-variant-demo": {
    "component": "@/components/docs/forms/switch-variant-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { OptionPreview } from '@/components/docs/outside/option-preview'\nimport { Select, Switch } from '@/components/ui'\n\nconst items = ['primary', 'secondary', 'success', 'danger', 'warning', 'info'].map(\n    (item) => ({\n        value: item,\n        label: item\n    })\n)\nexport default function SwitchVariantDemo() {\n    const [variant, setVariant] = React.useState('primary')\n\n    return (\n        <>\n            <OptionPreview>\n                <Select\n                    aria-labelledby='Variant'\n                    items={items}\n                    selectedKey={variant}\n                    onSelectionChange={(v) => setVariant(v as any)}\n                >\n                    {(item) => (\n                        <Select.Item id={item.value} textValue={item.value}>\n                            {item.label}\n                        </Select.Item>\n                    )}\n                </Select>\n            </OptionPreview>\n            <Switch defaultSelected variant={variant as any}>\n                Label\n            </Switch>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-picker-disabled-demo": {
    "component": "@/components/docs/colors/color-picker-disabled-demo",
    "raw": "import React from 'react'\n\nimport { ColorPicker } from '@/components/ui'\nimport { parseColor } from '@react-stately/color'\n\nexport default function ColorPickerDemo() {\n    const [color, setColor] = React.useState(parseColor('hsl(216, 98%, 52%)'))\n    return (\n        <ColorPicker isDisabled label='Color Picker' value={color} onChange={setColor} />\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-swatch-demo": {
    "component": "@/components/docs/colors/color-swatch-demo",
    "raw": "import { ColorSwatch } from '@/components/ui'\n\nexport default function ColorSwatchDemo() {\n    return <ColorSwatch aria-label='Current color' color='#0d6efd' />\n}\n",
    "type": "docs"
  },
  "colors/color-area-controlled-demo": {
    "component": "@/components/docs/colors/color-area-controlled-demo",
    "raw": "import React from 'react'\n\nimport { ColorArea, ColorThumb, Description } from '@/components/ui'\nimport { parseColor } from '@react-stately/color'\n\nexport default function ColorAreaControlledDemo() {\n    const [value, setValue] = React.useState(parseColor('hsl(0, 100%, 50%)'))\n\n    return (\n        <>\n            <ColorArea value={value} onChange={setValue}>\n                <ColorThumb />\n            </ColorArea>\n            <Description className='block mt-2'>\n                Current color value:{' '}\n                <strong style={{ color: value.toString('hex') }}>\n                    {value.toString('hex')}\n                </strong>\n            </Description>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-swatch-controlled-demo": {
    "component": "@/components/docs/colors/color-swatch-controlled-demo",
    "raw": "import * as React from 'react'\n\nimport { ColorSwatchPicker, ColorSwatchPickerItem, Description } from '@/components/ui'\nimport { parseColor } from '@react-stately/color'\n\nexport default function ColorSwatchPickerDemo() {\n    const [value, setValue] = React.useState(parseColor('#0d6efd'))\n    return (\n        <div>\n            <ColorSwatchPicker\n                value={value}\n                onChange={setValue}\n                className='grid grid-cols-3 lg:grid-cols-6 gap-2'\n            >\n                <ColorSwatchPickerItem color='#f59e0b' />\n                <ColorSwatchPickerItem color='#84cc16' />\n                <ColorSwatchPickerItem color='#0d6efd' />\n                <ColorSwatchPickerItem color='#ec4899' />\n                <ColorSwatchPickerItem color='#f43f5e' />\n            </ColorSwatchPicker>\n            <Description className='block mt-2'>\n                Current color value:{' '}\n                <strong style={{ color: value.toString('hex') }}>\n                    {value.toString('hex')}\n                </strong>\n            </Description>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-picker-combination-demo": {
    "component": "@/components/docs/colors/color-picker-combination-demo",
    "raw": "import React from 'react'\n\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerEnableSelectionFormatDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    return (\n        <ColorPicker\n            enableColorFormatSelection\n            enableColorSwatch\n            value={color}\n            onChange={setColor}\n        />\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-picker-controlled-demo": {
    "component": "@/components/docs/colors/color-picker-controlled-demo",
    "raw": "import React from 'react'\n\nimport { ColorPicker, defaultColor } from '@/components/ui'\nimport { type Color } from 'react-aria-components'\n\nexport default function ColorPickerControlledDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    const colorChangeHandler = (v: Color) => {\n        // ['hex','rgb','rgba','hsb','hsba','hsl','hsla']\n        // console.log(v.toString('hex'))\n        setColor(v)\n    }\n    return (\n        <ColorPicker\n            label='Pick Color'\n            value={color}\n            onChange={(v) => colorChangeHandler(v)}\n        />\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-field-controlled-demo": {
    "component": "@/components/docs/colors/color-field-controlled-demo",
    "raw": "import React from 'react'\n\nimport { ColorField } from '@/components/ui'\nimport { type Color, parseColor } from '@react-stately/color'\n\nexport default function ColorFieldControlledDemo() {\n    const [color, setColor] = React.useState(parseColor('#FAFAFA'))\n    const handleColorChange = (newColor: Color | null) => {\n        if (newColor) {\n            setColor(newColor)\n        }\n    }\n    return (\n        <ColorField\n            value={color}\n            onChange={handleColorChange}\n            label='Color'\n            placeholder='#FAFAFA'\n            description={`Current color value: ${color.toString('hex')}`}\n        />\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-field-disabled-demo": {
    "component": "@/components/docs/colors/color-field-disabled-demo",
    "raw": "import { ColorField } from '@/components/ui'\n\nexport default function ColorFieldDisabledDemo() {\n    return <ColorField isDisabled label='Color' placeholder='#FAFAFA' />\n}\n",
    "type": "docs"
  },
  "colors/color-picker-enable-swatch-demo": {
    "component": "@/components/docs/colors/color-picker-enable-swatch-demo",
    "raw": "import React from 'react'\n\nimport { ColorPicker, defaultColor } from '@/components/ui'\nimport { type Color } from 'react-aria-components'\n\nexport default function ColorPickerEnableSwatchDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    const colorChangeHandler = (v: Color) => {\n        // ['hex','rgb','rgba','hsb','hsba','hsl','hsla']\n        console.log(v.toString('hex'))\n        setColor(v)\n    }\n    return (\n        <ColorPicker\n            enableColorSwatch\n            value={color}\n            onChange={(v) => colorChangeHandler(v)}\n        />\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-area-channel-demo": {
    "component": "@/components/docs/colors/color-area-channel-demo",
    "raw": "import { ColorArea, ColorThumb } from '@/components/ui'\n\nexport default function ColorAreaChannelDemo() {\n    return (\n        <ColorArea xChannel='alpha' yChannel='blue'>\n            <ColorThumb />\n        </ColorArea>\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-slider-demo": {
    "component": "@/components/docs/colors/color-slider-demo",
    "raw": "import { ColorSlider } from '@/components/ui'\n\nexport default function ColorSliderDemo() {\n    return <ColorSlider channel='hue' defaultValue='hsl(0, 100%, 50%)' />\n}\n",
    "type": "docs"
  },
  "colors/color-field-with-prefix-demo": {
    "component": "@/components/docs/colors/color-field-with-prefix-demo",
    "raw": "import { ColorField } from '@/components/ui'\nimport { IconColors } from '@irsyadadl/paranoid'\n\nexport default function ColorFieldWithPrefixDemo() {\n    return <ColorField label='Color' prefix={<IconColors />} placeholder='#FAFAFA' />\n}\n",
    "type": "docs"
  },
  "colors/color-field-demo": {
    "component": "@/components/docs/colors/color-field-demo",
    "raw": "import { ColorField } from '@/components/ui'\n\nexport default function ColorFieldDemo() {\n    return <ColorField label='Color' placeholder='#FAFAFA' />\n}\n",
    "type": "docs"
  },
  "colors/color-field-with-suffix-demo": {
    "component": "@/components/docs/colors/color-field-with-suffix-demo",
    "raw": "import { ColorField } from '@/components/ui'\nimport { IconColors } from '@irsyadadl/paranoid'\n\nexport default function ColorFieldWithSuffixDemo() {\n    return <ColorField label='Color' suffix={<IconColors />} placeholder='#FAFAFA' />\n}\n",
    "type": "docs"
  },
  "colors/color-slider-with-label-demo": {
    "component": "@/components/docs/colors/color-slider-with-label-demo",
    "raw": "import { ColorSlider } from '@/components/ui'\n\nexport default function ColorSliderWithLabelDemo() {\n    return (\n        <ColorSlider\n            label='Color Customizer'\n            channel='hue'\n            defaultValue='hsl(0, 100%, 50%)'\n        />\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-area-disabled-demo": {
    "component": "@/components/docs/colors/color-area-disabled-demo",
    "raw": "import { ColorArea, ColorThumb as Thumb } from '@/components/ui'\n\nexport default function ColorAreaDisabledDemo() {\n    return (\n        <ColorArea isDisabled>\n            <Thumb />\n        </ColorArea>\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-slider-without-output-demo": {
    "component": "@/components/docs/colors/color-slider-without-output-demo",
    "raw": "import { ColorSlider } from '@/components/ui'\n\nexport default function ColorSliderWithoutOutputDemo() {\n    return (\n        <ColorSlider channel='hue' showOutput={false} defaultValue='hsl(0, 100%, 50%)' />\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-picker-with-description-demo": {
    "component": "@/components/docs/colors/color-picker-with-description-demo",
    "raw": "import React from 'react'\n\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerWithDescriptionDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    return (\n        <ColorPicker\n            label='Theme Color'\n            description='Snag a color for the app theme'\n            value={color}\n            onChange={setColor}\n        />\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-picker-custom-colors-demo": {
    "component": "@/components/docs/colors/color-picker-custom-colors-demo",
    "raw": "import React from 'react'\n\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerCustomColorsDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    return (\n        <ColorPicker\n            enableColorFormatSelection\n            enableColorSwatch\n            colors={[\n                '#eef8ff',\n                '#d8eeff',\n                '#b9e0ff',\n                '#89cfff',\n                '#52b4ff',\n                '#2a91ff',\n                '#0d6efd',\n                '#0c5ae9',\n                '#1149bc',\n                '#144194',\n                '#11295a'\n            ]}\n            value={color}\n            onChange={setColor}\n        />\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-picker-with-label-demo": {
    "component": "@/components/docs/colors/color-picker-with-label-demo",
    "raw": "import React from 'react'\n\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerWithLabelDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    return <ColorPicker label='Theme Color' value={color} onChange={setColor} />\n}\n",
    "type": "docs"
  },
  "colors/color-picker-demo": {
    "component": "@/components/docs/colors/color-picker-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ColorPicker } from '@/components/ui'\nimport { parseColor } from '@react-stately/color'\n\nexport default function ColorPickerDemo() {\n    const [color, setColor] = React.useState(parseColor('hsl(216, 98%, 52%)'))\n    return <ColorPicker label='Color Picker' value={color} onChange={setColor} />\n}\n",
    "type": "docs"
  },
  "colors/color-wheel-controlled-demo": {
    "component": "@/components/docs/colors/color-wheel-controlled-demo",
    "raw": "import React from 'react'\n\nimport { ColorThumb, ColorWheel, ColorWheelTrack } from '@/components/ui'\nimport { parseColor } from '@react-stately/color'\n\nexport default function ColorWheelControlledDemo() {\n    const [color, setColor] = React.useState(parseColor('hsl(0, 100%, 50%)'))\n    return (\n        <ColorWheel value={color} onChange={setColor} outerRadius={105} innerRadius={78}>\n            <ColorWheelTrack />\n            <ColorThumb />\n        </ColorWheel>\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-wheel-demo": {
    "component": "@/components/docs/colors/color-wheel-demo",
    "raw": "import { ColorThumb, ColorWheel, ColorWheelTrack } from '@/components/ui'\n\nexport default function ColorWheelDemo() {\n    return (\n        <ColorWheel outerRadius={105} innerRadius={78}>\n            <ColorWheelTrack />\n            <ColorThumb />\n        </ColorWheel>\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-swatch-picker-demo": {
    "component": "@/components/docs/colors/color-swatch-picker-demo",
    "raw": "import * as React from 'react'\n\nimport { ColorSwatchPicker, ColorSwatchPickerItem } from '@/components/ui'\nimport { parseColor } from '@react-stately/color'\n\nexport default function ColorSwatchPickerDemo() {\n    const [value, setValue] = React.useState(parseColor('#0d6efd'))\n    return (\n        <ColorSwatchPicker\n            value={value}\n            onChange={setValue}\n            className='grid grid-cols-3 lg:grid-cols-6 gap-2'\n        >\n            <ColorSwatchPickerItem color='#f59e0b' />\n            <ColorSwatchPickerItem color='#84cc16' />\n            <ColorSwatchPickerItem color='#0d6efd' />\n            <ColorSwatchPickerItem color='#ec4899' />\n            <ColorSwatchPickerItem color='#f43f5e' />\n        </ColorSwatchPicker>\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-wheel-disabled-demo": {
    "component": "@/components/docs/colors/color-wheel-disabled-demo",
    "raw": "import { ColorThumb, ColorWheel, ColorWheelTrack } from '@/components/ui'\n\nexport default function ColorWheelDisabledDemo() {\n    return (\n        <ColorWheel outerRadius={105} innerRadius={78}>\n            <ColorWheelTrack />\n            <ColorThumb />\n        </ColorWheel>\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-swatch-picker-item-disabled-demo": {
    "component": "@/components/docs/colors/color-swatch-picker-item-disabled-demo",
    "raw": "import * as React from 'react'\n\nimport { ColorSwatchPicker, ColorSwatchPickerItem } from '@/components/ui'\nimport { parseColor } from '@react-stately/color'\n\nexport default function ColorSwatchPickerDemo() {\n    const [value, setValue] = React.useState(parseColor('#0d6efd'))\n    return (\n        <ColorSwatchPicker\n            value={value}\n            onChange={setValue}\n            className='grid grid-cols-3 lg:grid-cols-6 gap-2'\n        >\n            <ColorSwatchPickerItem isDisabled color='#f59e0b' />\n            <ColorSwatchPickerItem color='#84cc16' />\n            <ColorSwatchPickerItem color='#0d6efd' />\n            <ColorSwatchPickerItem isDisabled color='#ec4899' />\n            <ColorSwatchPickerItem isDisabled color='#f43f5e' />\n        </ColorSwatchPicker>\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-picker-enable-selection-format-demo": {
    "component": "@/components/docs/colors/color-picker-enable-selection-format-demo",
    "raw": "import React from 'react'\n\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerEnableSelectionFormatDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    return <ColorPicker enableColorFormatSelection value={color} onChange={setColor} />\n}\n",
    "type": "docs"
  },
  "colors/color-area-demo": {
    "component": "@/components/docs/colors/color-area-demo",
    "raw": "import { ColorArea, ColorThumb as Thumb } from '@/components/ui'\n\nexport default function ColorAreaDemo() {\n    return (\n        <ColorArea>\n            <Thumb />\n        </ColorArea>\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-picker-with-placeholder-demo": {
    "component": "@/components/docs/colors/color-picker-with-placeholder-demo",
    "raw": "import React from 'react'\n\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerWithPlaceholderDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    return <ColorPicker placeholder='Select a color' value={color} onChange={setColor} />\n}\n",
    "type": "docs"
  },
  "colors/color-area-space-demo": {
    "component": "@/components/docs/colors/color-area-space-demo",
    "raw": "import { ColorArea, ColorThumb } from '@/components/ui'\n\nexport default function ColorAreaSpaceDemo() {\n    return (\n        <ColorArea colorSpace='rgb'>\n            <ColorThumb />\n        </ColorArea>\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-slider-disabled-demo": {
    "component": "@/components/docs/colors/color-slider-disabled-demo",
    "raw": "import { ColorSlider } from '@/components/ui'\n\nexport default function ColorSliderDisabledDemo() {\n    return <ColorSlider isDisabled channel='hue' defaultValue='hsl(0, 100%, 50%)' />\n}\n",
    "type": "docs"
  },
  "overlays/drawer-controlled-demo": {
    "component": "@/components/docs/overlays/drawer-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Drawer } from '@/components/ui'\n\nexport default function DrawerBasicDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    return (\n        <>\n            <Button onPress={() => setIsOpen(!isOpen)} variant='outline'>\n                Open Drawer\n            </Button>\n            <Drawer isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Drawer.Content>\n                    <Drawer.Header>\n                        <Drawer.Title>Next Js</Drawer.Title>\n                    </Drawer.Header>\n                    <Drawer.Body>\n                        Next.js is an open-source web development framework created by the\n                        private company Vercel providing React-based web applications with\n                        server-side rendering and static website generation. React\n                        documentation mentions Next.js among \"Recommended Toolchains\"\n                        advising it to developers when \"building a server-rendered website\n                        with Node.js\". Where traditional React apps can only render their\n                        content in the client-side browser, Next.js extends this\n                        functionality to include applications rendered on the server-side.\n                        The copyright and trademarks for Next.js are owned by Vercel,\n                        which also maintains and leads its open-source development.\n                    </Drawer.Body>\n                    <Drawer.Footer>\n                        <Drawer.Close>Close</Drawer.Close>\n                    </Drawer.Footer>\n                </Drawer.Content>\n            </Drawer>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/modal-triggered-by-menu-demo": {
    "component": "@/components/docs/overlays/modal-triggered-by-menu-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, buttonVariants, Menu, Modal } from '@/components/ui'\nimport { wait } from '@/lib/utils'\nimport { Loader2, MoreVertical } from 'lucide-react'\n\nexport default function ModalTriggeredByMenuDemo() {\n    const [state, setState] = React.useState<string | null>(null)\n    const [loading, setLoading] = React.useState<boolean>(false)\n    const closeModal = () => setState(null)\n    const executeAction = (action: string) => {\n        console.log(`${action} is executing`)\n        setLoading(true)\n        wait(2000).then(() => {\n            setLoading(false)\n            closeModal()\n        })\n    }\n\n    const actionType = (t: string | null) => {\n        switch (t) {\n            case 'delete':\n                return {\n                    title: 'Delete User',\n                    description: 'Are you sure you want to delete this item?',\n                    confirmText: 'Delete',\n                    action: () => executeAction(t)\n                }\n\n            case 'ban':\n                return {\n                    title: 'Ban User',\n                    description: 'Are you sure you want to ban this user?',\n                    confirmText: 'Ban',\n                    action: () => executeAction(t)\n                }\n\n            case 'restore':\n                return {\n                    title: 'Restore User',\n                    description: 'Are you sure you want to restore this user?',\n                    confirmText: 'Restore',\n                    action: () => executeAction(t)\n                }\n            default:\n                return\n        }\n    }\n    return (\n        <>\n            <Menu>\n                <Menu.Trigger\n                    className={buttonVariants({ variant: 'outline', size: 'icon' })}\n                >\n                    <MoreVertical />\n                </Menu.Trigger>\n                <Menu.Content placement='bottom'>\n                    <Menu.Item isDanger onAction={() => setState('delete')}>\n                        Delete\n                    </Menu.Item>\n                    <Menu.Item onAction={() => setState('ban')}>Ban</Menu.Item>\n                    <Menu.Item onAction={() => setState('restore')}>Restore</Menu.Item>\n                </Menu.Content>\n            </Menu>\n\n            <Modal.Overlay isOpen={state !== null} onOpenChange={closeModal}>\n                <Modal.Content>\n                    <Modal.Header>\n                        <Modal.Title>{actionType(state)?.title}</Modal.Title>\n                        <Modal.Description>\n                            {actionType(state)?.description}\n                        </Modal.Description>\n                    </Modal.Header>\n                    <Modal.Footer>\n                        <Modal.Close>Cancel</Modal.Close>\n                        <Button\n                            className='min-w-24'\n                            isDisabled={loading}\n                            onPress={actionType(state)?.action}\n                            variant={\n                                actionType(state)?.confirmText === 'Restore'\n                                    ? 'primary'\n                                    : 'danger'\n                            }\n                        >\n                            {loading ? (\n                                <Loader2 className={'animate-spin'} />\n                            ) : (\n                                actionType(state)?.confirmText\n                            )}\n                        </Button>\n                    </Modal.Footer>\n                </Modal.Content>\n            </Modal.Overlay>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/alert-dialog-demo": {
    "component": "@/components/docs/overlays/alert-dialog-demo",
    "raw": "'use client'\n\nimport { Button, buttonVariants, Modal } from '@/components/ui'\n\nexport default function AlertDialogDemo() {\n    return (\n        <Modal>\n            <Modal.Trigger className={buttonVariants({ variant: 'danger' })}>\n                Delete\n            </Modal.Trigger>\n            <Modal.Overlay isDismissable={false}>\n                <Modal.Content>\n                    {({ close }) => (\n                        <>\n                            <Modal.Header>\n                                <Modal.Title>Delete file</Modal.Title>\n                                <Modal.Description>\n                                    This will permanently delete the selected file. Are\n                                    you absolutely sure?\n                                </Modal.Description>\n                            </Modal.Header>\n                            <Modal.Footer>\n                                <Button variant='outline' onPress={close}>\n                                    Cancel\n                                </Button>\n                                <Button variant='danger' onPress={close}>\n                                    Yes, Delete it!\n                                </Button>\n                            </Modal.Footer>\n                        </>\n                    )}\n                </Modal.Content>\n            </Modal.Overlay>\n        </Modal>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/modal-demo": {
    "component": "@/components/docs/overlays/modal-demo",
    "raw": "'use client'\n\nimport { Button, Form, Modal, TextField } from '@/components/ui'\n\nexport default function ModalDemo() {\n    return (\n        <Modal>\n            <Button>Turn on 2FA</Button>\n            <Modal.Overlay>\n                <Modal.Content>\n                    <Modal.Header>\n                        <Modal.Title>Nice! Let's beef up your account.</Modal.Title>\n                        <Modal.Description>\n                            2FA beefs up your account's defense. Pop in your password to\n                            keep going.\n                        </Modal.Description>\n                    </Modal.Header>\n                    <Form onSubmit={() => {}}>\n                        <TextField\n                            isRequired\n                            label='Password'\n                            type='password'\n                            placeholder='Enter your password'\n                        />\n                        <Modal.Footer className='pt-4'>\n                            <Modal.Close>Cancel</Modal.Close>\n                            <Button type='submit'>Turn on 2FA</Button>\n                        </Modal.Footer>\n                    </Form>\n                </Modal.Content>\n            </Modal.Overlay>\n        </Modal>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/popover-demo": {
    "component": "@/components/docs/overlays/popover-demo",
    "raw": "'use client'\n\nimport { Button, Popover } from '@/components/ui'\n\nexport default function PopoverDemo() {\n    return (\n        <Popover>\n            <Button variant='outline'>Forgot Password</Button>\n            <Popover.Content className='w-[28rem]'>\n                <Popover.Header>\n                    <Popover.Title>Email</Popover.Title>\n                    <Popover.Description>\n                        We'll send you an email to log in.\n                    </Popover.Description>\n                </Popover.Header>\n                <Popover.Footer>\n                    <Button>Send Login Link</Button>\n                </Popover.Footer>\n            </Popover.Content>\n        </Popover>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/modal-controlled-demo": {
    "component": "@/components/docs/overlays/modal-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { Button, Modal } from '@/components/ui'\n\nexport default function ModalControlledDemo() {\n    const [open, setOpen] = useState(false)\n    return (\n        <>\n            <Button onPress={() => setOpen(true)} variant='danger'>\n                Delete Again!\n            </Button>\n            <Modal.Overlay isOpen={open} onOpenChange={setOpen}>\n                <Modal.Content>\n                    <Modal.Header>\n                        <Modal.Title>Delete file</Modal.Title>\n                        <Modal.Description>\n                            This will permanently delete the selected file. Are you\n                            absolutely sure?\n                        </Modal.Description>\n                    </Modal.Header>\n                    <Modal.Footer>\n                        <Modal.Close>Cancel</Modal.Close>\n                        <Button onPress={() => setOpen(false)} variant='danger'>\n                            Yes, Delete it!\n                        </Button>\n                    </Modal.Footer>\n                </Modal.Content>\n            </Modal.Overlay>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/sheet-menu-demo": {
    "component": "@/components/docs/overlays/sheet-menu-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { GithubLogo } from '@/components/logo'\nimport {\n    Avatar,\n    Button,\n    Checkbox,\n    Description,\n    Menu,\n    Modal,\n    Select,\n    Sheet,\n    TextField\n} from '@/components/ui'\nimport {\n    BookKey,\n    Filter,\n    Heart,\n    LogOut,\n    MessageCircle,\n    Settings,\n    User\n} from 'lucide-react'\nimport { Group, Menu as PrimitiveMenu } from 'react-aria-components'\n\nexport default function SheetMenuDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n\n    const openModal = () => setIsOpen(true)\n    const closeModal = () => setIsOpen(false)\n    return (\n        <>\n            <Modal.Overlay isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Modal.Content>\n                    <Modal.Header>\n                        <Modal.Title>Edit status</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div className='space-y-4'>\n                            <TextField\n                                prefix={<GithubLogo className='size-4' />}\n                                label='Status'\n                                placeholder=\"What's your status?\"\n                            />\n                            <Group>\n                                <Checkbox>Busy</Checkbox>\n                                <Description>\n                                    When others mention you, assign you, or request your\n                                    review, GitHub will let them know that you have\n                                    limited availability.\n                                </Description>\n                            </Group>\n                            <Select label='Clear Status'>\n                                <Select.Item>Never</Select.Item>\n                                <Select.Item>in 30 Minutes</Select.Item>\n                                <Select.Item>in 1 Hour</Select.Item>\n                                <Select.Item>in 8 Hours</Select.Item>\n                                <Select.Item>after Today</Select.Item>\n                                <Select.Item>after a Week</Select.Item>\n                                <Select.Item>after a Month</Select.Item>\n                            </Select>\n                            <Select label='Visible to'>\n                                <Select.Item>Everyone</Select.Item>\n                                <Select.Item>Organization</Select.Item>\n                                <Select.Item>Public</Select.Item>\n                            </Select>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Modal.Close>Clear Status</Modal.Close>\n                        <Button onPress={closeModal}>Set Status</Button>\n                    </Modal.Footer>\n                </Modal.Content>\n            </Modal.Overlay>\n            <Sheet>\n                <Sheet.Trigger aria-labelledby='open' aria-label='Open menu'>\n                    <Avatar\n                        initials='DQ'\n                        alt='DQ'\n                        src='https://github.com/dqnahdliyan.png'\n                    />\n                </Sheet.Trigger>\n                <Sheet.Overlay>\n                    <Sheet.Content closeButton={false}>\n                        <Sheet.Header className='mb-2 flex flex-row items-center gap-x-3'>\n                            <Avatar\n                                initials='DQ'\n                                alt='DQ'\n                                src='https://github.com/dqnahdliyan.png'\n                            />\n                            <div>\n                                <Sheet.Title>dqnahdliyan</Sheet.Title>\n                                <Sheet.Description>Diqi Nahdliyan</Sheet.Description>\n                            </div>\n                        </Sheet.Header>\n                        <PrimitiveMenu aria-labelledby='Sheet'>\n                            <Menu.Item onAction={openModal}>\n                                <GithubLogo className='size-4' />\n                                Edit Status\n                            </Menu.Item>\n                            <Menu.Separator />\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <User />\n                                    Your profile\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <BookKey /> Your repositories\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <Heart />\n                                    Your sponsors\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Separator />\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <Filter /> Feature preview\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <Settings />\n                                    Settings\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Separator />\n                            <Menu.Section>\n                                <Menu.Item>\n                                    <BookKey /> GitHub Docs\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <User /> GitHub Support\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <MessageCircle /> GitHub Community\n                                </Menu.Item>\n                            </Menu.Section>\n                            <Menu.Separator />\n                            <Menu.Item isDanger>\n                                <LogOut /> Sign out\n                            </Menu.Item>\n                        </PrimitiveMenu>\n                    </Sheet.Content>\n                </Sheet.Overlay>\n            </Sheet>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/drawer-with-footer-demo": {
    "component": "@/components/docs/overlays/drawer-with-footer-demo",
    "raw": "'use client'\n\nimport { buttonVariants, Drawer } from '@/components/ui'\n\nexport default function DrawerBasicDemo() {\n    return (\n        <Drawer>\n            <Drawer.Trigger className={buttonVariants({ variant: 'outline' })}>\n                Open Drawer\n            </Drawer.Trigger>\n            <Drawer.Content>\n                <Drawer.Header>\n                    <Drawer.Title>Next Js</Drawer.Title>\n                </Drawer.Header>\n                <Drawer.Body>\n                    Next.js is an open-source web development framework created by the\n                    private company Vercel providing React-based web applications with\n                    server-side rendering and static website generation. React\n                    documentation mentions Next.js among \"Recommended Toolchains\" advising\n                    it to developers when \"building a server-rendered website with\n                    Node.js\". Where traditional React apps can only render their content\n                    in the client-side browser, Next.js extends this functionality to\n                    include applications rendered on the server-side. The copyright and\n                    trademarks for Next.js are owned by Vercel, which also maintains and\n                    leads its open-source development.\n                </Drawer.Body>\n                <Drawer.Footer>\n                    <Drawer.Close>Close</Drawer.Close>\n                </Drawer.Footer>\n            </Drawer.Content>\n        </Drawer>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/sheet-basic-demo": {
    "component": "@/components/docs/overlays/sheet-basic-demo",
    "raw": "'use client'\n\nimport { Button, Sheet } from '@/components/ui'\n\nexport default function SheetBasicDemo() {\n    return (\n        <Sheet>\n            <Button variant='outline'>Open sheet</Button>\n            <Sheet.Overlay>\n                <Sheet.Content>\n                    <Sheet.Header>\n                        <Sheet.Title>Sheet. Title</Sheet.Title>\n                        <Sheet.Description>Sheet. Description</Sheet.Description>\n                    </Sheet.Header>\n                    Sheet. Body\n                    <Sheet.Footer>Sheet. Footer</Sheet.Footer>\n                </Sheet.Content>\n            </Sheet.Overlay>\n        </Sheet>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/sheet-demo": {
    "component": "@/components/docs/overlays/sheet-demo",
    "raw": "'use client'\n\nimport React, { useState } from 'react'\n\nimport { OptionPreview } from '@/components/docs/outside/option-preview'\nimport { Button, Sheet, Switch } from '@/components/ui'\nimport { titleCase } from 'usemods'\n\ntype Side = 'left' | 'right' | 'top' | 'bottom'\nexport default function SheetDemo() {\n    const [sheetSide, setSheetSide] = React.useState<Side>('left')\n    const [isOpen, setIsOpen] = React.useState(false)\n\n    const [settings, setSettings] = useState({\n        closeButton: true,\n        isStack: true\n    })\n\n    const sides: Side[] = ['left', 'right', 'top', 'bottom']\n\n    const pressHandler = (side: Side, open: boolean) => {\n        setSheetSide(side)\n        setIsOpen(open)\n    }\n\n    return (\n        <>\n            <OptionPreview>\n                <Switch\n                    defaultSelected={settings.isStack}\n                    onChange={() =>\n                        setSettings({ ...settings, isStack: !settings.isStack })\n                    }\n                >\n                    Toggle stack\n                </Switch>\n                <Switch\n                    defaultSelected={settings.closeButton}\n                    onChange={() =>\n                        setSettings({ ...settings, closeButton: !settings.closeButton })\n                    }\n                >\n                    With x button\n                </Switch>\n            </OptionPreview>\n            <div className='grid grid-cols-2 gap-2'>\n                {sides.map((side, idx) => (\n                    <Button\n                        variant='outline'\n                        onPress={() => pressHandler(side, true)}\n                        key={idx}\n                    >\n                        {titleCase(side)}\n                    </Button>\n                ))}\n            </div>\n            <Sheet.Overlay isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Sheet.Content\n                    closeButton={settings.closeButton}\n                    isStack={settings.isStack}\n                    side={sheetSide}\n                >\n                    <Sheet.Header>\n                        <Sheet.Title>{titleCase(sheetSide)}</Sheet.Title>\n                        <Sheet.Description>\n                            The sheet will go from {sheetSide} side.\n                        </Sheet.Description>\n                    </Sheet.Header>\n                </Sheet.Content>\n            </Sheet.Overlay>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/drawer-basic-demo": {
    "component": "@/components/docs/overlays/drawer-basic-demo",
    "raw": "'use client'\n\nimport { buttonVariants, Drawer } from '@/components/ui'\n\nexport default function DrawerBasicDemo() {\n    return (\n        <Drawer>\n            <Drawer.Trigger className={buttonVariants({ variant: 'outline' })}>\n                Click Me!\n            </Drawer.Trigger>\n            <Drawer.Content>\n                <Drawer.Header>\n                    <Drawer.Title>Next Js</Drawer.Title>\n                    <Drawer.Description>\n                        Next.js is an open-source web development framework created by the\n                        private company Vercel providing React-based web applications with\n                        server-side rendering and static website generation. React\n                        documentation mentions Next.js among \"Recommended Toolchains\"\n                        advising it to developers when \"building a server-rendered website\n                        with Node.js\". Where traditional React apps can only render their\n                        content in the client-side browser, Next.js extends this\n                        functionality to include applications rendered on the server-side.\n                        The copyright and trademarks for Next.js are owned by Vercel,\n                        which also maintains and leads its open-source development.\n                    </Drawer.Description>\n                </Drawer.Header>\n            </Drawer.Content>\n        </Drawer>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/tooltip-demo": {
    "component": "@/components/docs/overlays/tooltip-demo",
    "raw": "'use client'\n\nimport { FacebookLogo, GithubLogo } from '@/components/logo'\nimport { buttonVariants, Tooltip } from '@/components/ui'\n\nexport default function TooltipDemo() {\n    return (\n        <div className='flex gap-2'>\n            <Tooltip>\n                <Tooltip.Trigger\n                    aria-label='Add My Facebook'\n                    className={buttonVariants({\n                        variant: 'outline',\n                        size: 'icon'\n                    })}\n                >\n                    <FacebookLogo className='h-4 w-4' />\n                </Tooltip.Trigger>\n                <Tooltip.Content>Add me on Facebook @DiqiNahdliyan</Tooltip.Content>\n            </Tooltip>\n            <Tooltip>\n                <Tooltip.Trigger\n                    aria-label='Follow My Github'\n                    className={buttonVariants({\n                        variant: 'outline',\n                        size: 'icon'\n                    })}\n                >\n                    <GithubLogo className='h-4 w-4' />\n                </Tooltip.Trigger>\n                <Tooltip.Content>Follow me on Github @dqnahdliyan</Tooltip.Content>\n            </Tooltip>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "media/avatar-shape-demo": {
    "component": "@/components/docs/media/avatar-shape-demo",
    "raw": "import { Avatar } from '@/components/ui'\n\nexport default function AvatarShapeDemo() {\n    return (\n        <div className='flex gap-2'>\n            <Avatar\n                shape='square'\n                initials='DQ'\n                alt='dqnahdliyan'\n                src='https://github.com/dqnahdliyan.png'\n            />\n            <Avatar\n                shape='circle'\n                initials='DQ'\n                alt='dqnahdliyan'\n                src='https://github.com/dqnahdliyan.png'\n            />\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "media/avatar-initials-demo": {
    "component": "@/components/docs/media/avatar-initials-demo",
    "raw": "import { Avatar } from '@/components/ui'\n\nexport default function AvatarInitialsDemo() {\n    return <Avatar initials='DQ' />\n}\n",
    "type": "docs"
  },
  "media/avatar-group-demo": {
    "component": "@/components/docs/media/avatar-group-demo",
    "raw": "import { Avatar, AvatarGroup } from '@/components/ui'\n\nexport default function AvatarGroupDemo() {\n    return (\n        <AvatarGroup>\n            <Avatar initials='AA' src='https://i.pravatar.cc/150?img=61' />\n            <Avatar initials='BB' src='https://i.pravatar.cc/150?img=62' />\n            <Avatar initials='CC' src='https://i.pravatar.cc/150?img=63' />\n            <Avatar initials='DD' src='https://i.pravatar.cc/150?img=64' />\n            <Avatar initials='EE' src='https://i.pravatar.cc/150?img=65' />\n        </AvatarGroup>\n    )\n}\n",
    "type": "docs"
  },
  "media/avatar-size-demo": {
    "component": "@/components/docs/media/avatar-size-demo",
    "raw": "import { Avatar } from '@/components/ui'\n\nexport default function AvatarSizeDemo() {\n    return (\n        <div className='flex gap-4'>\n            <Avatar size='sm' src='https://github.com/dqnahdliyan.png' />\n            <Avatar size='md' src='https://github.com/dqnahdliyan.png' />\n            <Avatar size='lg' src='https://github.com/dqnahdliyan.png' />\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "media/avatar-demo": {
    "component": "@/components/docs/media/avatar-demo",
    "raw": "import { Avatar } from '@/components/ui'\n\nexport default function AvatarDemo() {\n    return <Avatar src='https://github.com/dqnahdliyan.png' />\n}\n",
    "type": "docs"
  },
  "media/avatar-fallback-demo": {
    "component": "@/components/docs/media/avatar-fallback-demo",
    "raw": "import { Avatar } from '@/components/ui'\n\nexport default function AvatarFallbackDemo() {\n    return <Avatar initials='DQ' src='https://github.com/dq-nahdliyan.png' />\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger-disabled-demo": {
    "component": "@/components/docs/buttons/file-trigger-disabled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerDemo() {\n    const [file, setFile] = React.useState<string[] | null>(null)\n    return (\n        <>\n            <FileTrigger\n                isDisabled\n                onSelect={(e) => {\n                    const files = Array.from(e ?? [])\n                    const filenames = files.map((file) => file.name)\n                    setFile(filenames)\n                }}\n            />\n            {file && <Description>{file}</Description>}\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger-folder-demo": {
    "component": "@/components/docs/buttons/file-trigger-folder-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerFolderDemo() {\n    return <FileTrigger acceptDirectory />\n}\n",
    "type": "docs"
  },
  "buttons/button-disabled-demo": {
    "component": "@/components/docs/buttons/button-disabled-demo",
    "raw": "'use client'\n\nimport { Button } from '@/components/ui'\n\nexport default function ButtonDisabledDemo() {\n    return <Button isDisabled>This Button is Disabled</Button>\n}\n",
    "type": "docs"
  },
  "buttons/button-only-icon-demo": {
    "component": "@/components/docs/buttons/button-only-icon-demo",
    "raw": "'use client'\n\nimport { NextLogo } from '@/components/logo'\nimport { Button } from '@/components/ui'\n\nexport default function ButtonOnlyIconDemo() {\n    return (\n        <Button size='icon'>\n            <NextLogo className='size-4' />\n        </Button>\n    )\n}\n",
    "type": "docs"
  },
  "buttons/button-basic-demo": {
    "component": "@/components/docs/buttons/button-basic-demo",
    "raw": "'use client'\n\nimport { Button } from '@/components/ui'\n\nexport default function ButtonBasicDemo() {\n    return <Button>This is Button</Button>\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger-demo": {
    "component": "@/components/docs/buttons/file-trigger-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerDemo() {\n    const [file, setFile] = React.useState<string[] | null>(null)\n    return (\n        <>\n            <FileTrigger\n                onSelect={(e) => {\n                    const files = Array.from(e ?? [])\n                    const filenames = files.map((file) => file.name)\n                    setFile(filenames)\n                }}\n            />\n            {file && <Description>{file}</Description>}\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "buttons/button-variant-demo": {
    "component": "@/components/docs/buttons/button-variant-demo",
    "raw": "'use client'\n\nimport { Button, buttonVariants } from '@/components/ui'\n\ntype Variant = keyof typeof buttonVariants.variants.variant\n\nexport default function ButtonVariantDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap'>\n            {Object.keys(buttonVariants.variants.variant).map((variant) => (\n                <div key={variant}>\n                    <Button variant={variant as Variant}>{variant}</Button>\n                </div>\n            ))}\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "buttons/button-icon-demo": {
    "component": "@/components/docs/buttons/button-icon-demo",
    "raw": "'use client'\n\nimport { NextLogo } from '@/components/logo'\nimport { Button } from '@/components/ui'\n\nexport default function ButtonIconDemo() {\n    return (\n        <Button>\n            <NextLogo className='size-4' />\n            Next.Js\n        </Button>\n    )\n}\n",
    "type": "docs"
  },
  "buttons/button-shape-demo": {
    "component": "@/components/docs/buttons/button-shape-demo",
    "raw": "'use client'\n\nimport { Button } from '@/components/ui'\n\nexport default function ButtonShapeDemo() {\n    return (\n        <div className='flex gap-2'>\n            <Button shape='square'>Square</Button>\n            <Button shape='circle'>Circle</Button>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "buttons/toggle-button-demo": {
    "component": "@/components/docs/buttons/toggle-button-demo",
    "raw": "'use client'\n\nimport { ToggleButton } from '@/components/ui'\n\nexport default function ToggleButtonDemo() {\n    return (\n        <ToggleButton>\n            {({ isSelected }) => <>{isSelected ? \"I'm On\" : \"I'm Off\"}</>}\n        </ToggleButton>\n    )\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger-multiple-demo": {
    "component": "@/components/docs/buttons/file-trigger-multiple-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerMultipleDemo() {\n    return <FileTrigger allowsMultiple />\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger-camera-demo": {
    "component": "@/components/docs/buttons/file-trigger-camera-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerCameraDemo() {\n    return <FileTrigger defaultCamera='environment'>Open a camera</FileTrigger>\n}\n",
    "type": "docs"
  },
  "buttons/button-size-demo": {
    "component": "@/components/docs/buttons/button-size-demo",
    "raw": "'use client'\n\nimport { NextLogo } from '@/components/logo'\nimport { Button } from '@/components/ui'\n\nexport default function ButtonSizeDemo() {\n    return (\n        <div className='flex gap-2'>\n            <Button size='sm'>Small</Button>\n            <Button>Medium (Default)</Button>\n            <Button size='lg'>Large</Button>\n            <Button size='icon'>\n                <NextLogo />\n            </Button>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "sheet": {
    "component": "@/components/ui/sheet",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { cn } from '@/lib/utils'\nimport * as Primitive from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { Dialog } from './dialog'\nimport { CloseButtonIndicator, Modal } from './modal'\n\ninterface SheetSubComponents {\n    Close: typeof SheetClose\n    Content: typeof SheetContent\n    Description: typeof SheetDescription\n    Footer: typeof SheetFooter\n    Header: typeof SheetHeader\n    Overlay: typeof SheetOverlay\n    Title: typeof SheetTitle\n    Trigger: typeof SheetTrigger\n}\n\ntype SheetProps = VariantProps<typeof sheetVariants> & Primitive.DialogTriggerProps\n\nconst Sheet: React.FC<SheetProps> & SheetSubComponents = (props: SheetProps) => (\n    <Primitive.DialogTrigger {...props}>{props.children}</Primitive.DialogTrigger>\n)\nconst SheetTrigger = (props: Primitive.ButtonProps) => <Primitive.Button {...props} />\nconst SheetClose = Modal.Close\nconst SheetFooter = Modal.Footer\nconst SheetHeader = Modal.Header\nconst SheetTitle = Modal.Title\nconst SheetDescription = Modal.Description\n\nconst generateCompoundVariants = (sides: Array<'top' | 'bottom' | 'left' | 'right'>) => {\n    return sides.map((side) => ({\n        side,\n        isStack: true,\n        className:\n            side === 'top'\n                ? 'top-2 inset-x-2 rounded-lg border'\n                : side === 'bottom'\n                  ? 'bottom-2 inset-x-2 rounded-lg border'\n                  : side === 'left'\n                    ? 'left-2 inset-y-2 rounded-lg border'\n                    : 'right-2 inset-y-2 rounded-lg border'\n    }))\n}\n\nconst sheetVariants = tv({\n    base: 'fixed z-50 grid gap-4 bg-background text-foreground shadow-lg transition ease-in-out entering:duration-300 entering:animate-in exiting:duration-200 exiting:animate-out',\n    variants: {\n        side: {\n            top: 'inset-x-0 top-0 rounded-b-2xl border-b entering:slide-in-from-top exiting:slide-out-to-top',\n            bottom: 'inset-x-0 bottom-0 rounded-t-2xl border-t entering:slide-in-from-bottom exiting:slide-out-to-bottom',\n            left: 'inset-y-0 left-0 h-auto w-72 overflow-y-auto border-r entering:slide-in-from-left exiting:slide-out-to-left sm:w-3/4 sm:max-w-xs',\n            right: 'inset-y-0 right-0 h-auto w-72 overflow-y-auto border-l entering:slide-in-from-right exiting:slide-out-to-right sm:w-3/4 sm:max-w-xs'\n        },\n        isStack: {\n            true: '',\n            false: ''\n        }\n    },\n    compoundVariants: generateCompoundVariants(['top', 'bottom', 'left', 'right'])\n})\n\nconst SheetOverlay = ({\n    className,\n    isDismissable = true,\n    ...props\n}: Primitive.ModalOverlayProps) => (\n    <Primitive.ModalOverlay\n        isDismissable={isDismissable}\n        className={(values) =>\n            cn(\n                'fixed inset-0 z-50 bg-black/50 entering:animate-in entering:fade-in-0 exiting:duration-300 exiting:animate-out exiting:fade-out-0',\n                typeof className === 'function' ? className(values) : className\n            )\n        }\n        {...props}\n    />\n)\n\nexport interface SheetContentProps\n    extends Omit<React.ComponentProps<typeof Primitive.Modal>, 'children'>,\n        VariantProps<typeof sheetVariants> {\n    children?: Primitive.DialogProps['children']\n    role?: Primitive.DialogProps['role']\n    closeButton?: boolean\n    isStack?: boolean\n}\n\nconst SheetContent = (props: SheetContentProps) => {\n    const {\n        className,\n        children,\n        side = 'right',\n        role,\n        closeButton = true,\n        isStack = true\n    } = props\n    return (\n        <Primitive.Modal\n            className={cn(sheetVariants({ side, isStack }), className)}\n            {...props}\n        >\n            <Dialog aria-label='Sheet' role={role} className='h-full outline-none'>\n                {(values) => (\n                    <>\n                        {typeof children === 'function' ? children(values) : children}\n                        {closeButton && (\n                            <CloseButtonIndicator\n                                className='right-2.5 top-2.5'\n                                close={values.close}\n                            />\n                        )}\n                    </>\n                )}\n            </Dialog>\n        </Primitive.Modal>\n    )\n}\n\nSheet.Close = SheetClose\nSheet.Content = SheetContent\nSheet.Description = SheetDescription\nSheet.Footer = SheetFooter\nSheet.Header = SheetHeader\nSheet.Overlay = SheetOverlay\nSheet.Title = SheetTitle\nSheet.Trigger = SheetTrigger\n\nexport { Sheet }\n",
    "type": "ui"
  },
  "date-field": {
    "component": "@/components/ui/date-field",
    "raw": "'use client'\n\nimport { cn } from '@/lib/utils'\nimport * as Primitive from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Description, FieldError, fieldGroupStyles, Label } from './field'\n\ninterface DateFieldProps<T extends Primitive.DateValue>\n    extends Primitive.DateFieldProps<T> {\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: Primitive.ValidationResult) => string)\n}\n\nconst DateField = <T extends Primitive.DateValue>({\n    label,\n    description,\n    errorMessage,\n    ...props\n}: DateFieldProps<T>) => {\n    return (\n        <Primitive.DateField\n            {...props}\n            className={cn('flex flex-col gap-1', props.className)}\n        >\n            {label && <Label>{label}</Label>}\n            <DateInput />\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </Primitive.DateField>\n    )\n}\n\nconst segmentStyles = tv({\n    base: 'inline rounded p-0.5 tracking-wider text-foreground caret-transparent outline outline-0 type-literal:px-0 lg:text-sm',\n    variants: {\n        isPlaceholder: {\n            true: 'text-muted-foreground'\n        },\n        isDisabled: {\n            true: 'text-muted-foreground'\n        },\n        isFocused: {\n            true: 'bg-primary text-primary-foreground'\n        }\n    }\n})\n\nconst DateInput = (props: Omit<Primitive.DateInputProps, 'children'>) => {\n    return (\n        <Primitive.DateInput\n            className={cn(\n                'min-w-sm block w-full px-2 py-2 font-mono uppercase disabled:bg-muted lg:text-sm',\n                fieldGroupStyles.base,\n                props.className\n            )}\n            {...props}\n        >\n            {(segment) => (\n                <Primitive.DateSegment segment={segment} className={segmentStyles} />\n            )}\n        </Primitive.DateInput>\n    )\n}\n\nexport { DateField, DateInput }\n",
    "type": "ui"
  },
  "modal": {
    "component": "@/components/ui/modal",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { cn, useMediaQuery } from '@/lib/utils'\nimport { X } from 'lucide-react'\nimport * as Primitive from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { Button } from './button'\nimport { Dialog } from './dialog'\n\nexport const modalVariants = tv({\n    base: [\n        'fixed bottom-0 left-[50%] top-auto z-50 grid w-full max-w-full translate-x-[-50%] gap-4 rounded-t-xl border border-b-transparent bg-background p-2 shadow-lg outline-none sm:bottom-auto sm:top-[40%] sm:translate-y-[-50%] sm:rounded-xl sm:border-b-border',\n        'entering:[transition-timing-function:ease-out] entering:animate-in entering:fade-in-0 entering:zoom-in-95 entering:slide-in-from-top-1/2 entering:slide-in-from-left-1/2',\n        'exiting:[transition-timing-function:ease] exiting:animate-out exiting:fade-out-0 exiting:zoom-out-95 exiting:slide-out-to-top-1/2 exiting:slide-out-to-left-1/2'\n    ],\n    variants: {\n        size: {\n            xs: 'sm:max-w-xs',\n            sm: 'sm:max-w-sm',\n            md: 'sm:max-w-md',\n            lg: 'sm:max-w-lg',\n            xl: 'sm:max-w-xl',\n            '2xl': 'sm:max-w-2xl',\n            '3xl': 'sm:max-w-3xl',\n            '4xl': 'sm:max-w-4xl',\n            '5xl': 'sm:max-w-5xl'\n        }\n    },\n    defaultVariants: {\n        size: 'lg'\n    }\n})\n\ninterface ModalSubComponents {\n    Body: typeof ModalBody\n    Close: typeof ModalClose\n    Content: typeof ModalContent\n    Description: typeof ModalDescription\n    Footer: typeof ModalFooter\n    Header: typeof ModalHeader\n    Overlay: typeof ModalOverlay\n    Title: typeof ModalTitle\n    Trigger: typeof ModalTrigger\n}\n\nconst Modal: React.FC<Primitive.DialogTriggerProps> & ModalSubComponents = (props) => (\n    <Primitive.DialogTrigger {...props} />\n)\n\nconst ModalTrigger = Primitive.Button\n\nconst ModalOverlayContext = React.createContext<{\n    isDismissable?: boolean\n}>({})\n\nconst ModalOverlay = ({\n    className,\n    isDismissable = true,\n    ...props\n}: Primitive.ModalOverlayProps) => (\n    <ModalOverlayContext.Provider value={{ isDismissable: isDismissable }}>\n        <Primitive.ModalOverlay\n            isDismissable={isDismissable}\n            className={(values) =>\n                cn(\n                    'fixed inset-0 z-50 bg-black/60 backdrop-blur-sm entering:animate-in entering:fade-in-0 exiting:animate-in exiting:fade-out-0',\n                    typeof className === 'function' ? className(values) : className\n                )\n            }\n            {...props}\n        />\n    </ModalOverlayContext.Provider>\n)\n\nexport interface ModalContentProps\n    extends Omit<React.ComponentProps<typeof Primitive.Modal>, 'children'>,\n        VariantProps<typeof modalVariants> {\n    children?: Primitive.DialogProps['children']\n    role?: Primitive.DialogProps['role']\n    closeButton?: boolean\n    className?: string\n}\n\ninterface CloseButtonIndicatorProps {\n    desktop?: boolean\n    className?: string\n    close: () => void\n    dismissable?: boolean | undefined\n}\n\nconst CloseButtonIndicator = ({ className, ...props }: CloseButtonIndicatorProps) => {\n    return (\n        <Button\n            variant='ghost'\n            size='icon'\n            aria-label='Close'\n            autoFocus={!props.desktop}\n            onPress={props.close}\n            className={cn(\n                'close absolute right-1 top-1 z-50 size-6',\n                className,\n                props.dismissable === false && 'hidden'\n            )}\n        >\n            <X className='size-4' />\n        </Button>\n    )\n}\n\nconst ModalContent = ({\n    className,\n    children,\n    size,\n    role,\n    closeButton = true,\n    ...props\n}: ModalContentProps) => {\n    const { isDismissable } = React.useContext(ModalOverlayContext)\n    const isDesktop = useMediaQuery('(min-width: 1024px)')\n    return (\n        <Primitive.Modal className={modalVariants({ size, className })} {...props}>\n            <Dialog role={role}>\n                {(values) => (\n                    <>\n                        {typeof children === 'function' ? children(values) : children}\n                        {closeButton && (\n                            <CloseButtonIndicator\n                                desktop={isDesktop}\n                                close={values.close}\n                                dismissable={isDismissable}\n                            />\n                        )}\n                    </>\n                )}\n            </Dialog>\n        </Primitive.Modal>\n    )\n}\n\nconst ModalHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n    <div\n        className={cn(\n            'mb-6 flex flex-col gap-y-0.5 pr-1 text-center sm:pr-0 sm:text-left',\n            className\n        )}\n        {...props}\n    />\n)\n\ninterface ModalCloseProps extends Primitive.ButtonProps {}\n\nconst ModalClose = ({ className, ...props }: ModalCloseProps) => {\n    const state = React.useContext(Primitive.OverlayTriggerStateContext)!\n    return <Button variant='outline' onPress={() => state.close()} {...props} />\n}\n\nconst ModalBody = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n    <div className={cn('pb-6', className)} {...props} />\n)\n\nconst ModalFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n    <div\n        className={cn(\n            'flex flex-col-reverse gap-2 sm:flex-row sm:justify-between',\n            className\n        )}\n        {...props}\n    />\n)\n\nconst ModalTitle = ({ className, ...props }: Primitive.HeadingProps) => (\n    <Primitive.Heading\n        slot='title'\n        className={cn(\n            'text-xl font-semibold leading-none tracking-tight lg:text-lg',\n            className\n        )}\n        {...props}\n    />\n)\n\nconst ModalDescription = ({ className, ...props }: Primitive.HeadingProps) => (\n    <p className={cn('text-sm text-muted-foreground', className)} {...props} />\n)\n\nModal.Body = ModalBody\nModal.Close = ModalClose\nModal.Content = ModalContent\nModal.Description = ModalDescription\nModal.Footer = ModalFooter\nModal.Header = ModalHeader\nModal.Overlay = ModalOverlay\nModal.Title = ModalTitle\nModal.Trigger = ModalTrigger\n\nexport { CloseButtonIndicator, Modal }\n",
    "type": "ui"
  },
  "calendar": {
    "component": "@/components/ui/calendar",
    "raw": "'use client'\n\nimport { ChevronLeft, ChevronRight } from 'lucide-react'\nimport * as Primitive from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Button } from './button'\n\nconst cellStyles = tv({\n    base: 'flex size-9 cursor-default items-center justify-center rounded-md text-sm outline-none focus:outline-none',\n    variants: {\n        isSelected: {\n            false: 'text-foreground hover:bg-primary/20',\n            true: 'bg-primary text-primary-foreground invalid:bg-danger invalid:text-danger-foreground'\n        },\n        isDisabled: {\n            true: 'text-muted-foreground'\n        }\n    }\n})\n\ninterface CalendarProps<T extends Primitive.DateValue>\n    extends Omit<Primitive.CalendarProps<T>, 'visibleDuration'> {\n    errorMessage?: string\n}\n\nfunction Calendar<T extends Primitive.DateValue>({\n    errorMessage,\n    ...props\n}: CalendarProps<T>) {\n    return (\n        <Primitive.Calendar {...props}>\n            <CalendarHeader />\n            <Primitive.CalendarGrid>\n                <CalendarGridHeader />\n                <Primitive.CalendarGridBody>\n                    {(date) => (\n                        <Primitive.CalendarCell date={date} className={cellStyles} />\n                    )}\n                </Primitive.CalendarGridBody>\n            </Primitive.CalendarGrid>\n            {errorMessage && (\n                <Primitive.Text slot='errorMessage' className='text-sm text-danger'>\n                    {errorMessage}\n                </Primitive.Text>\n            )}\n        </Primitive.Calendar>\n    )\n}\n\nfunction CalendarHeader() {\n    const { direction } = Primitive.useLocale()\n\n    return (\n        <header className='flex w-full items-center gap-1 px-1 pb-4'>\n            <Button\n                size='icon'\n                className='[&_[data-slot=icon]]:text-foreground'\n                variant='outline'\n                slot='previous'\n            >\n                {direction === 'rtl' ? (\n                    <ChevronRight aria-hidden />\n                ) : (\n                    <ChevronLeft aria-hidden />\n                )}\n            </Button>\n            <Primitive.Heading className='mx-2 flex-1 text-center text-base font-medium text-foreground' />\n            <Button\n                size='icon'\n                className='[&_[data-slot=icon]]:text-foreground'\n                variant='outline'\n                slot='next'\n            >\n                {direction === 'rtl' ? (\n                    <ChevronLeft aria-hidden />\n                ) : (\n                    <ChevronRight aria-hidden />\n                )}\n            </Button>\n        </header>\n    )\n}\n\nfunction CalendarGridHeader() {\n    return (\n        <Primitive.CalendarGridHeader>\n            {(day) => (\n                <Primitive.CalendarHeaderCell className='text-xs font-semibold text-muted-foreground'>\n                    {day}\n                </Primitive.CalendarHeaderCell>\n            )}\n        </Primitive.CalendarGridHeader>\n    )\n}\n\ninterface RangeCalendarProps<T extends Primitive.DateValue>\n    extends Omit<Primitive.RangeCalendarProps<T>, 'visibleDuration'> {\n    errorMessage?: string\n}\n\nconst cell = tv({\n    base: 'flex h-full w-full items-center justify-center rounded-md',\n    variants: {\n        selectionState: {\n            none: 'group-hover:bg-primary/20 group-pressed:bg-primary group-pressed:text-primary-foreground',\n            middle: [\n                'group-hover:bg-primary/20',\n                'group-invalid:group-hover:bg-danger',\n                'group-pressed:bg-primary group-pressed:text-primary-foreground',\n                'group-invalid:group-pressed:bg-danger group-invalid:group-pressed:text-danger-foreground'\n            ],\n            cap: 'bg-primary text-primary-foreground group-invalid:bg-danger group-invalid:text-danger-foreground'\n        },\n        isDisabled: {\n            true: 'text-muted-foreground'\n        }\n    }\n})\n\nfunction RangeCalendar<T extends Primitive.DateValue>({\n    errorMessage,\n    ...props\n}: RangeCalendarProps<T>) {\n    return (\n        <Primitive.RangeCalendar {...props}>\n            <CalendarHeader />\n            <Primitive.CalendarGrid className='[&_td]:px-0'>\n                <CalendarGridHeader />\n                <Primitive.CalendarGridBody>\n                    {(date) => (\n                        <Primitive.CalendarCell\n                            date={date}\n                            className='group size-9 cursor-default text-sm outline outline-0 outside-month:text-secondary selected:bg-primary/20 invalid:selected:bg-danger/20 selection-start:rounded-s-md selection-end:rounded-e-md [td:first-child_&]:rounded-s-md [td:last-child_&]:rounded-e-md'\n                        >\n                            {({\n                                formattedDate,\n                                isSelected,\n                                isSelectionStart,\n                                isSelectionEnd,\n                                isDisabled\n                            }) => (\n                                <span\n                                    className={cell({\n                                        selectionState:\n                                            isSelected &&\n                                            (isSelectionStart || isSelectionEnd)\n                                                ? 'cap'\n                                                : isSelected\n                                                  ? 'middle'\n                                                  : 'none',\n                                        isDisabled\n                                    })}\n                                >\n                                    {formattedDate}\n                                </span>\n                            )}\n                        </Primitive.CalendarCell>\n                    )}\n                </Primitive.CalendarGridBody>\n            </Primitive.CalendarGrid>\n            {errorMessage && (\n                <Primitive.Text slot='errorMessage' className='text-sm text-danger'>\n                    {errorMessage}\n                </Primitive.Text>\n            )}\n        </Primitive.RangeCalendar>\n    )\n}\n\nCalendar.GridHeader = CalendarGridHeader\nCalendar.Header = CalendarHeader\nCalendar.RangeCalendar = RangeCalendar\n\nexport { Calendar }\n",
    "type": "ui"
  },
  "skeleton": {
    "component": "@/components/ui/skeleton",
    "raw": "import { cn } from '@/lib/utils'\n\nconst Skeleton = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n    <div className={cn('animate-pulse rounded-md bg-muted', className)} {...props} />\n)\n\nexport { Skeleton }\n",
    "type": "ui"
  },
  "tabs": {
    "component": "@/components/ui/tabs",
    "raw": "'use client'\n\nimport { useId } from 'react'\n\nimport { cn } from '@/lib/utils'\nimport { LayoutGroup, motion } from 'framer-motion'\nimport * as Primitive from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nconst tabsStyles = tv({\n    base: 'group flex gap-4',\n    variants: {\n        orientation: {\n            horizontal: 'flex-col',\n            vertical: 'w-[800px] flex-row'\n        }\n    }\n})\n\nfunction Tabs(props: Primitive.TabsProps) {\n    return (\n        <Primitive.Tabs\n            {...props}\n            className={Primitive.composeRenderProps(\n                props.className,\n                (className, renderProps) =>\n                    tabsStyles({\n                        ...renderProps,\n                        className\n                    })\n            )}\n        />\n    )\n}\n\nconst tabListStyles = tv({\n    base: 'flex',\n    variants: {\n        orientation: {\n            horizontal: 'flex-row gap-x-5 border-b',\n            vertical: 'flex-col items-start gap-y-4 border-l'\n        }\n    }\n})\n\nfunction TabList<T extends object>(props: Primitive.TabListProps<T>) {\n    const id = useId()\n    return (\n        <LayoutGroup id={id}>\n            <Primitive.TabList\n                {...props}\n                className={Primitive.composeRenderProps(\n                    props.className,\n                    (className, renderProps) =>\n                        tabListStyles({ ...renderProps, className })\n                )}\n            />\n        </LayoutGroup>\n    )\n}\n\nconst tabProps = tv({\n    base: [\n        'relative flex cursor-default items-center rounded-full text-sm font-medium outline-none transition hover:text-foreground',\n        // hor\n        'group-orientation-vertical:w-full group-orientation-vertical:py-0',\n        // ver\n        'group-orientation-horizontal:pb-3 group-orientation-vertical:pl-4 group-orientation-vertical:pr-2'\n    ],\n    variants: {\n        isSelected: {\n            false: 'text-muted-foreground',\n            true: 'text-foreground'\n        },\n        isFocused: { false: 'ring-0', true: 'text-foreground' },\n        isDisabled: {\n            true: 'text-muted-foreground/50'\n        }\n    }\n})\n\nfunction Tab({ children, ...props }: Primitive.TabProps) {\n    return (\n        <Primitive.Tab\n            {...props}\n            className={Primitive.composeRenderProps(\n                props.className,\n                (_className, renderProps) =>\n                    tabProps({\n                        ...renderProps,\n                        className: cn('href' in props && 'cursor-pointer', _className)\n                    })\n            )}\n        >\n            {({ isSelected }) => (\n                <>\n                    {children}\n                    {isSelected && (\n                        <motion.span\n                            className={cn(\n                                'absolute rounded bg-foreground',\n                                // horizontal\n                                'group-orientation-horizontal:inset-x-0 group-orientation-horizontal:-bottom-px group-orientation-horizontal:h-0.5 group-orientation-horizontal:w-full',\n                                // vertical\n                                'group-orientation-vertical:left-0 group-orientation-vertical:h-[calc(100%-10%)] group-orientation-vertical:w-0.5 group-orientation-vertical:transform'\n                            )}\n                            layoutId='current-selected'\n                            transition={{ type: 'spring', stiffness: 500, damping: 30 }}\n                        />\n                    )}\n                </>\n            )}\n        </Primitive.Tab>\n    )\n}\n\nconst tabPanelStyles = tv({\n    base: 'flex-1 text-sm text-foreground'\n})\n\nfunction TabPanel(props: Primitive.TabPanelProps) {\n    return (\n        <Primitive.TabPanel\n            {...props}\n            className={Primitive.composeRenderProps(\n                props.className,\n                (className, renderProps) => tabPanelStyles({ ...renderProps, className })\n            )}\n        />\n    )\n}\n\nTabs.Content = TabPanel\nTabs.Label = Tab\nTabs.List = TabList\n\nexport { Tab, TabList, TabPanel, Tabs }\n",
    "type": "ui"
  },
  "file-trigger": {
    "component": "@/components/ui/file-trigger",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Camera, Folder, Paperclip } from 'lucide-react'\nimport * as Primitive from 'react-aria-components'\nimport { type VariantProps } from 'tailwind-variants'\n\nimport { Button, type buttonVariants } from './button'\n\ninterface FileTriggerProps\n    extends Primitive.FileTriggerProps,\n        VariantProps<typeof buttonVariants> {\n    withIcon?: boolean\n    isDisabled?: boolean\n}\n\nconst FileTrigger: React.FC<FileTriggerProps> = ({\n    variant = 'primary',\n    withIcon = true,\n    ...props\n}) => {\n    return (\n        <>\n            <Primitive.FileTrigger {...props}>\n                <Button isDisabled={props.isDisabled} variant={variant}>\n                    {withIcon && (\n                        <>\n                            {props.defaultCamera ? (\n                                <Camera />\n                            ) : props.acceptDirectory ? (\n                                <Folder />\n                            ) : (\n                                <Paperclip className='rotate-45' />\n                            )}\n                        </>\n                    )}\n                    {props.children ? (\n                        props.children\n                    ) : (\n                        <>\n                            {props.allowsMultiple\n                                ? 'Browse a files'\n                                : props.acceptDirectory\n                                  ? 'Browse'\n                                  : 'Browse a file'}\n                            ...\n                        </>\n                    )}\n                </Button>\n            </Primitive.FileTrigger>\n        </>\n    )\n}\n\nexport { FileTrigger }\n",
    "type": "ui"
  },
  "radio": {
    "component": "@/components/ui/radio",
    "raw": "'use client'\n\nimport { type ReactNode } from 'react'\n\nimport { cn } from '@/lib/utils'\nimport * as Primitive from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Description, FieldError, Label } from './field'\n\ninterface RadioGroupProps extends Omit<Primitive.RadioGroupProps, 'children'> {\n    label?: string\n    children?: ReactNode\n    description?: string\n    errorMessage?: string | ((validation: Primitive.ValidationResult) => string)\n}\n\nconst RadioGroup = (props: RadioGroupProps) => {\n    return (\n        <Primitive.RadioGroup\n            {...props}\n            className={cn('group flex flex-col gap-2', props.className)}\n        >\n            <Label>{props.label}</Label>\n            <div className='flex gap-2 group-orientation-horizontal:gap-4 group-orientation-vertical:flex-col'>\n                {props.children}\n            </div>\n            {props.description && <Description>{props.description}</Description>}\n            <FieldError>{props.errorMessage}</FieldError>\n        </Primitive.RadioGroup>\n    )\n}\n\nconst radioStyles = tv({\n    base: 'size-4 rounded-full border border-input bg-background transition',\n    variants: {\n        isSelected: {\n            true: 'border-[4.5px] border-primary'\n        },\n        isFocused: {\n            true: [\n                'border-primary bg-primary/20 ring-4 ring-primary/20',\n                'group-invalid:border-danger group-invalid:bg-danger/20 group-invalid:ring-danger/20'\n            ]\n        },\n        isInvalid: {\n            true: 'border-danger bg-danger/20'\n        },\n        isDisabled: {\n            true: 'opacity-50'\n        }\n    }\n})\n\nconst Radio = (props: Primitive.RadioProps) => {\n    return (\n        <Primitive.Radio\n            {...props}\n            className={cn(\n                'group flex items-center gap-2 text-sm text-foreground transition disabled:text-foreground/70',\n                props.className\n            )}\n        >\n            {(renderProps) => (\n                <>\n                    <div className={radioStyles(renderProps)} />\n                    {props.children}\n                </>\n            )}\n        </Primitive.Radio>\n    )\n}\nexport { Radio, RadioGroup }\n",
    "type": "ui"
  },
  "combo-box": {
    "component": "@/components/ui/combo-box",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { cn } from '@/lib/utils'\nimport { ChevronDown } from 'lucide-react'\nimport * as Primitive from 'react-aria-components'\n\nimport { Button } from './button'\nimport { DropdownItem, DropdownSection } from './dropdown'\nimport { Description, FieldError, FieldGroup, Input, Label } from './field'\nimport { ListBox } from './list-box'\nimport { Popover } from './popover'\n\ninterface ComboBoxProps<T extends object>\n    extends Omit<Primitive.ComboBoxProps<T>, 'children'> {\n    label?: string\n    placeholder?: string\n    description?: string | null\n    errorMessage?: string | ((validation: Primitive.ValidationResult) => string)\n    children: React.ReactNode | ((item: T) => React.ReactNode)\n}\n\nconst ComboBox = <T extends object>({\n    label,\n    description,\n    errorMessage,\n    children,\n    placeholder,\n    items,\n    ...props\n}: ComboBoxProps<T>) => {\n    return (\n        <Primitive.ComboBox\n            menuTrigger='focus'\n            {...props}\n            className={cn('group flex w-full flex-col gap-1', props.className)}\n        >\n            <Label>{label}</Label>\n            <FieldGroup className='pl-0'>\n                <Input className='pl-2.5' placeholder={placeholder} />\n                <Button\n                    size='icon'\n                    variant='ghost'\n                    className='h-7 w-8 rounded outline-offset-0 active:bg-transparent hover:bg-transparent pressed:bg-transparent'\n                >\n                    <ChevronDown\n                        aria-hidden\n                        className='text-muted-foreground transition duration-200 group-open:rotate-180 group-open:text-foreground'\n                    />\n                </Button>\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n            <Popover.Picker>\n                <ListBox.Picker items={items}>{children}</ListBox.Picker>\n            </Popover.Picker>\n        </Primitive.ComboBox>\n    )\n}\n\nconst ComboBoxItem = DropdownItem\nconst ComboBoxSection = DropdownSection\n\nComboBox.Item = ComboBoxItem\nComboBox.Section = ComboBoxSection\n\nexport { ComboBox }\n",
    "type": "ui"
  },
  "popover": {
    "component": "@/components/ui/popover",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport * as Primitive from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Modal } from './modal'\n\nexport interface PopoverProps extends Omit<Primitive.PopoverProps, 'children'> {\n    showArrow?: boolean\n    children: React.ReactNode\n}\n\nconst styles = tv({\n    base: 'max-w-xs rounded-xl border bg-background bg-clip-padding p-4 text-foreground shadow-lg dark:backdrop-blur-2xl dark:backdrop-saturate-200 sm:max-w-3xl',\n    variants: {\n        isEntering: {\n            true: 'duration-200 ease-out animate-in fade-in placement-left:slide-in-from-right-1 placement-right:slide-in-from-left-1 placement-top:slide-in-from-bottom-1 placement-bottom:slide-in-from-top-1'\n        },\n        isExiting: {\n            true: 'duration-150 ease-in animate-out fade-out placement-left:slide-out-to-right-1 placement-right:slide-out-to-left-1 placement-top:slide-out-to-bottom-1 placement-bottom:slide-out-to-top-1'\n        }\n    }\n})\n\ninterface PopoverSubComponents {\n    Content: typeof PopoverContent\n    Trigger: typeof PopoverTrigger\n    Close: typeof PopoverClose\n    Overlay: typeof PopoverOverlay\n    Footer: typeof PopoverFooter\n    Header: typeof PopoverHeader\n    Title: typeof PopoverTitle\n    Description: typeof PopoverDescription\n    Body: typeof PopoverBody\n    Picker: typeof PopoverPicker\n}\n\ntype PopoverComponent = React.FC<Primitive.DialogTriggerProps> & PopoverSubComponents\n\nconst Popover: PopoverComponent = (props: Primitive.DialogTriggerProps) => (\n    <Primitive.DialogTrigger {...props} />\n)\nconst PopoverTrigger = (props: Primitive.ButtonProps) => <Primitive.Button {...props} />\nconst PopoverClose = Modal.Close\nconst PopoverOverlay = Modal.Overlay\nconst PopoverFooter = Modal.Footer\nconst PopoverHeader = Modal.Header\nconst PopoverTitle = Modal.Title\nconst PopoverDescription = Modal.Description\nconst PopoverBody = Modal.Body\n\nconst PopoverContent = ({\n    children,\n    showArrow = true,\n    className,\n    ...props\n}: PopoverProps) => {\n    const popoverContext = Primitive.useSlottedContext(Primitive.PopoverContext)!\n    const isSubmenu = popoverContext?.trigger === 'SubmenuTrigger'\n    let offset = showArrow ? 12 : 8\n    offset = isSubmenu ? offset - 6 : offset\n    return (\n        <Primitive.Popover\n            offset={offset}\n            {...props}\n            className={Primitive.composeRenderProps(className, (className, renderProps) =>\n                styles({ ...renderProps, className })\n            )}\n        >\n            {showArrow && (\n                <Primitive.OverlayArrow className='group'>\n                    <svg\n                        width={12}\n                        height={12}\n                        viewBox='0 0 12 12'\n                        className='block fill-background stroke-border group-placement-left:-rotate-90 group-placement-right:rotate-90 group-placement-bottom:rotate-180'\n                    >\n                        <path d='M0 0 L6 6 L12 0' />\n                    </svg>\n                </Primitive.OverlayArrow>\n            )}\n            {children}\n        </Primitive.Popover>\n    )\n}\n\nconst PopoverPicker = ({ showArrow = false, children, ...props }: PopoverProps) => {\n    return (\n        <PopoverContent\n            showArrow={showArrow}\n            className='max-h-72 min-w-[--trigger-width] p-0'\n            {...props}\n        >\n            {children}\n        </PopoverContent>\n    )\n}\n\nPopover.Body = PopoverBody\nPopover.Close = PopoverClose\nPopover.Content = PopoverContent\nPopover.Description = PopoverDescription\nPopover.Footer = PopoverFooter\nPopover.Header = PopoverHeader\nPopover.Overlay = PopoverOverlay\nPopover.Picker = PopoverPicker\nPopover.Title = PopoverTitle\nPopover.Trigger = PopoverTrigger\n\nexport { Popover }\n",
    "type": "ui"
  },
  "multi-select": {
    "component": "@/components/ui/multi-select",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { cn } from '@/lib/utils'\nimport * as Primitive from 'cmdk'\n\nimport { Badge } from './badge'\nimport { Description, FieldError, Label } from './field'\n\ninterface ItemProps {\n    label: string\n    value: string\n}\n\ninterface Props {\n    items: ItemProps[]\n    placeholder?: string\n    selected: ItemProps[]\n    setSelected: React.Dispatch<React.SetStateAction<ItemProps[]>>\n    max?: number\n    className?: string\n    description?: string\n    errorMessage?: string\n    label: string\n}\n\nexport function MultiSelect({\n    label,\n    description,\n    errorMessage,\n    items,\n    placeholder = 'Select items...',\n    max = 5,\n    selected,\n    setSelected,\n    className\n}: Props) {\n    const inputRef = React.useRef<HTMLInputElement>(null)\n    const [open, setOpen] = React.useState(false)\n    const [inputValue, setInputValue] = React.useState('')\n    const handleUnselect = React.useCallback(\n        (item: ItemProps) => {\n            setSelected((prev) => prev.filter((s) => s.value !== item.value))\n        },\n        [setSelected]\n    )\n\n    const handleKeyDown = React.useCallback(\n        (e: React.KeyboardEvent<HTMLDivElement>) => {\n            const input = inputRef.current\n            if (input) {\n                if (e.key === 'Delete' || e.key === 'Backspace') {\n                    if (input.value === '') {\n                        setSelected((prev) => {\n                            const newSelected = [...prev]\n                            newSelected.pop()\n                            return newSelected\n                        })\n                    }\n                }\n\n                if (e.key === 'Escape') {\n                    input.blur()\n                }\n            }\n        },\n        [setSelected]\n    )\n    const selectables = items.filter((item) => !selected.includes(item))\n    React.useEffect(() => {\n        if (selected.length >= max) {\n            setOpen(false)\n        }\n    }, [selected, max])\n\n    const id = React.useId()\n    return (\n        <div className={cn('group flex w-full flex-col gap-1', className)}>\n            <Label onClick={() => inputRef.current?.focus()}>{label}</Label>\n            <Primitive.Command\n                onKeyDown={handleKeyDown}\n                className='overflow-visible bg-transparent'\n            >\n                <div className='group rounded-lg border border-input bg-background px-2 py-[0.55rem] text-sm transition duration-200 focus-within:border-primary/70 focus-within:ring-[0.20rem] focus-within:ring-primary/20 focus-within:ring-offset-0'>\n                    <div className='flex flex-wrap gap-1'>\n                        {selected.map((item, index) => {\n                            return (\n                                <Badge\n                                    key={index}\n                                    className='inline-flex items-center rounded-sm px-1'\n                                >\n                                    <span className='text-xs'>{item.label}</span>\n                                    <button\n                                        aria-label={`Remove ${item.label} option`}\n                                        aria-roledescription='button to remove option'\n                                        type='button'\n                                        className='inline-grid size-4 place-content-center rounded-full border border-transparent focus:border-foreground focus:text-foreground focus:outline-none'\n                                        onKeyDown={(e) => {\n                                            if (e.key === 'Enter') {\n                                                handleUnselect(item)\n                                            }\n                                        }}\n                                        onMouseDown={(e) => {\n                                            e.preventDefault()\n                                            e.stopPropagation()\n                                        }}\n                                        onClick={() => handleUnselect(item)}\n                                    >\n                                        <span className='sr-only'>\n                                            Remove {item.label} option\n                                        </span>\n                                        <svg\n                                            className='size-3.5 hover:text-foreground'\n                                            xmlns='http://www.w3.org/2000/svg'\n                                            viewBox='0 0 24 24'\n                                        >\n                                            <g\n                                                fill='none'\n                                                stroke='currentColor'\n                                                strokeLinecap='round'\n                                                strokeLinejoin='round'\n                                                strokeWidth={2}\n                                            >\n                                                <circle cx={12} cy={12} r={10}></circle>\n                                                <path d='m15 9l-6 6m0-6l6 6'></path>\n                                            </g>\n                                        </svg>\n                                    </button>\n                                </Badge>\n                            )\n                        })}\n\n                        <Primitive.CommandInput\n                            aria-labelledby='multi-select-label'\n                            ref={inputRef}\n                            value={inputValue}\n                            onValueChange={setInputValue}\n                            onBlur={() => setOpen(false)}\n                            onFocus={() => {\n                                if (selected.length < max) {\n                                    setOpen(true)\n                                }\n                            }}\n                            placeholder={\n                                selected.length >= max\n                                    ? 'Remove one to select more'\n                                    : placeholder\n                            }\n                            className='ml-0.5 flex-1 bg-transparent outline-none placeholder:text-muted-foreground'\n                        />\n                    </div>\n                </div>\n                <div className='relative'>\n                    <Primitive.CommandList>\n                        {open && selectables.length > 0 ? (\n                            <div className='absolute top-0 z-10 mt-2 max-h-72 w-full overflow-y-auto overflow-x-hidden rounded-lg border bg-background p-1 text-foreground shadow-md outline-none animate-in'>\n                                <Primitive.CommandGroup className='h-full overflow-auto p-0'>\n                                    {selectables.map((item) => (\n                                        <Primitive.CommandItem\n                                            disabled={selected.includes(item)}\n                                            key={item.value}\n                                            onMouseDown={(e) => {\n                                                e.preventDefault()\n                                                e.stopPropagation()\n                                            }}\n                                            onSelect={() => {\n                                                setInputValue('')\n                                                setSelected((prev) => [...prev, item])\n                                            }}\n                                            className='relative flex w-full cursor-pointer justify-between rounded-md p-2 text-sm transition-colors data-[selected=true]:bg-primary data-[selected=true]:text-primary-foreground'\n                                        >\n                                            {item.label}\n                                        </Primitive.CommandItem>\n                                    ))}\n                                </Primitive.CommandGroup>\n                            </div>\n                        ) : null}\n                    </Primitive.CommandList>\n                </div>\n            </Primitive.Command>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </div>\n    )\n}\n",
    "type": "ui"
  },
  "link": {
    "component": "@/components/ui/link",
    "raw": "'use client'\n\nimport { cn } from '@/lib/utils'\nimport * as Primitive from 'react-aria-components'\n\nconst Link = (props: Primitive.LinkProps) => (\n    <Primitive.Link\n        {...props}\n        className={cn(\n            'rounded transition hover:text-accent focus:outline-none disabled:cursor-default disabled:text-muted-foreground disabled:no-underline',\n            props.className\n        )}\n    />\n)\n\nexport { Link }\n",
    "type": "ui"
  },
  "avatar": {
    "component": "@/components/ui/avatar",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nconst avatarStyles = tv({\n    base: [\n        'inline-grid shrink-0 bg-secondary align-middle [--avatar-radius:20%] [--ring-opacity:20%] *:col-start-1 *:row-start-1',\n        'outline outline-1 -outline-offset-1 outline-black/[--ring-opacity] dark:outline-white/[--ring-opacity]'\n    ],\n    variants: {\n        size: {\n            sm: 'size-6',\n            md: 'size-8',\n            lg: 'size-10'\n        },\n        shape: {\n            square: 'rounded-[--avatar-radius] *:rounded-[--avatar-radius]',\n            circle: 'rounded-full *:rounded-full'\n        }\n    },\n\n    defaultVariants: {\n        shape: 'circle',\n        size: 'md'\n    }\n})\n\ninterface AvatarProps\n    extends React.ComponentPropsWithoutRef<'span'>,\n        VariantProps<typeof avatarStyles> {\n    src?: string | null\n    initials?: string\n    alt?: string\n    className?: string\n}\n\nconst avatarGroupStyles = tv({\n    base: 'flex items-center justify-center -space-x-2 [&_[data-slot=avatar]]:ring-2 [&_[data-slot=avatar]]:ring-background'\n})\n\ninterface AvatarGroupProps\n    extends React.HTMLAttributes<HTMLDivElement>,\n        VariantProps<typeof avatarGroupStyles> {\n    children: React.ReactNode\n}\n\nconst AvatarGroup = ({ className, ...props }: AvatarGroupProps) => {\n    return <div className={avatarGroupStyles({ className })} {...props} />\n}\n\nconst Avatar = ({\n    src = null,\n    initials,\n    alt = '',\n    className,\n    shape,\n    size,\n    ...props\n}: AvatarProps) => {\n    return (\n        <span\n            data-slot='avatar'\n            {...props}\n            className={avatarStyles({ shape, size, className })}\n        >\n            {initials && (\n                <svg\n                    className='select-none fill-current text-[48px] font-medium uppercase'\n                    viewBox='0 0 100 100'\n                    aria-hidden={alt ? undefined : 'true'}\n                >\n                    {alt && <title>{alt}</title>}\n                    <text\n                        x='50%'\n                        y='50%'\n                        alignmentBaseline='middle'\n                        dominantBaseline='middle'\n                        textAnchor='middle'\n                        dy='.125em'\n                    >\n                        {initials}\n                    </text>\n                </svg>\n            )}\n            {/* eslint-disable-next-line @next/next/no-img-element */}\n            {src && <img src={src} alt={alt} />}\n        </span>\n    )\n}\n\nexport { Avatar, AvatarGroup }\n",
    "type": "ui"
  },
  "loading-dots": {
    "component": "@/components/ui/loading-dots",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nconst dots = 'mx-[1px] inline-block size-[0.3125rem] animate-blink rounded-md'\n\nexport const LoadingDots = ({ className }: { className: string }) => {\n    return (\n        <span className='mx-2 inline-flex items-center'>\n            <span className={cn(dots, className)} />\n            <span className={cn(dots, 'animation-delay-[200ms]', className)} />\n            <span className={cn(dots, 'animation-delay-[400ms]', className)} />\n        </span>\n    )\n}\n",
    "type": "ui"
  },
  "color": {
    "component": "@/components/ui/color",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { cn } from '@/lib/utils'\nimport { parseColor } from '@react-stately/color'\nimport * as Primitive from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Description, FieldError, FieldGroup, Input, Label } from './field'\nimport { Slider } from './slider'\n\ninterface ColorFieldProps extends Primitive.ColorFieldProps {\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: Primitive.ValidationResult) => string)\n    placeholder?: string\n    prefix?: React.ReactNode\n    suffix?: React.ReactNode\n    isLoading?: boolean\n}\n\nconst ColorField = ({\n    label,\n    description,\n    errorMessage,\n    placeholder,\n    prefix,\n    suffix,\n    isLoading,\n    ...props\n}: ColorFieldProps) => {\n    return (\n        <Primitive.ColorField\n            {...props}\n            className={cn('group w-full flex flex-col gap-1', props.className)}\n        >\n            {label && <Label>{label}</Label>}\n            <FieldGroup\n                data-loading={isLoading ? 'true' : undefined}\n                className='flex group-invalid:border-danger group-disabled:bg-secondary group-disabled:opacity-70 items-center group-invalid:focus-within:ring-danger/20'\n            >\n                {prefix ? <span className='atrs isPfx'>{prefix}</span> : null}\n                <Input className='px-2.5' placeholder={placeholder} />\n                {suffix ? <span className='atrs isSfx'>{suffix}</span> : null}\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </Primitive.ColorField>\n    )\n}\n\nconst colorAreaStyles = tv({\n    base: 'size-48 rounded-lg border border-background shrink-0 disabled:opacity-50'\n})\n\ninterface ColorAreaProps extends React.ComponentProps<typeof Primitive.ColorArea> {}\n\nconst ColorArea = ({ className, ...props }: ColorAreaProps) => {\n    return (\n        <Primitive.ColorArea\n            {...props}\n            className={Primitive.composeRenderProps(className, (className, renderProps) =>\n                colorAreaStyles({\n                    ...renderProps,\n                    className\n                })\n            )}\n        />\n    )\n}\n\ninterface ColorThumbProps extends Primitive.ColorThumbProps {}\n\nconst colorThumbStyles = tv({\n    base: 'size-5 shadow rounded-full ring-1 ring-inset ring-offset-2 ring-black/50 border border-black/50',\n    variants: {\n        isFocusVisible: {\n            true: 'size-6'\n        }\n    }\n})\n\nconst ColorThumb = ({ className, ...props }: ColorThumbProps) => {\n    return (\n        <Primitive.ColorThumb\n            className={Primitive.composeRenderProps(className, (className, renderProps) =>\n                colorThumbStyles({\n                    ...renderProps,\n                    className\n                })\n            )}\n            {...props}\n        />\n    )\n}\n\nconst colorSwatchPickerItemStyles = tv({\n    base: 'size-8 rounded-md cspis disabled:opacity-50'\n})\n\nconst ColorSwatchPickerItem = ({\n    className,\n    ...props\n}: Primitive.ColorSwatchPickerItemProps) => {\n    return (\n        <Primitive.ColorSwatchPickerItem\n            className={Primitive.composeRenderProps(className, (className, renderProps) =>\n                colorSwatchPickerItemStyles({\n                    ...renderProps,\n                    className\n                })\n            )}\n            {...props}\n        >\n            <ColorSwatch\n                isBright={isBrightColor(props.color ?? '')}\n                className='size-[inherit] cocspip'\n            />\n        </Primitive.ColorSwatchPickerItem>\n    )\n}\n\ninterface ColorSwatchProps extends Primitive.ColorSwatchProps {\n    isBright?: boolean\n}\n\nconst ColorSwatch = ({ isBright, className, ...props }: ColorSwatchProps) => {\n    const needRing = props.color ? isBrightColor(props.color) : isBright\n    return (\n        <Primitive.ColorSwatch\n            className={cn(\n                'size-8 cs rounded-md',\n                needRing\n                    ? 'ring-1 ring-inset ring-black/10'\n                    : 'dark:ring-1 dark:ring-inset dark:ring-white/10',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nconst hexToRgb = (hex: string): { r: number; g: number; b: number } | null => {\n    const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i\n    hex = hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b)\n\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n    return result\n        ? {\n              r: parseInt(result[1], 16),\n              g: parseInt(result[2], 16),\n              b: parseInt(result[3], 16)\n          }\n        : null\n}\n\nconst hsbToRgb = (\n    h: number,\n    s: number,\n    b: number\n): { r: number; g: number; b: number } => {\n    s /= 100\n    b /= 100\n    const k = (n: number) => (n + h / 60) % 6\n    const f = (n: number) => b * (1 - s * Math.max(0, Math.min(k(n), 4 - k(n), 1)))\n    return {\n        r: Math.round(255 * f(5)),\n        g: Math.round(255 * f(3)),\n        b: Math.round(255 * f(1))\n    }\n}\n\nconst luminance = (r: number, g: number, b: number): number => {\n    const a = [r, g, b].map((v) => {\n        v /= 255\n        return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4)\n    })\n    return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722\n}\n\nconst isBrightColor = (color: any): boolean => {\n    let r, g, b\n\n    if (typeof color === 'string') {\n        if (color.startsWith('#')) {\n            const rgb = hexToRgb(color)\n            if (rgb) {\n                r = rgb.r\n                g = rgb.g\n                b = rgb.b\n            } else {\n                return false\n            }\n        } else if (color.startsWith('rgb')) {\n            const rgbValues = color.match(/\\d+/g)\n            if (rgbValues) {\n                r = parseInt(rgbValues[0], 10)\n                g = parseInt(rgbValues[1], 10)\n                b = parseInt(rgbValues[2], 10)\n            } else {\n                return false\n            }\n        } else {\n            const namedColors: Record<string, string> = {\n                white: '#ffffff',\n                black: '#000000'\n            }\n            const hex = namedColors[color.toLowerCase()]\n            if (hex) {\n                const rgb = hexToRgb(hex)\n                if (rgb) {\n                    r = rgb.r\n                    g = rgb.g\n                    b = rgb.b\n                } else {\n                    return false\n                }\n            } else {\n                return false\n            }\n        }\n    } else if (\n        typeof color === 'object' &&\n        'hue' in color &&\n        'saturation' in color &&\n        'brightness' in color\n    ) {\n        const rgb = hsbToRgb(color.hue, color.saturation, color.brightness)\n        r = rgb.r\n        g = rgb.g\n        b = rgb.b\n    } else {\n        return false\n    }\n\n    const lum = luminance(r, g, b)\n    return lum > 0.75\n}\n\nconst defaultColor = parseColor('hsl(216, 98%, 52%)')\n\ninterface ColorSliderProps extends Primitive.ColorSliderProps {\n    label?: string\n    description?: string\n    showOutput?: boolean\n}\n\nconst ColorSlider = ({\n    className,\n    showOutput = true,\n    label,\n    description,\n    ...props\n}: ColorSliderProps) => {\n    return (\n        <Primitive.ColorSlider\n            className={cn('flex disabled:opacity-50 w-full flex-col gap-1', className)}\n            {...props}\n        >\n            <div className='flex items-center gap-2'>\n                {label && <Label className='text-sm [grid-area:label]'>{label}</Label>}\n                {showOutput && (\n                    <Primitive.SliderOutput className='text-sm ml-auto [grid-area:output]' />\n                )}\n            </div>\n            <Slider.Track className='cstrk rounded-md orientation-horizontal:h-8'>\n                <ColorThumb className='csth top-1/2' />\n            </Slider.Track>\n            {description && <Description>{description}</Description>}\n        </Primitive.ColorSlider>\n    )\n}\n\nconst ColorWheel = Primitive.ColorWheel\nconst ColorWheelTrack = Primitive.ColorWheelTrack\nconst ColorSwatchPicker = Primitive.ColorSwatchPicker\n\nexport {\n    ColorArea,\n    ColorField,\n    ColorSlider,\n    ColorSwatch,\n    ColorSwatchPicker,\n    ColorSwatchPickerItem,\n    ColorThumb,\n    ColorWheel,\n    ColorWheelTrack,\n    defaultColor,\n    isBrightColor\n}\n",
    "type": "ui"
  },
  "snippet": {
    "component": "@/components/ui/snippet",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { cn } from '@/lib/utils'\nimport { AnimatePresence, motion } from 'framer-motion'\nimport { Check, ClipboardIcon } from 'lucide-react'\nimport { toast } from 'sonner'\n\nimport { Button, type ButtonProps } from './button'\n\nconst snippetVariants = {\n    hidden: { opacity: 0, scale: 0.5 },\n    visible: { opacity: 1, scale: 1 }\n}\n\ninterface SnippetProps extends React.HTMLAttributes<HTMLDivElement> {\n    text: string\n}\n\nconst Snippet: React.FC<SnippetProps> = ({ className, text, ...props }) => {\n    const [copied, setCopied] = React.useState(false)\n\n    const handleCopy = async () => {\n        if (navigator.clipboard && window.isSecureContext) {\n            try {\n                await navigator.clipboard.writeText(text)\n                setCopied(true)\n                setTimeout(() => setCopied(false), 2000) // Reset the copied state after 2 seconds\n            } catch (error) {\n                toast.error('Failed to copy to clipboard')\n            }\n        } else {\n            toast.error('Failed to copy to clipboard')\n        }\n    }\n\n    return (\n        <div\n            {...props}\n            className={cn(\n                'relative flex items-center justify-between rounded-lg border bg-foreground py-2.5 pl-3 pr-2.5 font-mono text-sm [&>svg:hover]:text-foreground [&>svg]:text-muted-foreground [&>svg]:transition [&_svg]:shrink-0',\n                className\n            )}\n        >\n            <span className='mr-6'>{text}</span>\n            <Button\n                className='size-7 border border-zinc-700 bg-zinc-800 text-white backdrop-blur-lg hover:bg-zinc-700'\n                aria-label='Copy imports statement'\n                size='icon'\n                variant='outline'\n                onPress={handleCopy}\n            >\n                <AnimatePresence mode='wait' initial={false}>\n                    {copied ? (\n                        <motion.span\n                            key='checkmark'\n                            variants={snippetVariants}\n                            initial='hidden'\n                            animate='visible'\n                            exit='hidden'\n                        >\n                            <Check />\n                        </motion.span>\n                    ) : (\n                        <motion.span\n                            key='copy'\n                            variants={snippetVariants}\n                            initial='hidden'\n                            animate='visible'\n                            exit='hidden'\n                        >\n                            <ClipboardIcon />\n                        </motion.span>\n                    )}\n                </AnimatePresence>\n            </Button>\n        </div>\n    )\n}\n\ninterface CopyButtonProps extends ButtonProps {\n    isCopied?: boolean\n    ariaLabel?: string\n    initialIcon?: React.ReactNode\n    copiedIcon?: React.ReactNode\n}\n\nconst CopyButton = ({\n    initialIcon,\n    copiedIcon,\n    ariaLabel = 'Copy',\n    isCopied,\n    ...props\n}: CopyButtonProps) => {\n    return (\n        <Button\n            className='size-7 border border-zinc-700 bg-zinc-800 text-white backdrop-blur-lg hover:bg-zinc-700'\n            aria-label={ariaLabel}\n            size='icon'\n            variant='outline'\n            {...props}\n        >\n            <AnimatePresence mode='wait' initial={false}>\n                {isCopied ? (\n                    <motion.span\n                        key='checkmark-import'\n                        variants={snippetVariants}\n                        initial='hidden'\n                        animate='visible'\n                        exit='hidden'\n                    >\n                        {copiedIcon ?? <Check />}\n                    </motion.span>\n                ) : (\n                    <motion.span\n                        key='copy-import'\n                        variants={snippetVariants}\n                        initial='hidden'\n                        animate='visible'\n                        exit='hidden'\n                    >\n                        {initialIcon ?? <ClipboardIcon />}\n                    </motion.span>\n                )}\n            </AnimatePresence>\n        </Button>\n    )\n}\n\nexport { CopyButton, Snippet, snippetVariants, type SnippetProps }\n",
    "type": "ui"
  },
  "drawer": {
    "component": "@/components/ui/drawer",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { cn } from '@/lib/utils'\nimport * as Framer from 'framer-motion'\nimport * as Primitive from 'react-aria-components'\n\nimport { Modal } from './modal'\n\nconst MotionModal = Framer.motion(Primitive.Modal)\nconst MotionModalOverlay = Framer.motion(Primitive.ModalOverlay)\n\nconst inertiaTransition: Framer.Inertia = {\n    type: 'inertia',\n    bounceStiffness: 300,\n    bounceDamping: 40,\n    timeConstant: 300\n}\n\nconst staticTransition = {\n    duration: 0.5,\n    ease: [0.32, 0.72, 0, 1]\n}\n\nconst DRAWER_MARGIN = 34\nconst DRAWER_RADIUS = 12\n\ninterface DrawerContextType {\n    isOpen: boolean\n    openDrawer: () => void\n    closeDrawer: () => void\n    withNotch?: boolean\n}\n\nconst DrawerContext = React.createContext<DrawerContextType | undefined>(undefined)\n\nconst useDrawerContext = () => {\n    const context = React.useContext(DrawerContext)\n    if (context === undefined) {\n        throw new Error('useDrawerContext must be used within a Drawer')\n    }\n    return context\n}\n\nconst DrawerTrigger = (props: Primitive.ButtonProps) => {\n    const { openDrawer } = useDrawerContext()\n\n    return <Primitive.Button onPress={openDrawer} {...props} />\n}\n\ninterface DrawerProps {\n    children: React.ReactNode\n    isOpen?: boolean\n    withNotch?: boolean\n    onOpenChange?: (isOpen: boolean) => void\n}\n\nconst Drawer = ({\n    children,\n    withNotch = true,\n    isOpen: controlledIsOpen,\n    onOpenChange\n}: DrawerProps) => {\n    const [internalIsOpen, setInternalIsOpen] = React.useState(false)\n\n    const isControlled = controlledIsOpen !== undefined\n    const isOpen = isControlled ? controlledIsOpen : internalIsOpen\n\n    React.useEffect(() => {\n        if (isControlled && onOpenChange) {\n            onOpenChange(isOpen)\n        }\n    }, [isOpen, isControlled, onOpenChange])\n\n    const openDrawer = () => {\n        if (isControlled && onOpenChange) {\n            onOpenChange(true)\n        } else {\n            setInternalIsOpen(true)\n        }\n    }\n\n    const closeDrawer = () => {\n        if (isControlled && onOpenChange) {\n            onOpenChange(false)\n        } else {\n            setInternalIsOpen(false)\n        }\n    }\n\n    if (typeof window === 'undefined') {\n        return null\n    }\n\n    return (\n        <DrawerContext.Provider value={{ isOpen, openDrawer, closeDrawer, withNotch }}>\n            {children}\n        </DrawerContext.Provider>\n    )\n}\n\ninterface DrawerContentProps\n    extends Omit<React.ComponentProps<typeof Primitive.Modal>, 'children'> {\n    children?: Primitive.DialogProps['children']\n}\n\nconst DrawerContent = ({ children, className, ...props }: DrawerContentProps) => {\n    const { isOpen, closeDrawer, withNotch } = useDrawerContext()\n\n    const h = window.innerHeight - DRAWER_MARGIN\n    const y = Framer.useMotionValue(h)\n    const bgOpacity = Framer.useTransform(y, [0, h], [0.5, 0])\n    const bg = Framer.useMotionTemplate`rgba(0, 0, 0, ${bgOpacity})`\n\n    const bodyScale = Framer.useTransform(\n        y,\n        [0, h],\n        [(window.innerWidth - DRAWER_MARGIN) / window.innerWidth, 1]\n    )\n    const bodyTranslate = Framer.useTransform(\n        y,\n        [0, h],\n        [DRAWER_MARGIN - DRAWER_RADIUS, 0]\n    )\n    const bodyBorderRadius = Framer.useTransform(y, [0, h], [DRAWER_RADIUS, 0])\n    return (\n        <Framer.motion.div\n            style={{\n                scale: bodyScale,\n                borderRadius: bodyBorderRadius,\n                y: bodyTranslate,\n                transformOrigin: 'center 0'\n            }}\n        >\n            <Framer.AnimatePresence>\n                {isOpen && (\n                    <MotionModalOverlay\n                        isOpen // Force the modal to be open when AnimatePresence renders it.\n                        onOpenChange={closeDrawer}\n                        className='fixed inset-0 z-50'\n                        style={{ backgroundColor: bg as any }}\n                    >\n                        <MotionModal\n                            className={cn(\n                                'absolute bottom-0 w-full rounded-t-2xl bg-background shadow-lg ring-1 ring-foreground/20',\n                                className\n                            )}\n                            initial={{ y: h }}\n                            animate={{ y: 0 }}\n                            exit={{ y: h }}\n                            transition={staticTransition}\n                            style={{\n                                y,\n                                top: DRAWER_MARGIN,\n                                paddingBottom: window.screen.height // Extra padding at the bottom to account for rubber band scrolling.\n                            }}\n                            drag='y'\n                            dragConstraints={{ top: 0 }}\n                            onDragEnd={(e, { offset, velocity }) => {\n                                if (\n                                    offset.y > window.innerHeight * 0.75 ||\n                                    velocity.y > 10\n                                ) {\n                                    closeDrawer()\n                                } else {\n                                    Framer.animate(y, 0, {\n                                        ...inertiaTransition,\n                                        min: 0,\n                                        max: 0\n                                    })\n                                }\n                            }}\n                            {...props}\n                        >\n                            {/* drag affordance / notch */}\n                            {withNotch && (\n                                <div className='notch mx-auto mt-2 h-1.5 w-10 rounded-full bg-foreground/20' />\n                            )}\n                            <Primitive.Dialog className='mx-auto flex h-[calc(var(--visual-viewport-height)-4.5rem)] max-w-3xl flex-col justify-between overflow-y-auto px-4 pt-4 outline-none'>\n                                {(values) => (\n                                    <>\n                                        {typeof children === 'function'\n                                            ? children(values)\n                                            : children}\n                                    </>\n                                )}\n                            </Primitive.Dialog>\n                        </MotionModal>\n                    </MotionModalOverlay>\n                )}\n            </Framer.AnimatePresence>\n        </Framer.motion.div>\n    )\n}\n\nconst DrawerHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n    <div\n        className={cn('flex flex-col gap-y-1 text-center sm:text-left', className)}\n        {...props}\n    />\n)\n\nconst DrawerBody = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n    <div\n        className={cn('flex-1 overflow-y-auto overflow-x-hidden py-4', className)}\n        {...props}\n    />\n)\n\nconst DrawerFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n    <div\n        className={cn(\n            'flex shrink-0 flex-col-reverse gap-2 sm:flex-row sm:justify-between [&_button:first-child:nth-last-child(1)]:w-full',\n            className\n        )}\n        {...props}\n    />\n)\n\nconst DrawerTitle = ({ className, ...props }: Primitive.HeadingProps) => (\n    <Primitive.Heading\n        slot='title'\n        className={cn('text-lg font-semibold leading-none tracking-tight', className)}\n        {...props}\n    />\n)\n\nconst DrawerDescription = Modal.Description\nconst DrawerClose = Modal.Close\n\nDrawer.Trigger = DrawerTrigger\nDrawer.Body = DrawerBody\nDrawer.Close = DrawerClose\nDrawer.Header = DrawerHeader\nDrawer.Title = DrawerTitle\nDrawer.Description = DrawerDescription\nDrawer.Content = DrawerContent\nDrawer.Footer = DrawerFooter\n\nexport { Drawer }\n",
    "type": "ui"
  },
  "time-field": {
    "component": "@/components/ui/time-field",
    "raw": "'use client'\n\nimport { cn } from '@/lib/utils'\nimport * as Primitive from 'react-aria-components'\n\nimport { DateInput } from './date-field'\nimport { Description, FieldError, fieldGroupStyles, Label } from './field'\n\nexport interface TimeFieldProps<T extends Primitive.TimeValue>\n    extends Primitive.TimeFieldProps<T> {\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: Primitive.ValidationResult) => string)\n}\n\nexport function TimeField<T extends Primitive.TimeValue>({\n    label,\n    description,\n    errorMessage,\n    ...props\n}: TimeFieldProps<T>) {\n    return (\n        <Primitive.TimeField\n            {...props}\n            className={cn('flex flex-col gap-1', props.className)}\n        >\n            <Label>{label}</Label>\n            <DateInput\n                className={cn(\n                    'flex w-fit min-w-28 justify-around whitespace-nowrap p-2 font-mono lg:text-sm',\n                    fieldGroupStyles.base\n                )}\n            />\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </Primitive.TimeField>\n    )\n}\n",
    "type": "ui"
  },
  "card": {
    "component": "@/components/ui/card",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport * as Primitive from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Description } from './field'\n\nconst card = tv({\n    slots: {\n        root: 'rounded-md border bg-card text-card-foreground shadow-sm [&_table]:overflow-hidden',\n        header: 'flex flex-col space-y-1.5 px-6 py-5',\n        title: 'text-xl font-semibold leading-none tracking-tight',\n        description: 'text-base text-muted-foreground sm:text-sm',\n        content:\n            'px-6 pb-6 has-[table]:p-0 [&:has(table)]:border-t [&_.t-cel]:px-6 [&_.t-col]:px-6',\n        footer: 'flex items-center p-6 pt-0'\n    }\n})\n\nconst { root, header, title, description, content, footer } = card()\n\ninterface CardSubComponents {\n    Header: typeof CardHeader\n    Title: typeof CardTitle\n    Description: typeof CardDescription\n    Content: typeof CardContent\n    Footer: typeof CardFooter\n}\n\ntype CardComponent = React.ForwardRefExoticComponent<\n    React.HTMLAttributes<HTMLDivElement>\n> &\n    React.RefAttributes<HTMLDivElement> &\n    CardSubComponents\n\nconst Card: CardComponent = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n    <div ref={ref} className={root({ className })} {...props} />\n)) as CardComponent\nCard.displayName = 'Card'\n\nconst CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n    ({ className, ...props }, ref) => (\n        <div ref={ref} className={header({ className })} {...props} />\n    )\n)\nCardHeader.displayName = 'CardHeader'\n\nfunction CardTitle(props: Primitive.HeadingProps) {\n    return (\n        <Primitive.Heading className={title({ className: props.className })} {...props} />\n    )\n}\n\nfunction CardDescription(props: Primitive.TextProps) {\n    return (\n        <Description className={description({ className: props.className })} {...props} />\n    )\n}\n\nconst CardContent = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n    <div ref={ref} className={content({ className })} {...props} />\n))\nCardContent.displayName = 'CardContent'\n\nconst CardFooter = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n    ({ className, ...props }, ref) => (\n        <div ref={ref} className={footer({ className })} {...props} />\n    )\n)\nCardFooter.displayName = 'CardFooter'\n\nCard.Header = CardHeader\nCard.Title = CardTitle\nCard.Description = CardDescription\nCard.Content = CardContent\nCard.Footer = CardFooter\n\nexport { Card }\n",
    "type": "ui"
  },
  "tag-group": {
    "component": "@/components/ui/tag-group",
    "raw": "'use client'\n\nimport { createContext, useContext } from 'react'\n\nimport { cn } from '@/lib/utils'\nimport { X } from 'lucide-react'\nimport * as Primitive from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { badgeVariants } from './badge'\nimport { Description, Label } from './field'\n\ntype Variant = keyof typeof badgeVariants.variants.variant\nconst VariantContext = createContext<Variant>('primary')\n\nconst emptyColors = Object.keys(badgeVariants).reduce(\n    (acc, key) => {\n        acc[key] = ''\n        return acc\n    },\n    {} as Record<string, string>\n)\nconst tagStyles = tv({\n    base: [\n        badgeVariants.base,\n        'cursor-pointer select-none focus:outline-none disabled:cursor-default'\n    ],\n    variants: {\n        variant: {\n            ...emptyColors\n        },\n        shape: {\n            ...badgeVariants.variants.shape\n        },\n        allowsRemoving: {\n            true: 'pr-1'\n        },\n        isSelected: {\n            true: 'border-transparent bg-primary text-white'\n        },\n        isDisabled: {\n            true: 'opacity-50'\n        }\n    },\n    defaultVariants: {\n        shape: 'square'\n    },\n    compoundVariants: (Object.keys(badgeVariants) as Variant[]).map((variant) => ({\n        isSelected: false,\n        variant,\n        className: badgeVariants.variants.variant[variant]\n    }))\n})\n\nexport interface TagGroupProps<T>\n    extends Omit<Primitive.TagGroupProps, 'children'>,\n        Pick<Primitive.TagListProps<T>, 'items' | 'children' | 'renderEmptyState'> {\n    variant?: Variant\n    label?: string\n    description?: string\n    errorMessage?: string\n}\n\nexport interface TagProps extends Primitive.TagProps {\n    variant?: Variant\n}\n\nexport function TagGroup<T extends object>({\n    label,\n    description,\n    errorMessage,\n    items,\n    children,\n    renderEmptyState,\n    ...props\n}: TagGroupProps<T>) {\n    return (\n        <Primitive.TagGroup\n            {...props}\n            className={cn('flex flex-col gap-1', props.className)}\n        >\n            <Label>{label}</Label>\n            <VariantContext.Provider value={props.variant || 'primary'}>\n                <Primitive.TagList\n                    items={items}\n                    renderEmptyState={renderEmptyState}\n                    className='flex flex-wrap gap-1'\n                >\n                    {children}\n                </Primitive.TagList>\n            </VariantContext.Provider>\n            {description && <Description>{description}</Description>}\n            {errorMessage && (\n                <Primitive.Text slot='errorMessage' className='text-sm text-danger'>\n                    {errorMessage}\n                </Primitive.Text>\n            )}\n        </Primitive.TagGroup>\n    )\n}\n\nexport function Tag({ children, variant, ...props }: TagProps) {\n    const textValue = typeof children === 'string' ? children : undefined\n    const groupVariant = useContext(VariantContext)\n    return (\n        <Primitive.Tag\n            textValue={textValue}\n            {...props}\n            className={Primitive.composeRenderProps(\n                props.className,\n                (className, renderProps) =>\n                    tagStyles({\n                        ...renderProps,\n                        className: cn(\n                            'href' in props ? '' : 'focus:ring-1 focus:ring-primary/20',\n                            className\n                        ),\n                        variant: variant || groupVariant\n                    })\n            )}\n        >\n            {({ allowsRemoving }) => (\n                <>\n                    {children}\n                    {allowsRemoving && (\n                        <Primitive.Button\n                            slot='remove'\n                            className='flex cursor-default items-center justify-center rounded-full p-0.5 transition-[background-color] hover:bg-foreground/10 pressed:bg-foreground/20'\n                        >\n                            <X aria-hidden className='h-3 w-3 outline-none' />\n                        </Primitive.Button>\n                    )}\n                </>\n            )}\n        </Primitive.Tag>\n    )\n}\n",
    "type": "ui"
  },
  "switch": {
    "component": "@/components/ui/switch",
    "raw": "'use client'\n\nimport { cn } from '@/lib/utils'\nimport * as Primitive from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nconst trackStyles = tv({\n    base: 'mr-2 h-5 w-8 cursor-pointer rounded-full border-2 border-transparent bg-muted transition duration-200',\n    variants: {\n        variant: {\n            primary: 'group-selected:bg-primary',\n            secondary: 'group-selected:bg-secondary',\n            success: 'group-selected:bg-success',\n            danger: 'group-selected:bg-danger',\n            warning: 'group-selected:bg-warning',\n            info: 'group-selected:bg-info'\n        }\n    },\n    defaultVariants: {\n        variant: 'primary'\n    }\n})\n\ninterface SwitchProps extends Primitive.SwitchProps, VariantProps<typeof trackStyles> {}\n\nconst Switch = ({ children, variant, className, ...props }: SwitchProps) => {\n    return (\n        <Primitive.Switch\n            {...props}\n            className={(values) =>\n                cn(\n                    'group inline-flex touch-none items-center disabled:opacity-70 lg:text-sm',\n                    typeof className === 'function' ? className(values) : className\n                )\n            }\n            style={{ WebkitTapHighlightColor: 'transparent' }}\n        >\n            {(values) => (\n                <>\n                    <span className={trackStyles({ variant: variant })}>\n                        <span className='block size-4 origin-right rounded-full bg-white shadow transition-all duration-200 group-pressed:w-5 group-selected:ml-3 group-selected:group-data-[pressed]:ml-2' />\n                    </span>\n                    {typeof children === 'function' ? children(values) : children}\n                </>\n            )}\n        </Primitive.Switch>\n    )\n}\n\nexport { Switch }\n",
    "type": "ui"
  },
  "slider": {
    "component": "@/components/ui/slider",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { useSlotId } from '@react-aria/utils'\nimport * as Primitive from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { Description, Label } from './field'\n\nconst sliderStyles = tv({\n    slots: {\n        root: 'flex flex-col gap-2 orientation-horizontal:w-full orientation-vertical:h-64 orientation-vertical:items-center disabled:opacity-70',\n        track: [\n            'group/track relative cursor-pointer rounded-full bg-secondary disabled:cursor-default disabled:bg-muted',\n            'grow orientation-horizontal:h-2 orientation-horizontal:w-full orientation-vertical:w-2 orientation-vertical:flex-1'\n        ],\n        filler: [\n            'rounded-full bg-primary group-disabled/track:bg-foreground',\n            'group-orientation-horizontal/top-0 pointer-events-none absolute group-orientation-horizontal/track:h-full group-orientation-vertical/track:bottom-0 group-orientation-vertical/track:w-full'\n        ],\n        thumb: [\n            'outline-none focus:outline-none focus:ring-4 focus:ring-primary/20',\n            'rounded-full bg-white shadow-md transition-[width,height]',\n            'absolute left-[50%] top-[50%] block !-translate-x-1/2 !-translate-y-1/2',\n            'disabled:border disabled:border-secondary disabled:bg-secondary',\n            'orientation-horizontal:h-2 orientation-vertical:w-2',\n            'size-4 dragging:size-5'\n        ],\n        valueLabel: 'text-sm text-muted-foreground'\n    }\n})\n\nconst { filler, thumb, root } = sliderStyles()\n\ninterface SliderSubComponents {\n    Controls: typeof SliderControls\n    Filler: typeof SliderFiller\n    Thumb: typeof SliderThumb\n    Root: typeof SliderRoot\n    Track: typeof SliderTrack\n    ValueLabel: typeof SliderValueLabel\n}\n\ninterface SliderProps extends SliderRootProps, VariantProps<typeof sliderStyles> {\n    label?: Primitive.LabelProps['children']\n    description?: Primitive.TextProps['children']\n    showValue?: boolean | ((value: number[]) => string)\n}\n\ntype SliderComponent = React.ForwardRefExoticComponent<SliderProps> & SliderSubComponents\n\nconst Slider: SliderComponent = React.forwardRef<\n    React.ElementRef<typeof Primitive.Slider>,\n    SliderProps\n>(({ label, description, showValue = true, ...props }, ref) => (\n    <SliderRoot ref={ref} {...props}>\n        <div className='flex items-center justify-between gap-2'>\n            {label && <Label>{label}</Label>}\n            {(showValue || typeof showValue === 'function') && (\n                <SliderValueLabel>\n                    {({ state }) =>\n                        typeof showValue === 'function'\n                            ? showValue(state.values)\n                            : undefined\n                    }\n                </SliderValueLabel>\n            )}\n        </div>\n        <SliderControls />\n        {description && <Description>{description}</Description>}\n    </SliderRoot>\n)) as SliderComponent\nSlider.displayName = 'Slider'\n\ntype SliderRootProps = Primitive.SliderProps\nconst SliderRoot = React.forwardRef(\n    (props: SliderRootProps, ref: React.Ref<HTMLDivElement>) => {\n        const descriptionId = useSlotId()\n        return (\n            <Primitive.TextContext.Provider\n                value={{ slots: { description: { id: descriptionId } } }}\n            >\n                <Primitive.Slider\n                    ref={ref}\n                    aria-describedby={descriptionId}\n                    {...props}\n                    className={Primitive.composeRenderProps(\n                        props.className,\n                        (className) => root({ className })\n                    )}\n                />\n            </Primitive.TextContext.Provider>\n        )\n    }\n)\nSliderRoot.displayName = 'SliderRoot'\n\ntype SliderControlsProps = SliderTrackProps & VariantProps<typeof sliderStyles>\nconst SliderControls = (props: SliderControlsProps) => {\n    const { values } = React.useContext(Primitive.SliderStateContext)\n    return (\n        <SliderTrack {...props}>\n            <SliderFiller />\n            {values.map((_, i) => (\n                <SliderThumb key={i} index={i} />\n            ))}\n        </SliderTrack>\n    )\n}\n\ntype SliderTrackProps = Primitive.SliderTrackProps & VariantProps<typeof sliderStyles>\nconst SliderTrack = (props: SliderTrackProps) => {\n    const { track } = sliderStyles()\n    return (\n        <Primitive.SliderTrack\n            {...props}\n            className={Primitive.composeRenderProps(props.className, (className) =>\n                track({ className })\n            )}\n        />\n    )\n}\n\ntype SliderFillerProps = React.HTMLAttributes<HTMLDivElement>\nconst SliderFiller = (props: SliderFillerProps) => {\n    const { orientation, getThumbPercent, values } = React.useContext(\n        Primitive.SliderStateContext\n    )\n    return (\n        <div\n            {...props}\n            style={\n                values.length === 1\n                    ? orientation === 'horizontal'\n                        ? {\n                              width: `${getThumbPercent(0) * 100}%`\n                          }\n                        : { height: `${getThumbPercent(0) * 100}%` }\n                    : orientation === 'horizontal'\n                      ? {\n                            left: `${getThumbPercent(0) * 100}%`,\n                            width: `${Math.abs(getThumbPercent(0) - getThumbPercent(1)) * 100}%`\n                        }\n                      : {\n                            bottom: `${getThumbPercent(0) * 100}%`,\n                            height: `${Math.abs(getThumbPercent(0) - getThumbPercent(1)) * 100}%`\n                        }\n            }\n            className={filler({ className: props.className })}\n        />\n    )\n}\n\ntype SliderThumbProps = Primitive.SliderThumbProps & VariantProps<typeof sliderStyles>\nconst SliderThumb = (props: SliderThumbProps) => {\n    return (\n        <Primitive.SliderThumb\n            {...props}\n            className={Primitive.composeRenderProps(props.className, (className) =>\n                thumb({ className })\n            )}\n        />\n    )\n}\n\ntype LabelProps = Primitive.SliderOutputProps\nconst SliderValueLabel = (props: LabelProps) => {\n    const { valueLabel } = sliderStyles()\n    return (\n        <Primitive.SliderOutput\n            {...props}\n            className={Primitive.composeRenderProps(props.className, (className) =>\n                valueLabel({ className })\n            )}\n        >\n            {Primitive.composeRenderProps(\n                props.children,\n                (children, { state }) =>\n                    children ??\n                    state.values.map((_, i) => state.getThumbValueLabel(i)).join(' - ')\n            )}\n        </Primitive.SliderOutput>\n    )\n}\n\nSlider.Controls = SliderControls\nSlider.Filler = SliderFiller\nSlider.Thumb = SliderThumb\nSlider.Root = SliderRoot\nSlider.Track = SliderTrack\nSlider.ValueLabel = SliderValueLabel\n\nexport { Slider }\n",
    "type": "ui"
  },
  "list-box": {
    "component": "@/components/ui/list-box",
    "raw": "'use client'\n\nimport { cn } from '@/lib/utils'\nimport { MenuIcon } from 'lucide-react'\nimport * as Primitive from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { DropdownSection } from './dropdown'\n\nconst listBox = tv({\n    slots: {\n        root: 'border-surface-2 flex max-h-96 w-full min-w-72 flex-col overflow-auto overflow-y-auto rounded-xl border p-1 shadow-xl outline-none',\n        item: [\n            'my-0.5 cursor-pointer rounded-md p-2 text-base outline-none transition lg:text-sm',\n            'hover:bg-secondary', // hover\n            'focus:bg-secondary', // focus\n            'dragging:cursor-grab dragging:bg-secondary', // dragging\n            'selected:bg-primary selected:text-primary-foreground' // selected\n        ]\n    }\n})\n\nconst { root, item } = listBox()\n\nconst ListBox = <T extends object>({\n    children,\n    className,\n    ...props\n}: Primitive.ListBoxProps<T> & { className?: string }) => (\n    <Primitive.ListBox {...props} className={root({ className: className })}>\n        {children}\n    </Primitive.ListBox>\n)\n\nconst ListBoxItem = <T extends object>({\n    children,\n    className,\n    ...props\n}: Primitive.ListBoxItemProps<T> & {\n    className?: string\n}) => {\n    const textValue = typeof children === 'string' ? children : undefined\n\n    return (\n        <Primitive.ListBoxItem\n            textValue={textValue}\n            {...props}\n            className={item({ className })}\n        >\n            {(values) => (\n                <div className='flex items-center gap-2'>\n                    <>\n                        {values.allowsDragging && (\n                            <MenuIcon\n                                className={cn(\n                                    'size-4 shrink-0 text-muted-foreground transition',\n                                    values.isFocused && 'text-foreground',\n                                    values.isDragging && 'text-foreground',\n                                    values.isSelected && 'text-primary-foreground'\n                                )}\n                            />\n                        )}\n                        <div className='flex flex-col'>\n                            {typeof children === 'function' ? children(values) : children}\n                            {/*{children}*/}\n                        </div>\n                    </>\n                </div>\n            )}\n        </Primitive.ListBoxItem>\n    )\n}\n\nconst ListBoxSection = DropdownSection\n\ninterface ListBoxPickerProps<T> extends Primitive.ListBoxProps<T> {}\n\nconst ListBoxPicker = <T extends object>({\n    className,\n    ...props\n}: ListBoxPickerProps<T>) => {\n    return (\n        <Primitive.ListBox\n            className={cn(\n                'max-h-72 overflow-auto p-1 outline-none [clip-path:inset(0_0_0_0_round_.75rem)]',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nListBox.Picker = ListBoxPicker\nListBox.Item = ListBoxItem\nListBox.Section = ListBoxSection\n\nexport { ListBox }\n",
    "type": "ui"
  },
  "checkbox": {
    "component": "@/components/ui/checkbox",
    "raw": "'use client'\n\nimport { type ReactNode } from 'react'\n\nimport { cn } from '@/lib/utils'\nimport { Check, Minus } from 'lucide-react'\nimport * as Primitive from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Description, FieldError, Label } from './field'\n\ninterface CheckboxGroupProps extends Omit<Primitive.CheckboxGroupProps, 'children'> {\n    label?: string\n    children?: ReactNode\n    description?: string\n    errorMessage?: string | ((validation: Primitive.ValidationResult) => string)\n}\n\nconst CheckboxGroup = (props: CheckboxGroupProps) => {\n    return (\n        <Primitive.CheckboxGroup\n            {...props}\n            className={cn('flex flex-col gap-2', props.className)}\n        >\n            <Label>{props.label}</Label>\n            {props.children}\n            {props.description && <Description>{props.description}</Description>}\n            <FieldError>{props.errorMessage}</FieldError>\n        </Primitive.CheckboxGroup>\n    )\n}\n\nconst boxStyles = tv({\n    base: 'flex size-4 flex-shrink-0 items-center justify-center rounded border text-background transition',\n    variants: {\n        isSelected: {\n            true: [\n                'border-primary bg-primary text-primary-foreground',\n                'group-invalid:border-danger group-invalid:bg-danger group-invalid:text-danger-foreground'\n            ]\n        },\n        isFocused: {\n            true: [\n                'border-primary ring-4 ring-primary/20',\n                'group-invalid:border-danger group-invalid:text-danger-foreground group-invalid:ring-danger/20'\n            ]\n        },\n        isInvalid: {\n            true: 'border-danger bg-danger text-danger-foreground ring-danger/20'\n        }\n    }\n})\n\nconst Checkbox = (props: Primitive.CheckboxProps) => {\n    return (\n        <Primitive.Checkbox\n            {...props}\n            className={cn(\n                'group flex items-center gap-2 text-sm transition disabled:opacity-70',\n                props.className\n            )}\n        >\n            {({ isSelected, isIndeterminate, ...renderProps }) => (\n                <>\n                    <div\n                        className={boxStyles({\n                            isSelected: isSelected || isIndeterminate,\n                            ...renderProps\n                        })}\n                    >\n                        {isIndeterminate ? (\n                            <Minus className='size-3' />\n                        ) : isSelected ? (\n                            <Check className='size-3' />\n                        ) : null}\n                    </div>\n                    {props.children}\n                </>\n            )}\n        </Primitive.Checkbox>\n    )\n}\n\nexport { Checkbox, CheckboxGroup }\n",
    "type": "ui"
  },
  "toggle-button": {
    "component": "@/components/ui/toggle-button",
    "raw": "'use client'\n\nimport * as Primitive from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nconst styles = tv({\n    base: [\n        'inline-flex h-10 items-center justify-center whitespace-nowrap rounded-md px-4 py-2 text-base font-medium ring-offset-background transition-colors focus:outline-none focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-1 pressed:outline-none disabled:pointer-events-none disabled:opacity-70 sm:text-sm [&_svg]:size-4'\n    ],\n    variants: {\n        isSelected: {\n            false: 'pressed:bg-muted-foreground hover:bg-muted',\n            true: 'bg-secondary hover:bg-muted pressed:bg-muted-foreground'\n        },\n        isDisabled: {\n            true: 'border-black/5 bg-background text-muted-foreground'\n        }\n    }\n})\n\nfunction ToggleButton(props: Primitive.ToggleButtonProps) {\n    return (\n        <Primitive.ToggleButton\n            {...props}\n            className={Primitive.composeRenderProps(\n                props.className,\n                (className, renderProps) => styles({ ...renderProps, className })\n            )}\n        />\n    )\n}\n\nexport { ToggleButton }\n",
    "type": "ui"
  },
  "table": {
    "component": "@/components/ui/table",
    "raw": "'use client'\n\nimport { cn } from '@/lib/utils'\nimport { ChevronDown, ChevronUp, GripVertical } from 'lucide-react'\nimport * as Primitive from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Checkbox } from './checkbox'\n\nconst table = tv({\n    slots: {\n        root: 'table w-full caption-bottom border-spacing-0 text-sm outline-none',\n        column: 'whitespace-nowrap px-4 py-3 text-left font-medium outline-none [&:has([slot=selection])]:pr-0',\n        header: 'border-b',\n        row: 'tr group relative cursor-default border-b text-foreground/70 outline-none ring-primary focus-visible:ring-1 selected:bg-primary/15',\n        cell: 'whitespace-nowrap px-4 py-3 outline-none'\n    }\n})\n\nconst { root, header, column, row, cell } = table()\n\nconst TableBody = <T extends object>(props: Primitive.TableBodyProps<T>) => (\n    <Primitive.TableBody {...props} className={cn('[&_.tr:last-child]:border-0')} />\n)\n\nconst Table = ({\n    children,\n    className,\n    ...props\n}: Primitive.TableProps & { className?: string }) => (\n    <div className='relative w-full overflow-auto'>\n        <Primitive.Table {...props} className={root({ className })}>\n            {children}\n        </Primitive.Table>\n    </div>\n)\n\nconst TableCell = ({\n    children,\n    className,\n    ...props\n}: Primitive.CellProps & { className?: string }) => (\n    <Primitive.Cell {...props} className={cell({ className })}>\n        {children}\n    </Primitive.Cell>\n)\n\nconst TableColumn = ({\n    children,\n    className,\n    ...props\n}: Primitive.ColumnProps & { className?: string }) => (\n    <Primitive.Column isRowHeader {...props} className={column({ className })}>\n        {({ allowsSorting, sortDirection }) => (\n            <div className='flex items-center gap-2'>\n                <>\n                    {children}\n                    {allowsSorting &&\n                        (sortDirection === undefined ? (\n                            <div className='w-6'></div>\n                        ) : sortDirection === 'ascending' ? (\n                            <ChevronUp />\n                        ) : (\n                            <ChevronDown />\n                        ))}\n                </>\n            </div>\n        )}\n    </Primitive.Column>\n)\n\nconst TableHeader = <T extends object>({\n    children,\n    className,\n    columns,\n    ...props\n}: Primitive.TableHeaderProps<T> & { className?: string }) => {\n    const { selectionBehavior, selectionMode, allowsDragging } =\n        Primitive.useTableOptions()\n    return (\n        <Primitive.TableHeader {...props} className={header()}>\n            {allowsDragging && <Primitive.Column />}\n            {selectionBehavior === 'toggle' && (\n                <Primitive.Column className='pl-4'>\n                    {selectionMode === 'multiple' && <Checkbox slot='selection' />}\n                </Primitive.Column>\n            )}\n            <Primitive.Collection items={columns}>{children}</Primitive.Collection>\n        </Primitive.TableHeader>\n    )\n}\n\nconst TableRow = <T extends object>({\n    children,\n    className,\n    columns,\n    id,\n    ...props\n}: Primitive.RowProps<T> & { className?: string }) => {\n    const { selectionBehavior, allowsDragging } = Primitive.useTableOptions()\n    return (\n        <Primitive.Row\n            id={id}\n            {...props}\n            className={row({\n                className: 'href' in props ? 'cursor-pointer hover:bg-secondary/50' : ''\n            })}\n        >\n            {allowsDragging && (\n                <Primitive.Cell className='ring-primary'>\n                    <Primitive.Button\n                        className='cursor-pointer bg-transparent p-1.5 text-muted-foreground pressed:cursor-grab pressed:text-foreground'\n                        slot='drag'\n                    >\n                        <GripVertical className='size-5' />\n                    </Primitive.Button>\n                </Primitive.Cell>\n            )}\n            {selectionBehavior === 'toggle' && (\n                <Primitive.Cell className='pl-4'>\n                    <span\n                        aria-hidden\n                        className='absolute inset-y-0 left-0 hidden h-full w-0.5 bg-primary group-selected:block'\n                    />\n                    <Checkbox slot='selection' />\n                </Primitive.Cell>\n            )}\n            <Primitive.Collection items={columns}>{children}</Primitive.Collection>\n        </Primitive.Row>\n    )\n}\n\nTable.Header = TableHeader\nTable.Body = TableBody\nTable.Cell = TableCell\nTable.Column = TableColumn\nTable.Row = TableRow\n\nexport { Table }\n",
    "type": "ui"
  },
  "carousel": {
    "component": "@/components/ui/carousel",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { cn } from '@/lib/utils'\nimport useEmblaCarousel, { type UseEmblaCarouselType } from 'embla-carousel-react'\nimport { ChevronLeft, ChevronRight } from 'lucide-react'\n\nimport { Button, type ButtonProps } from './button'\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n    opts?: CarouselOptions\n    plugins?: CarouselPlugin\n    orientation?: 'horizontal' | 'vertical'\n    setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n    carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n    api: ReturnType<typeof useEmblaCarousel>[1]\n    scrollPrev: () => void\n    scrollNext: () => void\n    canScrollPrev: boolean\n    canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n    const context = React.useContext(CarouselContext)\n\n    if (!context) {\n        throw new Error('useCarousel must be used within a <Carousel />')\n    }\n\n    return context\n}\n\ninterface CarouselSubComponents {\n    Content: typeof CarouselContent\n    Item: typeof CarouselItem\n    Previous: typeof CarouselPrevious\n    Next: typeof CarouselNext\n}\n\ntype CarouselComponent = React.ForwardRefExoticComponent<\n    React.HTMLAttributes<HTMLDivElement>\n> &\n    React.RefAttributes<HTMLDivElement> &\n    CarouselSubComponents\n\nconst Carousel: CarouselComponent = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n    (\n        {\n            orientation = 'horizontal',\n            opts,\n            setApi,\n            plugins,\n            className,\n            children,\n            ...props\n        },\n        ref\n    ) => {\n        const [carouselRef, api] = useEmblaCarousel(\n            {\n                ...opts,\n                axis: orientation === 'horizontal' ? 'x' : 'y'\n            },\n            plugins\n        )\n        const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n        const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n        const onSelect = React.useCallback((api: CarouselApi) => {\n            if (!api) {\n                return\n            }\n\n            setCanScrollPrev(api.canScrollPrev())\n            setCanScrollNext(api.canScrollNext())\n        }, [])\n\n        const scrollPrev = React.useCallback(() => {\n            api?.scrollPrev()\n        }, [api])\n\n        const scrollNext = React.useCallback(() => {\n            api?.scrollNext()\n        }, [api])\n\n        const handleKeyDown = React.useCallback(\n            (event: React.KeyboardEvent<HTMLDivElement>) => {\n                if (event.key === 'ArrowLeft') {\n                    event.preventDefault()\n                    scrollPrev()\n                } else if (event.key === 'ArrowRight') {\n                    event.preventDefault()\n                    scrollNext()\n                }\n            },\n            [scrollPrev, scrollNext]\n        )\n\n        React.useEffect(() => {\n            if (!api || !setApi) {\n                return\n            }\n\n            setApi(api)\n        }, [api, setApi])\n\n        React.useEffect(() => {\n            if (!api) {\n                return\n            }\n\n            onSelect(api)\n            api.on('reInit', onSelect)\n            api.on('select', onSelect)\n\n            return () => {\n                api?.off('select', onSelect)\n            }\n        }, [api, onSelect])\n\n        return (\n            <CarouselContext.Provider\n                value={{\n                    carouselRef,\n                    api: api,\n                    opts,\n                    orientation:\n                        orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),\n                    scrollPrev,\n                    scrollNext,\n                    canScrollPrev,\n                    canScrollNext\n                }}\n            >\n                <div\n                    ref={ref}\n                    onKeyDownCapture={handleKeyDown}\n                    className={cn('relative', className)}\n                    role='region'\n                    aria-roledescription='carousel'\n                    {...props}\n                >\n                    {children}\n                </div>\n            </CarouselContext.Provider>\n        )\n    }\n) as CarouselComponent\nCarousel.displayName = 'Carousel'\n\nconst CarouselContent = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n    const { carouselRef, orientation } = useCarousel()\n\n    return (\n        <div ref={carouselRef} className='overflow-hidden'>\n            <div\n                ref={ref}\n                className={cn(\n                    'flex',\n                    orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',\n                    className\n                )}\n                {...props}\n            />\n        </div>\n    )\n})\nCarouselContent.displayName = 'CarouselContent'\n\nconst CarouselItem = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n    const { orientation } = useCarousel()\n\n    return (\n        <div\n            ref={ref}\n            role='group'\n            aria-roledescription='slide'\n            className={cn(\n                'min-w-0 shrink-0 grow-0 basis-full',\n                orientation === 'horizontal' ? 'pl-4' : 'pt-4',\n                className\n            )}\n            {...props}\n        />\n    )\n})\nCarouselItem.displayName = 'CarouselItem'\n\nconst CarouselPrevious = ({\n    className,\n    variant = 'outline',\n    size = 'icon',\n    ...props\n}: ButtonProps) => {\n    const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n    return (\n        <Button\n            variant={variant}\n            size={size}\n            className={cn(\n                'absolute h-8 w-8 rounded-full',\n                orientation === 'horizontal'\n                    ? '-left-12 top-1/2 -translate-y-1/2'\n                    : '-top-12 left-1/2 -translate-x-1/2 rotate-90',\n                className\n            )}\n            isDisabled={!canScrollPrev}\n            onPress={scrollPrev}\n            {...props}\n        >\n            <ChevronLeft className='h-4 w-4' />\n            <span className='sr-only'>Previous slide</span>\n        </Button>\n    )\n}\nCarouselPrevious.displayName = 'CarouselPrevious'\n\nconst CarouselNext = ({\n    className,\n    variant = 'outline',\n    size = 'icon',\n    ...props\n}: ButtonProps) => {\n    const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n    return (\n        <Button\n            variant={variant}\n            size={size}\n            className={cn(\n                'absolute h-8 w-8 rounded-full',\n                orientation === 'horizontal'\n                    ? '-right-12 top-1/2 -translate-y-1/2'\n                    : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',\n                className\n            )}\n            isDisabled={!canScrollNext}\n            onPress={scrollNext}\n            {...props}\n        >\n            <ChevronRight className='h-4 w-4' />\n            <span className='sr-only'>Next slide</span>\n        </Button>\n    )\n}\nCarouselNext.displayName = 'CarouselNext'\n\nCarousel.Content = CarouselContent\nCarousel.Item = CarouselItem\nCarousel.Previous = CarouselPrevious\nCarousel.Next = CarouselNext\n\nexport { Carousel }\n",
    "type": "ui"
  },
  "menu": {
    "component": "@/components/ui/menu",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { cn } from '@/lib/utils'\nimport { Check, ChevronsRight } from 'lucide-react'\nimport * as Primitive from 'react-aria-components'\nimport type { VariantProps } from 'tailwind-variants'\n\nimport { dropdownItemStyles } from './dropdown'\n\ninterface MenuSubComponents {\n    CheckboxItem: typeof MenuCheckboxItem\n    Content: typeof MenuContent\n    Header: typeof MenuHeader\n    Item: typeof MenuItem\n    Keyboard: typeof MenuKeyboard\n    RadioItem: typeof MenuRadioItem\n    Section: typeof MenuSection\n    Separator: typeof MenuSeparator\n    Trigger: typeof MenuTrigger\n    SubTrigger: typeof SubmenuTrigger\n}\n\ntype MenuComponent = React.FC<Primitive.MenuTriggerProps> & MenuSubComponents\n\nconst Menu: MenuComponent = (props: Primitive.MenuTriggerProps) => (\n    <Primitive.MenuTrigger {...props}>{props.children}</Primitive.MenuTrigger>\n)\nconst MenuTrigger = ({ className, ...props }: Primitive.ButtonProps) => (\n    <Primitive.Button\n        aria-label='Open Menu'\n        className={cn(\n            'inline text-left focus:outline-none focus-visible:ring-1 focus-visible:ring-primary/20 pressed:outline-none',\n            className\n        )}\n        {...props}\n    />\n)\n\nconst SubmenuTrigger = Primitive.SubmenuTrigger\n\nconst MenuSection = Primitive.Section\n\nexport interface MenuContentProps<T>\n    extends Omit<Primitive.PopoverProps, 'children' | 'style'>,\n        Primitive.MenuProps<T> {\n    className?: string\n    popoverClassName?: string\n    showArrow?: boolean\n}\n\nconst MenuContent = <T extends object>({\n    className,\n    showArrow = false,\n    popoverClassName,\n    offset = 4,\n    ...props\n}: MenuContentProps<T>) => {\n    const popoverContext = Primitive.useSlottedContext(Primitive.PopoverContext)!\n    const isSubmenu = popoverContext?.trigger === 'SubmenuTrigger'\n    let currentOffset = showArrow ? 12 : 8\n    currentOffset = isSubmenu ? currentOffset - 6 : currentOffset\n    return (\n        <Primitive.Popover\n            offset={currentOffset}\n            className={cn(\n                'z-50 min-w-40 rounded-xl border bg-background text-foreground outline-none data-[placement=bottom]:slide-in-from-top-2 data-[placement=left]:slide-in-from-right-2 data-[placement=right]:slide-in-from-left-2 data-[placement=top]:slide-in-from-bottom-2 entering:animate-in entering:fade-in-0 exiting:animate-out exiting:fade-out-0 exiting:zoom-out-95',\n                popoverClassName\n            )}\n            {...props}\n        >\n            {showArrow && (\n                <Primitive.OverlayArrow className='group'>\n                    <svg\n                        width={12}\n                        height={12}\n                        viewBox='0 0 12 12'\n                        className='block fill-popover stroke-border group-placement-left:-rotate-90 group-placement-right:rotate-90 group-placement-bottom:rotate-180'\n                    >\n                        <path d='M0 0 L6 6 L12 0' />\n                    </svg>\n                </Primitive.OverlayArrow>\n            )}\n            <Primitive.Menu\n                className={cn(\n                    'z32kk',\n                    'max-h-[inherit] overflow-auto rounded-xl p-1 outline outline-0 [clip-path:inset(0_0_0_0_round_calc(var(--radius)-2px))]',\n                    className\n                )}\n                {...props}\n            />\n        </Primitive.Popover>\n    )\n}\n\ninterface MenuItemProps\n    extends Omit<Primitive.MenuItemProps, 'isDanger'>,\n        VariantProps<typeof dropdownItemStyles> {\n    inset?: boolean\n    isDanger?: boolean\n}\n\nconst MenuItem = ({\n    className,\n    isDanger = false,\n    inset,\n    children,\n    ...props\n}: MenuItemProps) => (\n    <Primitive.MenuItem\n        className={Primitive.composeRenderProps(className, (className, renderProps) =>\n            dropdownItemStyles({\n                ...renderProps,\n                className: cn(inset && 'pl-8', className)\n            })\n        )}\n        data-danger={isDanger ? 'true' : undefined}\n        {...props}\n    >\n        {/*<MenuItemPrimitive className={cn(menuItemVariants({ intent }), className, inset && 'pl-8')} {...props}>*/}\n        {(values) => (\n            <>\n                {typeof children === 'function' ? children(values) : children}\n                {values.hasSubmenu && <ChevronsRight className='gpfw ml-auto size-3.5' />}\n            </>\n        )}\n    </Primitive.MenuItem>\n)\n\nexport interface MenuHeaderProps extends React.ComponentProps<typeof Primitive.Header> {\n    inset?: boolean\n    separator?: boolean\n}\n\nconst MenuHeader = ({\n    className,\n    inset,\n    separator = false,\n    ...props\n}: MenuHeaderProps) => (\n    <Primitive.Header\n        className={cn(\n            'px-2 py-1.5 text-base font-semibold sm:text-sm',\n            inset && 'pl-8',\n            separator && '-mx-1 mb-1 border-b border-b-border px-3 pb-[0.625rem]',\n            className\n        )}\n        {...props}\n    />\n)\n\nconst MenuSeparator = ({ className, ...props }: Primitive.SeparatorProps) => (\n    <Primitive.Separator\n        className={cn('-mx-1 my-1 h-px bg-muted', className)}\n        {...props}\n    />\n)\n\ninterface MenuKeyboardProps extends React.HTMLAttributes<HTMLElement> {\n    keys: string | string[]\n}\n\nconst MenuKeyboard = ({ keys, className, ...props }: MenuKeyboardProps) => {\n    return (\n        <Primitive.Keyboard\n            className={cn(\n                '-mr-1 ml-auto hidden items-center gap-[0.170rem] px-1 lg:inline-flex',\n                className\n            )}\n            {...props}\n        >\n            {(Array.isArray(keys) ? keys : keys.split('')).map((char, index) => (\n                <kbd\n                    key={index}\n                    className={cn([\n                        'min-w-[2ch] text-center font-sans capitalize text-muted-foreground group-focus:text-foreground',\n                        'inline-grid min-h-5 min-w-5 place-content-center rounded bg-background font-sans text-[.75rem] uppercase text-foreground ring-1 ring-foreground/10 group-focus:opacity-60',\n                        // Make sure key names that are longer than one character (like \"Tab\") have extra space\n                        index > 0 && char.length > 1 && 'pl-1'\n                    ])}\n                >\n                    {char}\n                </kbd>\n            ))}\n        </Primitive.Keyboard>\n    )\n}\n\nconst MenuCheckboxItem = ({ className, children, ...props }: MenuItemProps) => (\n    <MenuItem className={className} {...props}>\n        {(values) => (\n            <>\n                <span className='absolute right-2 flex size-4 items-center justify-center'>\n                    {values.isSelected && <Check className='size-4' />}\n                </span>\n                {typeof children === 'function' ? children(values) : children}\n            </>\n        )}\n    </MenuItem>\n)\n\nconst MenuRadioItem = ({ className, children, ...props }: MenuItemProps) => (\n    <MenuItem className={className} {...props}>\n        {(values) => (\n            <>\n                <span className='absolute right-2 flex size-4 items-center justify-center'>\n                    {values.isSelected && <Check className='size-4' />}\n                </span>\n                {typeof children === 'function' ? children(values) : children}\n            </>\n        )}\n    </MenuItem>\n)\n\nMenu.CheckboxItem = MenuCheckboxItem\nMenu.Content = MenuContent\nMenu.Header = MenuHeader\nMenu.Item = MenuItem\nMenu.Keyboard = MenuKeyboard\nMenu.RadioItem = MenuRadioItem\nMenu.Section = MenuSection\nMenu.Separator = MenuSeparator\nMenu.Trigger = MenuTrigger\nMenu.SubTrigger = SubmenuTrigger\n\nexport { MenuKeyboard as Keyboard, Menu, type MenuItemProps }\n",
    "type": "ui"
  },
  "color-picker": {
    "component": "@/components/ui/color-picker",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport * as Primitive from 'react-aria-components'\nimport tailwindColors from 'tailwindcss/colors'\n\nimport { Button } from './button'\nimport {\n    ColorArea,\n    ColorField,\n    ColorSlider,\n    ColorSwatch,\n    ColorSwatchPicker,\n    ColorSwatchPickerItem,\n    ColorThumb,\n    defaultColor,\n    isBrightColor\n} from './color'\nimport { Dialog } from './dialog'\nimport { DynamicOverlay } from './dynamic-overlay'\nimport { Description, Label } from './field'\nimport { Select } from './select'\n\ninterface ColorPickerProps extends Primitive.ColorPickerProps {\n    space?: Primitive.ColorSpace\n    enableColorSwatch?: boolean\n    enableColorFormatSelection?: boolean\n    isHex?: boolean\n    label?: string\n    description?: string\n    errorMessage?: string\n    placeholder?: string\n    colors?: string[]\n    isDisabled?: boolean\n}\n\nconst ColorPicker = ({\n    enableColorSwatch = false,\n    enableColorFormatSelection = false,\n    label,\n    description,\n    colors = [...Object.values(tailwindColors.zinc)],\n    placeholder = 'Fill Color',\n    isHex = true,\n    isDisabled = false,\n    ...props\n}: ColorPickerProps) => {\n    const [space, setSpace] = React.useState<Primitive.ColorSpace>('rgb')\n    const [isHexFormat, setIsHexFormat] = React.useState(false)\n    return (\n        <Primitive.Group\n            aria-labelledby='color-swatch'\n            className='flex w-full flex-col gap-1'\n        >\n            {label && <Label>{label}</Label>}\n            <Primitive.ColorPicker defaultValue={defaultColor} {...props}>\n                <Primitive.DialogTrigger>\n                    <Button\n                        aria-labelledby='color-swatch'\n                        isDisabled={isDisabled}\n                        variant='outline'\n                        className='w-full max-w-sm justify-start'\n                    >\n                        <ColorSwatch\n                            aria-labelledby='color-swatch'\n                            isBright={props.value ? isBrightColor(props.value) : false}\n                            className='-ml-1.5 size-6'\n                        />\n                        <span>{placeholder}</span>\n                    </Button>\n                    <DynamicOverlay\n                        aria-labelledby='color-swatch'\n                        placement='bottom start'\n                        className='w-full p-0 overflow-hidden min-w-full sm:w-fit sm:min-w-fit'\n                    >\n                        <Dialog\n                            aria-labelledby='color-swatch'\n                            className='[[data-placement]>&]:p-[0.70rem] lg:w-[18rem] lg:p-0'\n                        >\n                            <div className='space-y-2'>\n                                <div>\n                                    <ColorArea\n                                        aria-labelledby='color-swatch'\n                                        className='w-full sm:w-[calc(18rem-1.30rem)]'\n                                        colorSpace='hsb'\n                                        xChannel='saturation'\n                                        yChannel='brightness'\n                                    >\n                                        <ColorThumb className='z-50' />\n                                    </ColorArea>\n                                    <ColorSlider\n                                        aria-labelledby='color-swatch'\n                                        showOutput={false}\n                                        className='mt-2 [&_.cstrk]:orientation-horizontal:h-3'\n                                        colorSpace='hsb'\n                                        channel='hue'\n                                    />\n                                </div>\n\n                                <div className='grid gap-2'>\n                                    {enableColorFormatSelection && (\n                                        <Select\n                                            selectedKey={space}\n                                            onSelectionChange={(s) => {\n                                                setSpace(s as Primitive.ColorSpace)\n                                                setIsHexFormat(s === 'hex')\n                                            }}\n                                            aria-label='Type of Color'\n                                        >\n                                            {['rgb', 'hsl', 'hsb', 'hex'].map((s) => (\n                                                <Select.Item key={s} id={s} textValue={s}>\n                                                    {s}\n                                                </Select.Item>\n                                            ))}\n                                        </Select>\n                                    )}\n\n                                    {enableColorFormatSelection ? (\n                                        <div className='flex gap-1 w-[inherit]'>\n                                            {isHexFormat ? (\n                                                <ColorField\n                                                    aria-labelledby='color-swatch'\n                                                    colorSpace={space}\n                                                />\n                                            ) : (\n                                                Primitive.getColorChannels(space).map(\n                                                    (channel) => (\n                                                        <ColorField\n                                                            aria-label={channel.toString()}\n                                                            colorSpace={space}\n                                                            channel={channel}\n                                                            key={channel}\n                                                        />\n                                                    )\n                                                )\n                                            )}\n                                        </div>\n                                    ) : (\n                                        <ColorField\n                                            aria-labelledby='color-swatch'\n                                            colorSpace={space}\n                                        />\n                                    )}\n                                </div>\n\n                                {enableColorSwatch && colors && colors.length > 0 && (\n                                    <ColorSwatchPicker\n                                        aria-labelledby='color-swatch'\n                                        className='flex flex-wrap gap-x-2 gap-y-2.5'\n                                    >\n                                        {colors.map((color) => (\n                                            <ColorSwatchPickerItem\n                                                key={color}\n                                                color={color}\n                                            />\n                                        ))}\n                                    </ColorSwatchPicker>\n                                )}\n                            </div>\n                        </Dialog>\n                    </DynamicOverlay>\n                </Primitive.DialogTrigger>\n            </Primitive.ColorPicker>\n            {description && <Description>{description}</Description>}\n        </Primitive.Group>\n    )\n}\n\nexport { ColorPicker, type ColorPickerProps }\n",
    "type": "ui"
  },
  "toaster": {
    "component": "@/components/ui/toaster",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { cn } from '@/lib/utils'\nimport { AlertCircle, AlertTriangle, CheckCircle, Loader2 } from 'lucide-react'\nimport { useTheme } from 'next-themes'\nimport { Toaster as Sonner } from 'sonner'\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n    const { theme = 'system' } = useTheme()\n    return (\n        <Sonner\n            theme={theme as ToasterProps['theme']}\n            className='toaster group'\n            toastOptions={{\n                unstyled: true,\n                className: cn(\n                    'group flex w-full gap-x-1 overflow-hidden rounded-lg bg-background p-4 text-sm text-foreground ring-1 ring-border backdrop-blur-xl',\n                    '[&_svg]:mt-1.5 [&_svg]:size-5'\n                ),\n                classNames: {\n                    error: 'ring-danger/20 bg-danger/10 text-danger',\n                    success: 'ring-success/30 bg-success/10 text-success',\n                    warning: 'ring-warning/25 bg-warning/10 text-warning',\n                    info: 'ring-info/30 bg-info/10 text-info',\n                    actionButton:\n                        'py-1 rounded-md text-xs px-2 bg-primary text-primary-foreground',\n                    cancelButton:\n                        'py-1 rounded-md text-xs px-2 bg-secondary text-secondary-foreground'\n                }\n            }}\n            icons={{\n                success: <CheckCircle className='text-success' />,\n                info: <AlertCircle className='text-info' />,\n                warning: <AlertTriangle className='text-warning' />,\n                error: <AlertCircle className='text-danger' />,\n                loading: <Loader2 className='animate-spin' />\n            }}\n            {...props}\n        />\n    )\n}\n\nexport { Toaster }\n",
    "type": "ui"
  },
  "pagination": {
    "component": "@/components/ui/pagination",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { cn } from '@/lib/utils'\nimport {\n    ChevronLeft,\n    ChevronRight,\n    ChevronsLeft,\n    ChevronsRight,\n    MoreHorizontal\n} from 'lucide-react'\nimport Link from 'next/link'\nimport type { LabelProps } from 'react-aria-components'\n\nimport { type ButtonProps, buttonVariants } from './button'\nimport { Label } from './field'\nimport { Separator } from './separator'\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<'nav'>) => (\n    <nav\n        role='navigation'\n        aria-label='pagination'\n        className={cn('mx-auto flex w-full justify-center', className)}\n        {...props}\n    />\n)\nPagination.displayName = 'Pagination'\n\nconst PaginationContent = React.forwardRef<HTMLUListElement, React.ComponentProps<'ul'>>(\n    ({ className, ...props }, ref) => (\n        <ul\n            ref={ref}\n            className={cn('flex flex-row items-center gap-1', className)}\n            {...props}\n        />\n    )\n)\nPaginationContent.displayName = 'PaginationContent'\n\nconst PaginationItem = React.forwardRef<HTMLLIElement, React.ComponentProps<'li'>>(\n    ({ className, ...props }, ref) => (\n        <li ref={ref} className={cn(className)} {...props} />\n    )\n)\nPaginationItem.displayName = 'PaginationItem'\n\ntype PaginationLinkProps = {\n    isActive?: boolean\n} & Pick<ButtonProps, 'size'> &\n    Omit<React.ComponentProps<typeof Link>, 'size'>\n\nconst PaginationLink = ({\n    className,\n    isActive,\n    size = 'icon',\n    ...props\n}: PaginationLinkProps) => (\n    <Link\n        scroll={false}\n        aria-current={isActive ? 'page' : undefined}\n        className={cn(\n            buttonVariants({\n                variant: isActive ? 'primary' : 'outline',\n                size,\n                className: 'rounded-lg'\n            }),\n            className\n        )}\n        {...props}\n    />\n)\nPaginationLink.displayName = 'PaginationLink'\n\nconst PaginationPrevious = ({\n    className,\n    ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n    <PaginationLink\n        aria-label='Go to previous page'\n        size='icon'\n        className={cn('gap-1', className)}\n        {...props}\n    >\n        <ChevronLeft />\n        <span className='sr-only'>Previous</span>\n    </PaginationLink>\n)\nPaginationPrevious.displayName = 'PaginationPrevious'\n\nconst PaginationNext = ({\n    className,\n    ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n    <PaginationLink\n        aria-label='Go to next page'\n        size='icon'\n        className={cn('gap-1', className)}\n        {...props}\n    >\n        <span className='sr-only'>Next</span>\n        <ChevronRight />\n    </PaginationLink>\n)\nPaginationNext.displayName = 'PaginationNext'\n\nconst PaginationLast = ({\n    className,\n    ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n    <PaginationLink\n        aria-label='Go to next page'\n        size='icon'\n        className={cn('gap-1', className)}\n        {...props}\n    >\n        <span className='sr-only'>Last</span>\n        <ChevronsRight />\n    </PaginationLink>\n)\nPaginationLast.displayName = 'PaginationLast'\n\nconst PaginationFirst = ({\n    className,\n    ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n    <PaginationLink\n        aria-label='Go to previous page'\n        size='icon'\n        className={cn('gap-1', className)}\n        {...props}\n    >\n        <ChevronsLeft />\n        <span className='sr-only'>First</span>\n    </PaginationLink>\n)\nPaginationFirst.displayName = 'PaginationFirst'\n\nconst PaginationEllipsis = ({ className, ...props }: React.ComponentProps<'span'>) => (\n    <span\n        aria-hidden\n        className={cn('flex size-9 items-center justify-center', className)}\n        {...props}\n    >\n        <MoreHorizontal className='size-4' />\n        <span className='sr-only'>More pages</span>\n    </span>\n)\nPaginationEllipsis.displayName = 'PaginationEllipsis'\n\nconst PaginationLabel = ({ className, ...props }: LabelProps) => (\n    <Label\n        aria-hidden\n        className={cn(\n            'grid h-10 place-content-center px-3 text-sm font-normal',\n            className\n        )}\n        {...props}\n    />\n)\nPaginationLabel.displayName = 'PaginationLabel'\n\nconst PaginationSeparator = ({ className, ...props }: React.ComponentProps<'span'>) => (\n    <Separator\n        aria-hidden\n        className={cn('mx-1 h-5 w-px rotate-[14deg] self-center', className)}\n        {...props}\n    ></Separator>\n)\nPaginationSeparator.displayName = 'PaginationSeparator'\n\nPagination.Content = PaginationContent\nPagination.Ellipsis = PaginationEllipsis\nPagination.First = PaginationFirst\nPagination.Item = PaginationItem\nPagination.Label = PaginationLabel\nPagination.Last = PaginationLast\nPagination.Link = PaginationLink\nPagination.Next = PaginationNext\nPagination.Previous = PaginationPrevious\nPagination.Separator = PaginationSeparator\n\nexport { Pagination }\n",
    "type": "ui"
  },
  "text-field": {
    "component": "@/components/ui/text-field",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { cn } from '@/lib/utils'\nimport { Loader2 } from 'lucide-react'\nimport * as Primitive from 'react-aria-components'\n\nimport { Description, FieldError, FieldGroup, Input, Label } from './field'\n\ninterface TextFieldProps extends Primitive.TextFieldProps {\n    label?: string\n    placeholder?: string\n    description?: string\n    errorMessage?: string | ((validation: Primitive.ValidationResult) => string)\n    prefix?: React.ReactNode\n    suffix?: React.ReactNode\n    isLoading?: boolean\n    indicatorPlace?: 'prefix' | 'suffix'\n}\n\nconst TextField = ({\n    label,\n    description,\n    errorMessage,\n    placeholder,\n    prefix,\n    suffix,\n    isLoading,\n    indicatorPlace,\n    ...props\n}: TextFieldProps) => {\n    return (\n        <Primitive.TextField\n            {...props}\n            className={cn('group flex flex-col gap-1', props.className)}\n        >\n            {label && <Label>{label}</Label>}\n            <FieldGroup\n                data-loading={isLoading ? 'true' : undefined}\n                className='flex items-center group-invalid:border-danger group-invalid:focus-within:ring-danger/20 group-disabled:bg-secondary group-disabled:opacity-50'\n            >\n                {isLoading && indicatorPlace === 'prefix' ? (\n                    <Loader2 className='isPfx animate-spin' />\n                ) : prefix ? (\n                    <span className='atrs isPfx'>{prefix}</span>\n                ) : null}\n                <Input className='px-2.5' placeholder={placeholder} />\n                {isLoading && indicatorPlace === 'suffix' ? (\n                    <Loader2 className='isSfx animate-spin' />\n                ) : suffix ? (\n                    <span className='atrs isSfx'>{suffix}</span>\n                ) : null}\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </Primitive.TextField>\n    )\n}\n\nexport { TextField }\n",
    "type": "ui"
  },
  "form": {
    "component": "@/components/ui/form",
    "raw": "'use client'\n\nimport * as Primitive from 'react-aria-components'\n\ninterface FormProps extends Primitive.FormProps {}\n\nfunction Form(props: FormProps) {\n    return <Primitive.Form {...props} />\n}\n\nexport { Form, type FormProps }\n",
    "type": "ui"
  },
  "textarea": {
    "component": "@/components/ui/textarea",
    "raw": "'use client'\n\nimport { cn } from '@/lib/utils'\nimport * as Primitive from 'react-aria-components'\n\nimport { Description, FieldError, Label } from './field'\n\nexport interface TextareaProps extends Primitive.TextFieldProps {\n    autoSize?: boolean\n    label?: string\n    placeholder?: string\n    description?: string\n    errorMessage?: string | ((validation: Primitive.ValidationResult) => string)\n}\n\nfunction Textarea({\n    placeholder,\n    label,\n    description,\n    errorMessage,\n    ...props\n}: TextareaProps) {\n    return (\n        <Primitive.TextField\n            {...props}\n            className={cn('group flex flex-col gap-1', props.className)}\n        >\n            {label && <Label>{label}</Label>}\n            <Primitive.TextArea\n                placeholder={placeholder}\n                className={cn(\n                    'min-h-[60px] w-full min-w-0 rounded-md border border-input bg-background px-2.5 py-2 text-base shadow-sm outline-none transition duration-200 disabled:bg-secondary disabled:opacity-70 sm:text-sm',\n                    'focus:border-primary focus:ring-4 focus:ring-primary/20',\n                    'focus:invalid:border-danger focus:invalid:ring-4 focus:invalid:ring-danger/20',\n                    'invalid:border-danger'\n                )}\n            />\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </Primitive.TextField>\n    )\n}\n\nexport { Textarea }\n",
    "type": "ui"
  },
  "breadcrumbs": {
    "component": "@/components/ui/breadcrumbs",
    "raw": "'use client'\n\nimport { cn } from '@/lib/utils'\nimport { ChevronRight } from 'lucide-react'\nimport * as Primitive from 'react-aria-components'\n\nimport { Link } from './link'\n\nfunction Breadcrumbs<T extends object>(props: Primitive.BreadcrumbsProps<T>) {\n    return (\n        <Primitive.Breadcrumbs {...props} className={cn('flex gap-1', props.className)} />\n    )\n}\n\nfunction Breadcrumb(props: Primitive.BreadcrumbProps & Primitive.LinkProps) {\n    return (\n        <Primitive.Breadcrumb\n            {...props}\n            className={cn('flex items-center gap-1', props.className)}\n        >\n            <Link href={props.href} {...props} />\n            {props.href && (\n                <ChevronRight className='size-4 shrink-0 text-muted-foreground' />\n            )}\n        </Primitive.Breadcrumb>\n    )\n}\n\nexport { Breadcrumb, Breadcrumbs }\n",
    "type": "ui"
  },
  "badge": {
    "component": "@/components/ui/badge",
    "raw": "import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nconst badgeVariants = tv({\n    base: 'inline-flex items-center hover:brightness-110 gap-1 border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none [&_svg]:size-3',\n    variants: {\n        variant: {\n            primary: 'border-transparent bg-primary text-primary-foreground',\n            secondary: 'border-transparent bg-secondary text-secondary-foreground',\n            danger: 'border-transparent bg-danger text-danger-foreground',\n            success: 'border-transparent bg-success text-success-foreground',\n            warning: 'border-transparent bg-warning text-warning-foreground',\n            info: 'border-transparent bg-info text-info-foreground',\n            dark: 'border-transparent bg-dark text-dark-foreground',\n            outline: 'text-foreground'\n        },\n        shape: {\n            square: 'rounded-md',\n            circle: 'rounded-full'\n        }\n    },\n    defaultVariants: {\n        variant: 'outline',\n        shape: 'square'\n    }\n})\n\nexport interface BadgeProps\n    extends React.HTMLAttributes<HTMLDivElement>,\n        VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, shape, ...props }: BadgeProps) {\n    return (\n        <span className={cn(badgeVariants({ variant, shape }), className)} {...props} />\n    )\n}\n\nexport { Badge, badgeVariants }\n",
    "type": "ui"
  },
  "select": {
    "component": "@/components/ui/select",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { cn } from '@/lib/utils'\nimport { ChevronsUpDown } from 'lucide-react'\nimport * as Primitive from 'react-aria-components'\n\nimport { DropdownItem, DropdownSection } from './dropdown'\nimport { Description, FieldError, Label } from './field'\nimport { ListBox } from './list-box'\nimport { Popover } from './popover'\n\ninterface SelectProps<T extends object>\n    extends Omit<Primitive.SelectProps<T>, 'children'> {\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: Primitive.ValidationResult) => string)\n    items?: Iterable<T>\n    children: React.ReactNode | ((item: T) => React.ReactNode)\n}\n\nfunction Select<T extends object>({\n    label,\n    description,\n    errorMessage,\n    children,\n    items,\n    ...props\n}: SelectProps<T>) {\n    return (\n        <Primitive.Select\n            {...props}\n            className={cn(\n                'group flex w-full flex-col gap-1 outline-none',\n                props.className\n            )}\n        >\n            {label && <Label>{label}</Label>}\n            <Primitive.Button\n                className={cn(\n                    'flex h-10 w-full cursor-default items-center gap-4 rounded-lg border border-input bg-background py-2 pl-3 pr-2 text-start shadow-[inset_0_1px_0_0_rgba(255,255,255,0.1)] outline-none transition group-open:border-primary group-open:ring-4 group-open:ring-primary/20 focus-visible:border-primary focus-visible:ring-4 focus-visible:ring-primary/20 group-disabled:bg-secondary group-disabled:opacity-70 dark:shadow-none',\n                    'text-foreground group-invalid:border-danger group-invalid:ring-danger/20',\n                    'disabled:bg-secondary disabled:text-muted-foreground'\n                )}\n            >\n                <Primitive.SelectValue className='flex-1 text-base placeholder-shown:text-muted-foreground lg:text-sm' />\n                <ChevronsUpDown\n                    aria-hidden\n                    className='size-4 text-muted-foreground duration-300 group-open:rotate-180 group-open:text-foreground group-disabled:opacity-70'\n                />\n            </Primitive.Button>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n            <Popover.Picker>\n                <ListBox.Picker items={items}>{children}</ListBox.Picker>\n            </Popover.Picker>\n        </Primitive.Select>\n    )\n}\n\nconst SelectItem = DropdownItem\nconst SelectSection = DropdownSection\n\nSelect.Item = SelectItem\nSelect.Section = SelectSection\n\nexport { Select }\n",
    "type": "ui"
  },
  "note": {
    "component": "@/components/ui/note",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { cn } from '@/lib/utils'\nimport { Info, TriangleAlert } from 'lucide-react'\nimport * as Primitive from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nconst noteStyles = tv({\n    base: [\n        'relative rounded-lg p-4 ring-1 ring-border dark:ring-inset [&_a:hover]:underline [&_a]:font-medium',\n        '[&_svg]:absolute [&_svg]:right-4 [&_svg]:top-4 [&_svg]:size-6'\n    ],\n    variants: {\n        variant: {\n            primary:\n                'border-primary bg-background leading-4 text-primary ring-primary [&_a]:text-primary [&_svg]:text-primary',\n            secondary:\n                'border-secondary bg-background leading-4 text-secondary-foreground ring-foreground [&_a]:text-secondary-foreground [&_svg]:text-secondary-foreground',\n            info: 'border-info bg-background leading-4 text-info ring-info [&_a]:text-info [&_svg]:text-info',\n            warning:\n                'border-warning bg-background leading-4 text-warning ring-warning [&_a]:text-warning [&_svg]:text-warning',\n            danger: 'border-danger bg-background leading-4 text-danger ring-danger [&_a]:text-danger [&_svg]:text-danger',\n            success:\n                'border-success bg-background leading-4 text-success ring-success [&_a]:text-success [&_svg]:text-success'\n        }\n    },\n    defaultVariants: {\n        variant: 'primary'\n    }\n})\n\ninterface NoteProps\n    extends React.HtmlHTMLAttributes<HTMLDivElement>,\n        VariantProps<typeof noteStyles> {}\n\nconst Note = ({ variant = 'primary', className, ...props }: NoteProps) => {\n    return (\n        <div className={noteStyles({ variant, className })} {...props}>\n            {['info', 'primary', 'secondary'].includes(variant) ? (\n                <Info />\n            ) : (\n                <TriangleAlert />\n            )}\n            {props.children}\n        </div>\n    )\n}\n\nconst NoteTitle = ({ className, ...props }: Primitive.HeadingProps) => {\n    return (\n        <Primitive.Heading\n            className={cn('mb-1 pr-2 font-medium sm:text-base', className)}\n            level={3}\n            {...props}\n        />\n    )\n}\n\nconst NoteDescription = ({ className, ...props }: Primitive.TextProps) => {\n    return (\n        <Primitive.Text\n            slot='description'\n            {...props}\n            className={cn('text-sm', className)}\n        />\n    )\n}\n\nNote.Title = NoteTitle\nNote.Description = NoteDescription\n\nexport { Note }\n",
    "type": "ui"
  },
  "grid": {
    "component": "@/components/ui/grid",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { cn } from '@/lib/utils'\nimport * as Primitive from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nconst gridStyle = tv(\n    {\n        base: 'grid',\n        variants: {\n            // Columns\n            columns: {\n                1: 'grid-cols-1',\n                2: 'grid-cols-2',\n                3: 'grid-cols-3',\n                4: 'grid-cols-4',\n                5: 'grid-cols-5',\n                6: 'grid-cols-6',\n                7: 'grid-cols-7',\n                8: 'grid-cols-8',\n                9: 'grid-cols-9',\n                10: 'grid-cols-10',\n                11: 'grid-cols-11',\n                12: 'grid-cols-12'\n            },\n\n            // Rows\n            rows: {\n                1: 'grid-rows-1',\n                2: 'grid-rows-2',\n                3: 'grid-rows-3',\n                4: 'grid-rows-4',\n                5: 'grid-rows-5',\n                6: 'grid-rows-6',\n                7: 'grid-rows-7',\n                8: 'grid-rows-8',\n                9: 'grid-rows-9',\n                10: 'grid-rows-10',\n                11: 'grid-rows-11',\n                12: 'grid-rows-12'\n            },\n\n            // Flow\n            flow: {\n                row: 'grid-flow-row',\n                col: 'grid-flow-col',\n                rowDense: 'grid-flow-row-dense',\n                colDense: 'grid-flow-col-dense',\n                dense: 'grid-flow-dense'\n            },\n\n            // Gap\n            gap: {\n                0: 'gap-0',\n                0.5: 'gap-0.5',\n                1: 'gap-1',\n                1.5: 'gap-1.5',\n                2: 'gap-2',\n                2.5: 'gap-2.5',\n                3: 'gap-3',\n                3.5: 'gap-3.5',\n                4: 'gap-4',\n                5: 'gap-5',\n                6: 'gap-6',\n                7: 'gap-7',\n                8: 'gap-8',\n                9: 'gap-9',\n                10: 'gap-10',\n                11: 'gap-11',\n                12: 'gap-12',\n                14: 'gap-14',\n                16: 'gap-16',\n                20: 'gap-20',\n                24: 'gap-24'\n            },\n            gapX: {\n                0: 'gap-x-0',\n                0.5: 'gap-x-0.5',\n                1: 'gap-x-1',\n                1.5: 'gap-x-1.5',\n                2: 'gap-x-2',\n                2.5: 'gap-x-2.5',\n                3: 'gap-x-3',\n                3.5: 'gap-x-3.5',\n                4: 'gap-x-4',\n                5: 'gap-x-5',\n                6: 'gap-x-6',\n                7: 'gap-x-7',\n                8: 'gap-x-8',\n                9: 'gap-x-9',\n                10: 'gap-x-10',\n                11: 'gap-x-11',\n                12: 'gap-x-12',\n                14: 'gap-x-14',\n                16: 'gap-x-16',\n                20: 'gap-x-20',\n                24: 'gap-x-24'\n            },\n            gapY: {\n                0: 'gap-y-0',\n                0.5: 'gap-y-0.5',\n                1: 'gap-y-1',\n                1.5: 'gap-y-1.5',\n                2: 'gap-y-2',\n                2.5: 'gap-y-2.5',\n                3: 'gap-y-3',\n                3.5: 'gap-y-3.5',\n                4: 'gap-y-4',\n                5: 'gap-y-5',\n                6: 'gap-y-6',\n                7: 'gap-y-7',\n                8: 'gap-y-8',\n                9: 'gap-y-9',\n                10: 'gap-y-10',\n                11: 'gap-y-11',\n                12: 'gap-y-12',\n                14: 'gap-y-14',\n                16: 'gap-y-16',\n                20: 'gap-y-20',\n                24: 'gap-y-24'\n            }\n        },\n        defaultVariants: {\n            columns: 1\n        }\n    },\n    {\n        responsiveVariants: true\n    }\n)\n\ninterface GridProps<T> extends VariantProps<typeof gridStyle>, Primitive.ListBoxProps<T> {\n    className?: string\n    debug?: boolean\n}\n\nconst Grid = <T extends object>({\n    className,\n    children,\n    gap,\n    gapX,\n    gapY,\n    flow,\n    columns,\n    rows,\n    ...props\n}: GridProps<T>) => {\n    return (\n        <Primitive.ListBox\n            aria-label={props['aria-label'] || 'grid'}\n            orientation='horizontal'\n            layout='grid'\n            className={gridStyle({\n                gap: gap ?? gapX ?? gapY,\n                gapX: gapX ?? gap,\n                gapY: gapY ?? gap,\n                flow: flow ?? 'row',\n                columns: columns ?? 1,\n                rows: rows ?? 1,\n\n                className:\n                    'debug' in props\n                        ? cn(\n                              '[&>.grid-cell]:border [&>.grid-cell]:border-warning',\n                              className\n                          )\n                        : className\n            })}\n            {...props}\n        >\n            {children}\n        </Primitive.ListBox>\n    )\n}\n\nconst gridItemStyles = tv(\n    {\n        base: 'grid-cell',\n        variants: {\n            colSpan: {\n                auto: 'col-auto',\n                1: 'col-span-1',\n                2: 'col-span-2',\n                3: 'col-span-3',\n                4: 'col-span-4',\n                5: 'col-span-5',\n                6: 'col-span-6',\n                7: 'col-span-7',\n                8: 'col-span-8',\n                9: 'col-span-9',\n                10: 'col-span-10',\n                11: 'col-span-11',\n                12: 'col-span-12',\n                full: 'col-span-full'\n            },\n            colStart: {\n                1: 'col-start-1',\n                2: 'col-start-2',\n                3: 'col-start-3',\n                4: 'col-start-4',\n                5: 'col-start-5',\n                6: 'col-start-6',\n                7: 'col-start-7',\n                8: 'col-start-8',\n                9: 'col-start-9',\n                10: 'col-start-10',\n                11: 'col-start-11',\n                12: 'col-start-12',\n                13: 'col-start-13',\n                auto: 'col-start-auto'\n            },\n            colEnd: {\n                1: 'col-end-1',\n                2: 'col-end-2',\n                3: 'col-end-3',\n                4: 'col-end-4',\n                5: 'col-end-5',\n                6: 'col-end-6',\n                7: 'col-end-7',\n                8: 'col-end-8',\n                9: 'col-end-9',\n                10: 'col-end-10',\n                11: 'col-end-11',\n                12: 'col-end-12',\n                13: 'col-end-13',\n                auto: 'col-end-auto'\n            },\n            rowSpan: {\n                auto: 'row-auto',\n                1: 'row-span-1',\n                2: 'row-span-2',\n                3: 'row-span-3',\n                4: 'row-span-4',\n                5: 'row-span-5',\n                6: 'row-span-6',\n                7: 'row-span-7',\n                8: 'row-span-8',\n                9: 'row-span-9',\n                10: 'row-span-10',\n                11: 'row-span-11',\n                12: 'row-span-12',\n                full: 'row-span-full'\n            },\n            rowStart: {\n                1: 'row-start-1',\n                2: 'row-start-2',\n                3: 'row-start-3',\n                4: 'row-start-4',\n                5: 'row-start-5',\n                6: 'row-start-6',\n                7: 'row-start-7',\n                8: 'row-start-8',\n                9: 'row-start-9',\n                10: 'row-start-10',\n                11: 'row-start-11',\n                12: 'row-start-12',\n                13: 'row-start-13',\n                auto: 'row-start-auto'\n            },\n            rowEnd: {\n                1: 'row-end-1',\n                2: 'row-end-2',\n                3: 'row-end-3',\n                4: 'row-end-4',\n                5: 'row-end-5',\n                6: 'row-end-6',\n                7: 'row-end-7',\n                8: 'row-end-8',\n                9: 'row-end-9',\n                10: 'row-end-10',\n                11: 'row-end-11',\n                12: 'row-end-12',\n                13: 'row-end-13',\n                auto: 'row-end-auto'\n            }\n        }\n    },\n    {\n        responsiveVariants: ['sm', 'md', 'lg', 'xl', '2xl']\n    }\n)\n\ninterface GridItemProps\n    extends Primitive.ListBoxItemProps,\n        VariantProps<typeof gridItemStyles> {\n    className?: string\n}\n\nconst GridItem = ({\n    children,\n    className,\n    colSpan,\n    rowSpan,\n    colStart,\n    colEnd,\n    rowStart,\n    rowEnd,\n    ...props\n}: GridItemProps) => {\n    const textValue = typeof children === 'string' ? children : ' '\n    return (\n        <Primitive.ListBoxItem\n            textValue={textValue}\n            className={gridItemStyles({\n                colSpan,\n                rowSpan,\n                colStart,\n                colEnd,\n                rowStart,\n                rowEnd,\n                className\n            })}\n            {...props}\n        >\n            {(values) => (\n                <>{typeof children === 'function' ? children(values) : children}</>\n            )}\n        </Primitive.ListBoxItem>\n    )\n}\n\nGrid.Item = GridItem\nexport { Grid }\n",
    "type": "ui"
  },
  "meter": {
    "component": "@/components/ui/meter",
    "raw": "'use client'\n\nimport { cn } from '@/lib/utils'\nimport { motion } from 'framer-motion'\nimport { TriangleAlert } from 'lucide-react'\nimport * as Primitive from 'react-aria-components'\n\nimport { Label } from './field'\n\nexport interface MeterProps extends Primitive.MeterProps {\n    label?: string\n}\n\nexport function Meter({ label, ...props }: MeterProps) {\n    return (\n        <Primitive.Meter\n            {...props}\n            className={cn('flex flex-col gap-1', props.className)}\n        >\n            {({ percentage, valueText }) => (\n                <>\n                    <div className='flex w-full justify-between gap-2'>\n                        <Label>{label}</Label>\n                        <span\n                            className={`text-sm ${percentage >= 80 ? 'text-danger' : 'text-muted-foreground'}`}\n                        >\n                            {percentage >= 80 && (\n                                <TriangleAlert\n                                    aria-label='Alert'\n                                    className='inline-block size-4 align-text-bottom'\n                                />\n                            )}\n                            {' ' + valueText}\n                        </span>\n                    </div>\n                    <div className='relative h-2 min-w-64 rounded-full bg-muted outline outline-1 -outline-offset-1 outline-transparent'>\n                        <motion.div\n                            className='absolute left-0 top-0 h-full rounded-full'\n                            initial={{ width: '0%', backgroundColor: getColor(0) }}\n                            animate={{\n                                width: `${percentage}%`,\n                                backgroundColor: getColor(percentage)\n                            }}\n                            transition={{ duration: 0.5 }}\n                        />\n                    </div>\n                </>\n            )}\n        </Primitive.Meter>\n    )\n}\n\nfunction getColor(percentage: number) {\n    if (percentage < 30) {\n        return '#0d6efd' // Blue\n    }\n\n    if (percentage < 50) {\n        return '#198754' // Green\n    }\n\n    if (percentage < 70) {\n        return '#ffc107' // Yellow\n    }\n\n    if (percentage < 80) {\n        return '#f97316' // Orange\n    }\n\n    return '#e11d48' // Red\n}\n",
    "type": "ui"
  },
  "grid-list": {
    "component": "@/components/ui/grid-list",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { cn } from '@/lib/utils'\nimport { GripVerticalIcon } from 'lucide-react'\nimport * as Primitive from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { Checkbox } from './checkbox'\n\ninterface GridListProps<T extends object> extends Primitive.GridListProps<T> {}\n\nconst GridList = <T extends object>({\n    selectionMode = 'single',\n    children,\n    ...props\n}: GridListProps<T>) => (\n    <Primitive.GridList\n        selectionMode={selectionMode}\n        {...props}\n        className={cn('relative overflow-auto rounded-lg border', props.className)}\n    >\n        {children}\n    </Primitive.GridList>\n)\n\nconst itemStyles = tv({\n    base: 'relative -mb-px flex cursor-default select-none gap-3 border-y px-3 py-2 text-sm text-foreground outline-none -outline-offset-2 first:rounded-t-md first:border-t-0 last:mb-0 last:rounded-b-md last:border-b-0',\n    variants: {\n        isSelected: {\n            false: 'hover:bg-secondary',\n            true: 'z-20 border-y-primary/50 bg-primary/20'\n        },\n        isDisabled: {\n            true: 'z-10 text-muted-foreground'\n        }\n    }\n})\n\nconst GridListItem = ({ children, ...props }: Primitive.GridListItemProps) => {\n    const textValue = typeof children === 'string' ? children : undefined\n    return (\n        <Primitive.GridListItem textValue={textValue} {...props} className={itemStyles}>\n            {({ selectionMode, selectionBehavior, allowsDragging }) => (\n                <>\n                    {allowsDragging && (\n                        <Primitive.Button slot='drag'>\n                            <GripVerticalIcon className='size-4 text-foreground/70' />\n                        </Primitive.Button>\n                    )}\n                    {selectionMode === 'multiple' && selectionBehavior === 'toggle' && (\n                        <Checkbox slot='selection' />\n                    )}\n                    {children}\n                </>\n            )}\n        </Primitive.GridListItem>\n    )\n}\n\nconst GridEmptyState = (props: React.HTMLAttributes<HTMLDivElement>) => (\n    <div className='p-6' {...props} />\n)\n\nGridList.Item = GridListItem\nGridList.EmptyState = GridEmptyState\n\nexport { GridList }\n",
    "type": "ui"
  },
  "command": {
    "component": "@/components/ui/command",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { cn, useMediaQuery } from '@/lib/utils'\nimport { Command as CommandPrimitive } from 'cmdk'\nimport { Search } from 'lucide-react'\nimport * as Primitive from 'react-aria-components'\n\nimport { Button } from './button'\nimport { Modal } from './modal'\n\ninterface CommandSubComponents {\n    Modal: typeof CommandModal\n    Input: typeof CommandInput\n    List: typeof CommandList\n    Empty: typeof CommandEmpty\n    Group: typeof CommandSection\n    Item: typeof CommandItem\n    Shortcut: typeof CommandKeyboard\n    Separator: typeof CommandSeparator\n}\n\ntype CommandComponent = React.ForwardRefExoticComponent<\n    React.HTMLAttributes<HTMLDivElement>\n> &\n    React.RefAttributes<HTMLDivElement> &\n    CommandSubComponents\n\nconst Command: CommandComponent = React.forwardRef<\n    React.ElementRef<typeof CommandPrimitive>,\n    React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n    <CommandPrimitive\n        ref={ref}\n        className={cn(\n            [\n                'flex h-svh w-full flex-col overflow-hidden rounded-md bg-background text-foreground sm:h-full',\n                '[&_[cmdk-group-heading]]:ml-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-0 [&_[cmdk-input-wrapper]_svg]:size-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:py-[0.70rem] [&_[cmdk-item]]:pl-3 [&_[cmdk-item]]:pr-4 [&_[cmdk-item]_svg]:mr-2 [&_[cmdk-item]_svg]:size-[1.10rem]'\n            ],\n            className\n        )}\n        {...props}\n    />\n)) as any\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandModalProps extends Primitive.ModalOverlayProps {\n    children: React.ReactNode\n}\n\nconst CommandModal = ({ children, ...props }: CommandModalProps) => {\n    const isDesktop = useMediaQuery('(min-width: 1024px)')\n    return (\n        <Modal.Overlay {...props}>\n            <Primitive.Modal\n                className={cn(\n                    'fixed bottom-0 left-[50%] top-auto z-50 grid h-[calc(100vh-35%)] w-full max-w-full translate-x-[-50%] gap-4 overflow-hidden rounded-t-xl bg-background p-0 shadow-lg ring-1 ring-border sm:bottom-auto sm:top-[6rem] sm:h-auto sm:w-full sm:max-w-2xl sm:rounded-xl',\n                    'sm:entering:slide-in-from-bottom-auto entering:duration-300 entering:animate-in entering:fade-in-0 entering:slide-in-from-bottom-1/2 entering:slide-in-from-left-1/2 entering:[transition-timing-function:ease-out] sm:entering:duration-300 sm:entering:slide-in-from-top-[2rem]',\n                    'exiting:duration-300 exiting:animate-out exiting:fade-out-0 exiting:slide-out-to-bottom-1/2 exiting:slide-out-to-left-1/2 exiting:[transition-timing-function:ease] sm:exiting:slide-out-to-top-[4rem]'\n                )}\n            >\n                <Primitive.Dialog aria-labelledby='Command'>\n                    {({ close }) => (\n                        <>\n                            <Command>{children}</Command>\n                            <Button\n                                autoFocus={!isDesktop}\n                                onPress={close}\n                                variant='outline'\n                                size='sm'\n                                className='absolute right-1.5 top-1.5'\n                            >\n                                Esc\n                            </Button>\n                        </>\n                    )}\n                </Primitive.Dialog>\n            </Primitive.Modal>\n        </Modal.Overlay>\n    )\n}\n\nconst CommandInput = React.forwardRef<\n    React.ElementRef<typeof CommandPrimitive.Input>,\n    React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => {\n    return (\n        <div className='flex items-center border-b px-3'>\n            <Search className='mr-2 size-5 shrink-0 opacity-50' />\n            <CommandPrimitive.Input\n                ref={ref}\n                className={cn(\n                    'flex h-11 w-full rounded-md bg-transparent py-3 text-base outline-none placeholder:text-muted-foreground focus:outline-none disabled:cursor-not-allowed disabled:opacity-50',\n                    className\n                )}\n                {...props}\n            />\n        </div>\n    )\n})\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n    React.ElementRef<typeof CommandPrimitive.List>,\n    React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n    <CommandPrimitive.List\n        ref={ref}\n        className={cn(\n            'overflow-y-auto overflow-x-hidden px-2 md:max-h-[456px]',\n            className\n        )}\n        {...props}\n    />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n    React.ElementRef<typeof CommandPrimitive.Empty>,\n    React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n    <CommandPrimitive.Empty\n        ref={ref}\n        className='py-6 text-center text-sm text-muted-foreground'\n        {...props}\n    />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandSection = React.forwardRef<\n    React.ElementRef<typeof CommandPrimitive.Group>,\n    React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n    <CommandPrimitive.Group\n        ref={ref}\n        className={cn(\n            'overflow-hidden px-0 py-2 text-foreground [&_[cmdk-group-heading]]:ml-0 [&_[cmdk-group-heading]]:select-none [&_[cmdk-group-heading]]:py-2 [&_[cmdk-group-heading]]:text-[0.8rem] [&_[cmdk-group-heading]]:text-muted-foreground',\n            className\n        )}\n        {...props}\n    />\n))\n\nCommandSection.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n    React.ElementRef<typeof CommandPrimitive.Separator>,\n    React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n    <CommandPrimitive.Separator\n        ref={ref}\n        className={cn('-mx-1 h-px bg-border', className)}\n        {...props}\n    />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n    React.ElementRef<typeof CommandPrimitive.Item>,\n    React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n    <CommandPrimitive.Item\n        ref={ref}\n        className={cn(\n            'relative flex cursor-default select-none items-center rounded-lg px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&[data-selected=true]_svg]:text-accent-foreground [&_svg]:shrink-0 [&_svg]:text-muted-foreground',\n            className\n        )}\n        {...props}\n    />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandKeyboard = ({\n    className,\n    ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n    return (\n        <span\n            className={cn(\n                '-mr-1 ml-auto hidden items-center gap-1 px-1 opacity-60 lg:inline-flex',\n                '[&_kbd]:inline-grid [&_kbd]:min-h-5 [&_kbd]:min-w-5 [&_kbd]:place-content-center [&_kbd]:rounded [&_kbd]:bg-background [&_kbd]:font-sans [&_kbd]:text-[.75rem] [&_kbd]:uppercase [&_kbd]:ring-1 [&_kbd]:ring-foreground/10',\n                className\n            )}\n            {...props}\n        />\n    )\n}\nCommandKeyboard.displayName = 'CommandShortcut'\n\nCommand.Empty = CommandEmpty\nCommand.Group = CommandSection\nCommand.Input = CommandInput\nCommand.Item = CommandItem\nCommand.List = CommandList\nCommand.Separator = CommandSeparator\nCommand.Shortcut = CommandKeyboard\nCommand.Modal = CommandModal\n\nexport { Command }\n",
    "type": "ui"
  },
  "field": {
    "component": "@/components/ui/field",
    "raw": "'use client'\n\nimport { cn } from '@/lib/utils'\nimport * as Primitive from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nconst fieldBorderStyles = tv({\n    base: 'group-focus-within:border-primary',\n    variants: {\n        isInvalid: {\n            true: 'border-danger group-focus-within:border-danger'\n        }\n    }\n})\n\nconst Label = (props: Primitive.LabelProps) => {\n    return (\n        <Primitive.Label\n            {...props}\n            className={cn(\n                'w-fit cursor-default text-sm font-medium text-secondary-foreground',\n                props.className\n            )}\n        />\n    )\n}\n\nconst Description = (props: Primitive.TextProps) => {\n    return (\n        <Primitive.Text\n            {...props}\n            slot='description'\n            className={cn('text-sm text-muted-foreground', props.className)}\n        />\n    )\n}\n\nconst FieldError = (props: Primitive.FieldErrorProps) => {\n    return (\n        <Primitive.FieldError\n            {...props}\n            className={cn('text-sm text-danger', props.className)}\n        />\n    )\n}\n\nconst fieldGroupStyles = tv({\n    base: [\n        'group flex h-10 items-center overflow-hidden rounded-lg border border-input bg-background transition disabled:bg-secondary disabled:opacity-50',\n        'focus-within:border-primary focus-within:ring-4 focus-within:ring-primary/20',\n        'focus-within:invalid:border-danger focus-within:invalid:ring-4 focus-within:invalid:ring-danger/20',\n        'invalid:border-danger',\n        'has-[.atrs]:shrink-0 has-[.isPfx]:pl-2.5 has-[.isSfx]:pr-2.5 has-[.atrs]:text-muted-foreground [&_[data-slot=icon]]:size-4'\n    ]\n})\n\nconst FieldGroup = (props: Primitive.GroupProps) => {\n    return (\n        <Primitive.Group\n            {...props}\n            className={Primitive.composeRenderProps(\n                props.className,\n                (className, renderProps) =>\n                    fieldGroupStyles({ ...renderProps, className })\n            )}\n        />\n    )\n}\n\nconst Input = (props: Primitive.InputProps) => {\n    return (\n        <Primitive.Input\n            {...props}\n            className={cn(\n                'w-full min-w-0 bg-transparent p-2 text-base text-foreground placeholder-muted-foreground focus:outline-none lg:text-sm',\n                props.className\n            )}\n        />\n    )\n}\n\nexport {\n    Description,\n    fieldBorderStyles,\n    FieldError,\n    FieldGroup,\n    fieldGroupStyles,\n    Input,\n    Label\n}\n",
    "type": "ui"
  },
  "number-field": {
    "component": "@/components/ui/number-field",
    "raw": "'use client'\n\nimport { cn, useMediaQuery } from '@/lib/utils'\nimport { ChevronDown, ChevronUp, Minus, Plus } from 'lucide-react'\nimport * as Primitive from 'react-aria-components'\n\nimport {\n    Description,\n    fieldBorderStyles,\n    FieldError,\n    FieldGroup,\n    Input,\n    Label\n} from './field'\n\nexport interface NumberFieldProps extends Primitive.NumberFieldProps {\n    label?: string\n    description?: string\n    placeholder?: string\n    errorMessage?: string | ((validation: Primitive.ValidationResult) => string)\n}\n\nexport function NumberField({\n    label,\n    placeholder,\n    description,\n    errorMessage,\n    ...props\n}: NumberFieldProps) {\n    const isMobile = useMediaQuery('(max-width: 768px)')\n    return (\n        <Primitive.NumberField\n            {...props}\n            className={cn('group flex flex-col gap-1', props.className)}\n        >\n            <Label>{label}</Label>\n            <FieldGroup className='group-disabled:bg-secondary'>\n                {(renderProps) => (\n                    <>\n                        {isMobile ? (\n                            <StepperButton slot='decrement' className='border-r' />\n                        ) : null}\n                        <Input placeholder={placeholder} />\n                        <div\n                            className={fieldBorderStyles({\n                                ...renderProps,\n                                className: 'grid h-10 place-content-center border-s'\n                            })}\n                        >\n                            {isMobile ? (\n                                <StepperButton slot='increment' />\n                            ) : (\n                                <div className='flex h-full flex-col'>\n                                    <StepperButton\n                                        slot='increment'\n                                        emblemType='chevron'\n                                        className='h-5 px-1'\n                                    />\n                                    <div\n                                        className={fieldBorderStyles({\n                                            ...renderProps,\n                                            className: 'border-b'\n                                        })}\n                                    />\n                                    <StepperButton\n                                        slot='decrement'\n                                        emblemType='chevron'\n                                        className='h-5 px-1'\n                                    />\n                                </div>\n                            )}\n                        </div>\n                    </>\n                )}\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </Primitive.NumberField>\n    )\n}\n\ninterface StepperButtonProps extends Primitive.ButtonProps {\n    slot: 'increment' | 'decrement'\n    emblemType?: 'chevron' | 'default'\n    className?: string\n}\n\nconst StepperButton = ({\n    slot,\n    className,\n    emblemType = 'default',\n    ...props\n}: StepperButtonProps) => {\n    const icon =\n        emblemType === 'chevron' ? (\n            slot === 'increment' ? (\n                <ChevronUp className='size-5' />\n            ) : (\n                <ChevronDown className='size-5' />\n            )\n        ) : slot === 'increment' ? (\n            <Plus />\n        ) : (\n            <Minus />\n        )\n    return (\n        <Primitive.Button\n            className={cn(\n                'h-10 cursor-default px-2 text-muted-foreground pressed:bg-primary pressed:text-primary-foreground group-disabled:bg-secondary',\n                className\n            )}\n            slot={slot}\n            {...props}\n        >\n            {icon}\n        </Primitive.Button>\n    )\n}\n",
    "type": "ui"
  },
  "drop-zone": {
    "component": "@/components/ui/drop-zone",
    "raw": "'use client'\n\nimport { cn } from '@/lib/utils'\nimport * as Primitive from 'react-aria-components'\n\nconst DropZone = ({ className, ...props }: Primitive.DropZoneProps) => (\n    <Primitive.DropZone\n        className={(values) =>\n            cn(\n                'flex h-[150px] w-[300px] flex-col items-center justify-center gap-2 rounded-md border border-dashed text-sm data-[drop-target]:border-solid data-[drop-target]:border-primary data-[drop-target]:bg-primary',\n                typeof className === 'function' ? className(values) : className\n            )\n        }\n        {...props}\n    />\n)\n\nexport { DropZone }\n",
    "type": "ui"
  },
  "progress": {
    "component": "@/components/ui/progress",
    "raw": "'use client'\n\nimport { cn } from '@/lib/utils'\nimport { motion } from 'framer-motion'\nimport * as Primitive from 'react-aria-components'\n\nimport { Label } from './field'\n\nexport interface ProgressProps extends Primitive.ProgressBarProps {\n    label?: string\n}\n\nfunction Progress({ label, ...props }: ProgressProps) {\n    return (\n        <Primitive.ProgressBar\n            {...props}\n            className={cn(props.className, 'flex flex-col gap-1')}\n        >\n            {({ percentage, valueText, isIndeterminate }) => (\n                <>\n                    <div className='flex justify-between gap-2'>\n                        <Label>{label}</Label>\n                        <span className='text-sm text-muted-foreground'>{valueText}</span>\n                    </div>\n                    <div className='relative h-2 min-w-64 overflow-hidden rounded-full bg-secondary outline outline-1 -outline-offset-1 outline-transparent'>\n                        {!isIndeterminate ? (\n                            <motion.div\n                                className='absolute left-0 top-0 h-full rounded-full bg-primary'\n                                initial={{ width: '0%' }}\n                                animate={{ width: `${percentage}%` }}\n                                transition={{ duration: 0.5, ease: 'easeInOut' }}\n                            />\n                        ) : (\n                            <motion.div\n                                className='absolute top-0 h-full rounded-full bg-primary'\n                                initial={{ left: '0%', width: '40%' }}\n                                animate={{ left: ['0%', '100%', '0%'] }}\n                                transition={{\n                                    repeat: Infinity,\n                                    duration: 2,\n                                    ease: 'easeInOut'\n                                }}\n                            />\n                        )}\n                    </div>\n                </>\n            )}\n        </Primitive.ProgressBar>\n    )\n}\n\nexport { Progress }\n",
    "type": "ui"
  },
  "dialog": {
    "component": "@/components/ui/dialog",
    "raw": "'use client'\n\nimport { cn } from '@/lib/utils'\nimport * as Primitive from 'react-aria-components'\n\nconst Dialog = ({ className, ...props }: Primitive.DialogProps) => {\n    return (\n        <Primitive.Dialog\n            {...props}\n            className={cn(\n                'relative max-h-[inherit] overflow-y-auto p-4 outline-0 focus:outline-none [[data-placement]>&]:p-4',\n                className\n            )}\n        />\n    )\n}\n\nexport { Dialog }\n",
    "type": "ui"
  },
  "button": {
    "component": "@/components/ui/button",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { cn } from '@/lib/utils'\nimport * as ButtonPrimitive from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nconst buttonVariants = tv({\n    base: 'inline-flex items-center justify-center hover:brightness-110 pressed:brightness-90 gap-1.5 whitespace-nowrap text-sm font-medium transition focus:outline-none disabled:pointer-events-none disabled:opacity-50 [&_svg]:size-4',\n    variants: {\n        variant: {\n            primary:\n                'bg-primary text-primary-foreground pressed:ring pressed:ring-primary/40 shadow-sm',\n            secondary:\n                'bg-secondary text-secondary-foreground pressed:ring pressed:ring-secondary/40 shadow-sm',\n            danger: 'bg-danger text-danger-foreground pressed:ring pressed:ring-danger/40 shadow-sm',\n            success:\n                'bg-success text-success-foreground pressed:ring pressed:ring-success/40 shadow-sm',\n            info: 'bg-info text-info-foreground pressed:ring pressed:ring-info/40 shadow-sm',\n            warning:\n                'bg-warning text-warning-foreground pressed:ring pressed:ring-warning/40 shadow-sm',\n            dark: 'bg-dark text-dark-foreground pressed:ring pressed:ring-dark/40 shadow-sm',\n            outline:\n                'border bg-transparent text-foreground shadow-sm hover:bg-muted-foreground pressed:bg-muted',\n            ghost: 'text-foreground bg-transparent hover:bg-muted pressed:bg-muted-foreground'\n        },\n        size: {\n            md: 'h-10 px-4 py-2',\n            sm: 'h-9 px-3',\n            lg: 'h-11 px-8',\n            icon: 'h-10 w-10'\n        },\n        shape: {\n            square: 'rounded-md',\n            circle: 'rounded-full'\n        }\n    },\n    defaultVariants: {\n        variant: 'primary',\n        size: 'md',\n        shape: 'square'\n    }\n})\n\nexport interface ButtonProps\n    extends ButtonPrimitive.ButtonProps,\n        VariantProps<typeof buttonVariants> {}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n    ({ className, variant, size, shape, ...props }, ref) => {\n        return (\n            <ButtonPrimitive.Button\n                className={(values) =>\n                    cn(\n                        buttonVariants({\n                            variant,\n                            size,\n                            shape,\n                            className:\n                                typeof className === 'function'\n                                    ? className(values)\n                                    : className\n                        })\n                    )\n                }\n                ref={ref}\n                {...props}\n            />\n        )\n    }\n)\nButton.displayName = 'Button'\n\nexport { Button, buttonVariants }\n",
    "type": "ui"
  },
  "tooltip": {
    "component": "@/components/ui/tooltip",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport * as Primitive from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nexport interface TooltipProps extends Omit<Primitive.TooltipProps, 'children'> {\n    children: React.ReactNode\n}\n\nconst tooltipStyles = tv({\n    base: [\n        'group rounded-lg border bg-background px-1.5 py-1 text-sm text-foreground will-change-transform dark:shadow-none',\n        // Placement\n        'placement-left:slide-in-from-right-1 placement-right:slide-in-from-left-1 placement-top:slide-in-from-bottom-1 placement-bottom:slide-in-from-top-1'\n    ],\n    variants: {\n        isEntering: { true: 'animate-in fade-in' },\n        isExiting: { true: 'animate-in fade-in direction-reverse' }\n    }\n})\n\nconst Tooltip = (props: TooltipProps) => {\n    return <Primitive.TooltipTrigger {...props} />\n}\n\nconst TooltipTrigger = Primitive.Button\n\nconst TooltipContent = ({ children, ...props }: TooltipProps) => {\n    return (\n        <Primitive.Tooltip\n            {...props}\n            offset={10}\n            className={Primitive.composeRenderProps(\n                props.className,\n                (className, renderProps) =>\n                    tooltipStyles({\n                        ...renderProps,\n                        className\n                    })\n            )}\n        >\n            <Primitive.OverlayArrow>\n                <svg\n                    width={8}\n                    height={8}\n                    viewBox='0 0 8 8'\n                    className='fill-popover stroke-border group-placement-left:-rotate-90 group-placement-right:rotate-90 group-placement-bottom:rotate-180'\n                >\n                    <path d='M0 0 L4 4 L8 0' />\n                </svg>\n            </Primitive.OverlayArrow>\n            {children}\n        </Primitive.Tooltip>\n    )\n}\n\nTooltip.Content = TooltipContent\nTooltip.Trigger = TooltipTrigger\n\nexport { Tooltip }\n",
    "type": "ui"
  },
  "dropdown": {
    "component": "@/components/ui/dropdown",
    "raw": "'use client'\n\nimport { Check } from 'lucide-react'\nimport * as Primitive from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nconst dropdownItemStyles = tv({\n    base: [\n        'group flex cursor-default select-none items-center gap-x-1.5 rounded-md py-2 pl-2.5 pr-1 text-base outline outline-0 lg:text-sm',\n        '[&_[data-slot=avatar]]:-mr-0.5 [&_[data-slot=avatar]]:size-6 sm:[&_[data-slot=avatar]]:size-5',\n        '[&_svg]:size-4',\n        'has-submenu:open:data-[danger=true]:bg-danger has-submenu:open:data-[danger=true]:text-danger',\n        'has-submenu:open:bg-primary has-submenu:open:text-primary-foreground'\n    ],\n    variants: {\n        isDisabled: {\n            false: 'text-foreground',\n            true: 'text-muted-foreground'\n        },\n        isFocused: {\n            false: 'data-[danger=true]:text-danger',\n            true: [\n                'bg-primary text-primary-foreground',\n                'data-[danger=true]:bg-danger data-[danger=true]:text-danger-foreground'\n            ]\n        }\n    },\n    compoundVariants: [\n        {\n            isFocused: false,\n            isOpen: true,\n            className: 'bg-background/60'\n        }\n    ]\n})\n\nconst DropdownSection = <T extends object>(props: DropdownSectionProps<T>) => {\n    return (\n        <Primitive.Section className=\"after:block after:h-[5px] after:content-[''] first:-mt-[5px]\">\n            <Primitive.Header className='dsh mb-0.5 px-2 text-sm text-muted-foreground'>\n                {props.title}\n            </Primitive.Header>\n            <Primitive.Collection items={props.items}>\n                {props.children}\n            </Primitive.Collection>\n        </Primitive.Section>\n    )\n}\n\nconst DropdownItem = (props: Primitive.ListBoxItemProps) => {\n    const textValue =\n        props.textValue ||\n        (typeof props.children === 'string' ? props.children : undefined)\n    return (\n        <Primitive.ListBoxItem\n            {...props}\n            textValue={textValue}\n            className={Primitive.composeRenderProps(\n                props.className,\n                (className, renderProps) =>\n                    dropdownItemStyles({ ...renderProps, className })\n            )}\n        >\n            {Primitive.composeRenderProps(props.children, (children, { isSelected }) => (\n                <>\n                    <span className='flex flex-1 items-center gap-2 truncate font-normal group-selected:font-semibold'>\n                        {children}\n                    </span>\n                    <span className='flex w-5 items-center'>\n                        {isSelected && <Check className='h-4 w-4' />}\n                    </span>\n                </>\n            ))}\n        </Primitive.ListBoxItem>\n    )\n}\n\ninterface DropdownSectionProps<T> extends Primitive.SectionProps<T> {\n    title?: string\n}\n\n// Note: This is not exposed component, but it's used in other components to render dropdowns.\nexport { DropdownItem, dropdownItemStyles, DropdownSection, type DropdownSectionProps }\n",
    "type": "ui"
  },
  "input-otp": {
    "component": "@/components/ui/input-otp",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { cn } from '@/lib/utils'\nimport { OTPInput, OTPInputContext } from 'input-otp'\nimport { Circle } from 'lucide-react'\n\ninterface InputOTPSubComponents {\n    Group: typeof InputOTPGroup\n    Slot: typeof InputOTPSlot\n    Separator: typeof InputOTPSeparator\n}\n\ntype InputOTPProps = React.ComponentPropsWithoutRef<typeof OTPInput>\ntype InputOTPComponent = React.ForwardRefExoticComponent<InputOTPProps> &\n    InputOTPSubComponents\n\nconst InputOTP: InputOTPComponent = React.forwardRef<\n    React.ElementRef<typeof OTPInput>,\n    React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n    <OTPInput\n        data-1p-ignore\n        ref={ref}\n        containerClassName={cn(\n            'flex items-center gap-2 has-[:disabled]:opacity-70',\n            containerClassName\n        )}\n        className={cn('disabled:cursor-not-allowed', className)}\n        {...props}\n    />\n)) as InputOTPComponent\nInputOTP.displayName = 'InputOTP'\n\nconst InputOTPGroup = React.forwardRef<\n    React.ElementRef<'div'>,\n    React.ComponentPropsWithoutRef<'div'>\n>(({ className, ...props }, ref) => (\n    <div ref={ref} className={cn('flex items-center gap-x-1.5', className)} {...props} />\n))\nInputOTPGroup.displayName = 'InputOTPGroup'\n\nconst InputOTPSlot = React.forwardRef<\n    React.ElementRef<'div'>,\n    React.ComponentPropsWithoutRef<'div'> & { index: number }\n>(({ index, className, ...props }, ref) => {\n    const inputOTPContext = React.useContext(OTPInputContext)\n    const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n    return (\n        <div\n            ref={ref}\n            className={cn(\n                'relative flex size-10 items-center justify-center rounded-md border border-input text-sm transition-all',\n                isActive && 'z-10 border-primary ring-4 ring-primary/20',\n                className\n            )}\n            {...props}\n        >\n            {char}\n            {hasFakeCaret && (\n                <div className='pointer-events-none absolute inset-0 flex items-center justify-center'>\n                    <div className='animate-caret-blink h-4 w-px bg-foreground duration-1000' />\n                </div>\n            )}\n        </div>\n    )\n})\nInputOTPSlot.displayName = 'InputOTPSlot'\n\nconst InputOTPSeparator = React.forwardRef<\n    React.ElementRef<'div'>,\n    React.ComponentPropsWithoutRef<'div'>\n>(({ ...props }, ref) => (\n    <div ref={ref} role='separator' {...props}>\n        <Circle className='size-2 fill-inherit' />\n    </div>\n))\nInputOTPSeparator.displayName = 'InputOTPSeparator'\n\nInputOTP.Group = InputOTPGroup\nInputOTP.Slot = InputOTPSlot\nInputOTP.Separator = InputOTPSeparator\n\nexport { InputOTP }\n",
    "type": "ui"
  },
  "date-picker": {
    "component": "@/components/ui/date-picker",
    "raw": "'use client'\n\nimport { Popover } from '@/components/ui/popover'\nimport { cn } from '@/lib/utils'\nimport { CalendarIcon } from 'lucide-react'\nimport * as Primitive from 'react-aria-components'\n\nimport { Button } from './button'\nimport { Calendar } from './calendar'\nimport { DateInput } from './date-field'\nimport { Dialog } from './dialog'\nimport { Description, FieldError, FieldGroup, Label } from './field'\n\ninterface DatePickerProps<T extends Primitive.DateValue>\n    extends Primitive.DatePickerProps<T> {\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: Primitive.ValidationResult) => string)\n}\n\nfunction DatePicker<T extends Primitive.DateValue>({\n    label,\n    description,\n    errorMessage,\n    ...props\n}: DatePickerProps<T>) {\n    return (\n        <Primitive.DatePicker\n            {...props}\n            className={cn('group flex flex-col gap-1', props.className)}\n        >\n            {label && <Label>{label}</Label>}\n            <FieldGroup className='min-w-40'>\n                <DateInput className='w-full min-w-[inherit] px-2 font-mono uppercase lg:text-sm' />\n                <Button\n                    size='icon'\n                    variant='ghost'\n                    className='group mr-1 h-7 w-8 rounded outline-offset-0 hover:bg-transparent pressed:bg-transparent'\n                >\n                    <CalendarIcon\n                        aria-hidden\n                        className='size-4 text-muted-foreground group-open:text-foreground'\n                    />\n                </Button>\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n            <Popover.Content className='rounded-xl border bg-background p-0'>\n                <Dialog>\n                    <Calendar />\n                </Dialog>\n            </Popover.Content>\n        </Primitive.DatePicker>\n    )\n}\n\ninterface DateRangePickerProps<T extends Primitive.DateValue>\n    extends Primitive.DateRangePickerProps<T> {\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: Primitive.ValidationResult) => string)\n}\n\nfunction DateRangePicker<T extends Primitive.DateValue>({\n    label,\n    description,\n    errorMessage,\n    ...props\n}: DateRangePickerProps<T>) {\n    return (\n        <Primitive.DateRangePicker\n            {...props}\n            className={cn('group flex flex-col gap-1', props.className)}\n        >\n            {label && <Label>{label}</Label>}\n            <FieldGroup className='w-auto min-w-[208px]'>\n                <DateInput\n                    slot='start'\n                    className='min-w-[ineherit] px-2 font-mono uppercase lg:text-sm'\n                />\n                <span\n                    aria-hidden='true'\n                    className='text-foreground group-disabled:text-muted-foreground'\n                >\n                    –\n                </span>\n                <DateInput\n                    slot='end'\n                    className='flex-1 px-2 py-1.5 font-mono uppercase lg:text-sm'\n                />\n                <Button\n                    size='icon'\n                    variant='ghost'\n                    className='group mr-1 h-7 w-8 rounded outline-offset-0 hover:bg-transparent pressed:bg-transparent'\n                >\n                    <CalendarIcon\n                        aria-hidden\n                        className='size-4 text-muted-foreground group-open:text-foreground'\n                    />\n                </Button>\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n            <Popover.Content className='rounded-xl border bg-background p-0'>\n                <Dialog>\n                    <Calendar.RangeCalendar />\n                </Dialog>\n            </Popover.Content>\n        </Primitive.DateRangePicker>\n    )\n}\n\nexport { DatePicker, DateRangePicker }\n",
    "type": "ui"
  },
  "separator": {
    "component": "@/components/ui/separator",
    "raw": "'use client'\n\nimport { cn } from '@/lib/utils'\nimport * as Primitive from 'react-aria-components'\n\nconst Separator = (props: Primitive.SeparatorProps) => (\n    <Primitive.Separator\n        {...props}\n        className={cn(\n            'bg-border shrink-0',\n            props.orientation === 'vertical' ? 'h-full w-px' : 'w-full h-px',\n            props.className\n        )}\n    />\n)\n\nexport { Separator }\n",
    "type": "ui"
  },
  "search-field": {
    "component": "@/components/ui/search-field",
    "raw": "'use client'\n\nimport { cn } from '@/lib/utils'\nimport { Search, X } from 'lucide-react'\nimport * as Primitive from 'react-aria-components'\n\nimport { Button } from './button'\nimport { Description, FieldError, FieldGroup, Input, Label } from './field'\n\nexport interface SearchFieldProps extends Primitive.SearchFieldProps {\n    label?: string\n    placeholder?: string\n    description?: string\n    errorMessage?: string | ((validation: Primitive.ValidationResult) => string)\n}\n\nfunction SearchField({\n    placeholder = 'Search',\n    label,\n    description,\n    errorMessage,\n    ...props\n}: SearchFieldProps) {\n    return (\n        <Primitive.SearchField\n            {...props}\n            className={cn('group flex min-w-[40px] flex-col gap-1', props.className)}\n        >\n            {label && <Label>{label}</Label>}\n            <FieldGroup>\n                <Search\n                    aria-hidden\n                    className='ml-2 size-4 shrink-0 text-muted-foreground group-disabled:text-muted-foreground/70'\n                />\n                <Input\n                    placeholder={placeholder}\n                    className='[&::-webkit-search-cancel-button]:hidden'\n                />\n                <Button\n                    size='icon'\n                    variant='ghost'\n                    className='mr-1 size-8 text-muted-foreground group-empty:invisible hover:bg-transparent pressed:text-foreground'\n                >\n                    <X aria-hidden className='size-4' />\n                </Button>\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </Primitive.SearchField>\n    )\n}\n\nexport { SearchField }\n",
    "type": "ui"
  },
  "heading": {
    "component": "@/components/ui/heading",
    "raw": "'use client'\n\nimport { cn } from '@/lib/utils'\nimport * as Primitive from 'react-aria-components'\n\nexport function Heading({ className, level = 1, ...props }: Primitive.HeadingProps) {\n    const textSize: Record<number, string> = {\n        1: 'text-3xl',\n        2: 'text-2xl',\n        3: 'text-xl',\n        4: 'text-lg',\n        5: 'text-md',\n        6: 'text-sm'\n    }\n    return (\n        <Primitive.Heading\n            level={level}\n            className={cn('font-semibold text-foreground', textSize[level], className)}\n            {...props}\n        />\n    )\n}\n\nexport function Subheading({ className, level = 2, ...props }: Primitive.HeadingProps) {\n    return (\n        <Primitive.Heading\n            level={level}\n            {...props}\n            className={cn(\n                className,\n                'text-base/7 font-semibold text-foreground sm:text-sm/6'\n            )}\n        />\n    )\n}\n",
    "type": "ui"
  },
  "dynamic-overlay": {
    "component": "@/components/ui/dynamic-overlay",
    "raw": "'use client'\n\nimport { cn, useMediaQuery } from '@/lib/utils'\nimport * as Primitive from 'react-aria-components'\nimport type { VariantProps } from 'tailwind-variants'\nimport { tv } from 'tailwind-variants'\n\nimport { Modal } from './modal'\nimport { Popover } from './popover'\n\nconst drawerStyles = tv({\n    base: [\n        'fixed bottom-0 top-auto z-50 w-full max-w-xl place-content-center gap-4 rounded-t-xl border border-b-transparent bg-background shadow-lg outline-none',\n        'entering:animate-in entering:fade-in-0 entering:slide-in-from-bottom-1/2 entering:[transition-timing-function:ease-out',\n        'exiting:animate-out exiting:fade-out-0 exiting:slide-out-to-bottom-1/2 exiting:[transition-timing-function:ease]'\n    ]\n})\n\ninterface OverlayProps\n    extends Omit<Primitive.DialogProps, 'children' | 'className' | 'style'>,\n        Omit<Primitive.PopoverProps, 'children' | 'className' | 'style'>,\n        Omit<VariantProps<typeof drawerStyles>, 'className'> {\n    className?:\n        | string\n        | Primitive.DialogProps['className']\n        | Primitive.PopoverProps['className']\n    children: React.ReactNode\n}\n\nconst DynamicOverlay = ({ className, children, ...props }: OverlayProps) => {\n    const isMobile = useMediaQuery('(max-width: 600px)')\n\n    return isMobile ? (\n        <Primitive.Modal\n            {...props}\n            isDismissable\n            className={cn(drawerStyles(), className)}\n        >\n            {children}\n\n            <div className='pb-4 px-4 max-w-[inherit]'>\n                <Modal.Close className='w-full'>Close</Modal.Close>\n            </div>\n        </Primitive.Modal>\n    ) : (\n        <Popover.Picker {...props} className={cn('', className)}>\n            {children}\n        </Popover.Picker>\n    )\n}\n\nexport { DynamicOverlay }\n",
    "type": "ui"
  },
  "accordion": {
    "component": "@/components/ui/accordion",
    "raw": "'use client'\n\nimport React, { createContext, useContext, useState } from 'react'\n\nimport { cn } from '@/lib/utils'\nimport { AnimatePresence, motion } from 'framer-motion'\nimport { Button } from 'react-aria-components'\n\ninterface AccordionContext {\n    isActive: boolean\n    index: number\n    onChangeIndex: (index: number) => void\n    className?: string\n}\n\nconst AccordionContext = createContext<AccordionContext>({\n    isActive: false,\n    index: 0,\n    onChangeIndex: () => {},\n    className: ''\n})\nconst useAccordion = () => useContext(AccordionContext)\n\ninterface AccordionProps {\n    children: React.ReactNode\n    multiple?: boolean\n    defaultValue?: any\n    className?: string\n}\n\nfunction Accordion({ className, children, multiple, defaultValue }: AccordionProps) {\n    const [activeIndex, setActiveIndex] = useState(\n        defaultValue !== undefined ? defaultValue : 0\n    )\n\n    function onChangeIndex(index: any) {\n        setActiveIndex((currentActiveIndex: any) => {\n            if (!multiple && typeof index === 'number') {\n                return index === activeIndex ? -1 : index\n            }\n\n            if (Array.isArray(currentActiveIndex) && currentActiveIndex.includes(index)) {\n                return currentActiveIndex.filter((i) => i !== index)\n            }\n\n            if (Array.isArray(currentActiveIndex)) {\n                return currentActiveIndex.concat(index)\n            }\n\n            return [index as any]\n        })\n    }\n\n    return React.Children.map(children, (child, index) => {\n        const isActive =\n            multiple && Array.isArray(activeIndex)\n                ? activeIndex.includes(index)\n                : activeIndex === index\n        return (\n            <AccordionContext.Provider\n                value={{ isActive, index, onChangeIndex, className }}\n            >\n                {child}\n            </AccordionContext.Provider>\n        )\n    })\n}\n\ninterface AccordionItemProps {\n    children: React.ReactNode\n    className?: string\n}\n\nfunction AccordionItem({ className, children, ...props }: AccordionItemProps) {\n    const { isActive } = useAccordion()\n    return (\n        <div\n            data-state={isActive ? 'open' : 'closed'}\n            className={cn('relative w-full overflow-hidden border-b', className)}\n            {...props}\n        >\n            {children}\n        </div>\n    )\n}\n\ninterface AccordionTriggerProps {\n    children: React.ReactNode\n    className?: string\n}\n\nfunction AccordionTrigger({ className, children, ...props }: AccordionTriggerProps) {\n    const { isActive, index, onChangeIndex } = useAccordion()\n\n    return (\n        <Button\n            data-state={isActive ? 'open' : 'closed'}\n            className={cn(\n                'flex w-full flex-1 items-center justify-between rounded-md py-4 text-base font-medium outline-none transition-all',\n                className\n            )}\n            onPress={() => onChangeIndex(index)}\n            {...props}\n        >\n            <span className='flex items-center gap-2'>{children}</span>\n            <svg\n                className={`${isActive ? 'rotate-180' : 'rotate-0'} ms-auto size-4 transition`}\n                xmlns='http://www.w3.org/2000/svg'\n                viewBox='0 0 24 24'\n            >\n                <path\n                    fill='none'\n                    stroke='currentColor'\n                    strokeLinecap='round'\n                    strokeLinejoin='round'\n                    strokeWidth={2}\n                    d='m6 9l6 6l6-6'\n                ></path>\n            </svg>\n        </Button>\n    )\n}\n\ninterface AccordionContentProps {\n    children: React.ReactNode\n    className?: string\n    active?: boolean\n}\n\nfunction AccordionContent({\n    className,\n    active,\n    children,\n    ...props\n}: AccordionContentProps) {\n    const { isActive } = useAccordion()\n\n    const open = isActive || active\n\n    return (\n        <AnimatePresence initial={open}>\n            {open && (\n                <motion.div\n                    initial={{ height: 0 }}\n                    animate={{ height: 'auto' }}\n                    exit={{ height: 0 }}\n                    transition={{ type: 'spring', duration: 0.4, bounce: 0 }}\n                >\n                    <div\n                        className={cn(\n                            'overflow-hidden pb-4 text-sm transition-all',\n                            className\n                        )}\n                        {...props}\n                    >\n                        {children}\n                    </div>\n                </motion.div>\n            )}\n        </AnimatePresence>\n    )\n}\n\nAccordion.Item = AccordionItem\nAccordion.Trigger = AccordionTrigger\nAccordion.Content = AccordionContent\n\nexport { Accordion }\n",
    "type": "ui"
  }
}