{
  "drag-and-drop/drop-zone-demo": {
    "component": "@/components/docs/drag-and-drop/drop-zone-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DropZone, Label } from '@/components/ui'\n\nexport default function DropZoneDemo() {\n    const [dropped, setDropped] = React.useState(false)\n\n    return (\n        <DropZone onDrop={() => setDropped(true)}>\n            <Label>{dropped ? 'Drop nailed' : 'Toss your stuff here'}</Label>\n        </DropZone>\n    )\n}\n",
    "type": "docs"
  },
  "drag-and-drop/drop-zone-and-file-trigger-demo": {
    "component": "@/components/docs/drag-and-drop/drop-zone-and-file-trigger-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DropZone, Label } from '@/components/ui'\n\nexport default function DropZoneDemo() {\n    const [dropped, setDropped] = React.useState(false)\n\n    return (\n        <DropZone onDrop={() => setDropped(true)}>\n            <Label>{dropped ? 'Drop nailed' : 'Toss your stuff here'}</Label>\n        </DropZone>\n    )\n}\n",
    "type": "docs"
  },
  "navigation/breadcrumbs-demo": {
    "component": "@/components/docs/navigation/breadcrumbs-demo",
    "raw": "'use client'\n\nimport { Breadcrumb, Breadcrumbs } from '@/components/ui'\n\nexport default function BreadcrumbsDemo() {\n    return (\n        <Breadcrumbs onAction={() => {}}>\n            <Breadcrumb href='/'>Home</Breadcrumb>\n            <Breadcrumb href='/docs'>Docs</Breadcrumb>\n            <Breadcrumb href='/docs/components'>Components</Breadcrumb>\n            <Breadcrumb href='/docs/components/navigation'>Navigations</Breadcrumb>\n            <Breadcrumb>Breadcrumbs</Breadcrumb>\n        </Breadcrumbs>\n    )\n}\n",
    "type": "docs"
  },
  "navigation/pagination-dynamic-demo": {
    "component": "@/components/docs/navigation/pagination-dynamic-demo",
    "raw": "'use client'\n\nimport { Pagination } from '@/components/ui'\n\nconst pages = Array.from({ length: 6 }, (_, i) => ({ value: i + 1 }))\nexport default function PaginationDynamicDemo() {\n    return (\n        <Pagination>\n            <Pagination.List>\n                <Pagination.Item role='first' href='#' />\n                <Pagination.Item role='previous' href='#' />\n                <Pagination.Section\n                    aria-label='Pagination. Segment'\n                    className='rounded-lg lg:hidden border'\n                >\n                    <Pagination.Item role='label'>1</Pagination.Item>\n                    <Pagination.Item role='separator' />\n                    <Pagination.Item className='text-muted-foreground' role='label'>\n                        10\n                    </Pagination.Item>\n                </Pagination.Section>\n                <Pagination.Section\n                    aria-label='Pagination. Segment'\n                    className='hidden lg:flex'\n                    items={pages}\n                >\n                    {(item) => (\n                        <Pagination.Item\n                            id={item.value.toString()}\n                            isCurrent={item.value === 4}\n                            href='#'\n                        >\n                            {item.value}\n                        </Pagination.Item>\n                    )}\n                </Pagination.Section>\n                <Pagination.Item role='next' href='#' />\n                <Pagination.Item role='last' href='#' />\n            </Pagination.List>\n        </Pagination>\n    )\n}\n",
    "type": "docs"
  },
  "navigation/tabs-orientation-demo": {
    "component": "@/components/docs/navigation/tabs-orientation-demo",
    "raw": "'use client'\n\nimport { Tabs } from '@/components/ui'\n\nexport default function TabsOrientationDemo() {\n    return (\n        <Tabs orientation='vertical' aria-label='Packages'>\n            <Tabs.List>\n                <Tabs.Label id='t1'>First Tab</Tabs.Label>\n                <Tabs.Label id='t2'>Second Tab</Tabs.Label>\n                <Tabs.Label id='t3'>Third Tab</Tabs.Label>\n            </Tabs.List>\n            <Tabs.Content id='t1'>\n                Lorem ipsum dolor sit amet consectetur adipisicing elit.\n            </Tabs.Content>\n            <Tabs.Content id='t2'>\n                Consectetur adipisicing elit. Quibusdam, suscipit.\n            </Tabs.Content>\n            <Tabs.Content id='t3'>\n                Amet fuga reprehenderit earum adipisci maiores voluptas.\n            </Tabs.Content>\n        </Tabs>\n    )\n}\n",
    "type": "docs"
  },
  "navigation/tabs-demo": {
    "component": "@/components/docs/navigation/tabs-demo",
    "raw": "'use client'\n\nimport { Tabs } from '@/components/ui'\n\nexport default function TabsDemo() {\n    return (\n        <Tabs aria-label='Packages'>\n            <Tabs.List>\n                <Tabs.Label id='t1'>First Tab</Tabs.Label>\n                <Tabs.Label id='t2'>Second Tab</Tabs.Label>\n                <Tabs.Label id='t3'>Third Tab</Tabs.Label>\n            </Tabs.List>\n            <Tabs.Content id='t1'>\n                Lorem ipsum dolor sit amet consectetur adipisicing elit.\n            </Tabs.Content>\n            <Tabs.Content id='t2'>\n                Consectetur adipisicing elit. Quibusdam, suscipit.\n            </Tabs.Content>\n            <Tabs.Content id='t3'>\n                Amet fuga reprehenderit earum adipisci maiores voluptas.\n            </Tabs.Content>\n        </Tabs>\n    )\n}\n",
    "type": "docs"
  },
  "navigation/pagination-demo": {
    "component": "@/components/docs/navigation/pagination-demo",
    "raw": "'use client'\n\nimport { Pagination } from '@/components/ui'\n\nexport default function PaginationDemo() {\n    return (\n        <Pagination>\n            <Pagination.List>\n                <Pagination.Item role='first' href='#' />\n                <Pagination.Item role='previous' href='#' />\n                <Pagination.Item href='#'>1</Pagination.Item>\n                <Pagination.Item href='#' isCurrent>\n                    2\n                </Pagination.Item>\n                <Pagination.Item role='ellipsis' />\n                <Pagination.Item role='next' href='#' />\n                <Pagination.Item role='last' href='#' />\n            </Pagination.List>\n        </Pagination>\n    )\n}\n",
    "type": "docs"
  },
  "navigation/pagination-simple-demo": {
    "component": "@/components/docs/navigation/pagination-simple-demo",
    "raw": "'use client'\n\nimport { Pagination } from '@/components/ui'\n\nexport default function PaginationSimpleDemo() {\n    return (\n        <Pagination>\n            <Pagination.List>\n                <Pagination.Item role='first' href='#' />\n                <Pagination.Item role='previous' href='#' />\n                <Pagination.Section\n                    aria-label='Pagination. Segment'\n                    className='rounded-lg border'\n                >\n                    <Pagination.Item role='label'>1</Pagination.Item>\n                    <Pagination.Item role='separator' />\n                    <Pagination.Item className='text-muted-foreground' role='label'>\n                        10\n                    </Pagination.Item>\n                </Pagination.Section>\n                <Pagination.Item role='next' href='#' />\n                <Pagination.Item role='last' href='#' />\n            </Pagination.List>\n        </Pagination>\n    )\n}\n",
    "type": "docs"
  },
  "navigation/link-demo": {
    "component": "@/components/docs/navigation/link-demo",
    "raw": "'use client'\n\nimport { Link } from '@/components/ui'\n\nexport default function LinkDemo() {\n    return <Link href='/'>Go Home</Link>\n}\n",
    "type": "docs"
  },
  "statuses/toaster-status-demo": {
    "component": "@/components/docs/statuses/toaster-status-demo",
    "raw": "import { toast } from 'sonner'\n\nimport { Button } from '@/components/ui'\n\nexport default function ToasterStatusDemo() {\n    return (\n        <div className='grid grid-cols-2 gap-3'>\n            <Button\n                variant='danger'\n                size='sm'\n                onPress={() => toast.error('The registration failed')}\n            >\n                Error\n            </Button>\n            <Button\n                variant='success'\n                size='sm'\n                onPress={() => toast.success('The registration was successful.')}\n            >\n                Success\n            </Button>\n            <Button\n                variant='warning'\n                size='sm'\n                onPress={() => toast.warning('There was an issue during registration')}\n            >\n                Warning\n            </Button>\n            <Button\n                variant='info'\n                size='sm'\n                onPress={() =>\n                    toast.info('Here is some information about your registration.')\n                }\n            >\n                Info\n            </Button>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "statuses/rating-specific-value-demo": {
    "component": "@/components/docs/statuses/rating-specific-value-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Rating } from '@/components/ui'\n\nexport default function RatingSpecificValueDemo() {\n    const [value, setValue] = React.useState(1)\n\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            setValue((prev) => (prev < 15 ? prev + 1 : 15))\n        }, 50)\n\n        return () => clearInterval(interval)\n    }, [])\n    return <Rating maxValue={15} value={value} shape='star' size='md' />\n}\n",
    "type": "docs"
  },
  "statuses/toaster-action-demo": {
    "component": "@/components/docs/statuses/toaster-action-demo",
    "raw": "import { toast } from 'sonner'\n\nimport { Button } from '@/components/ui'\n\nexport default function ToasterActionDemo() {\n    return (\n        <div className='flex gap-3'>\n            <Button\n                variant='outline'\n                size='sm'\n                onPress={() =>\n                    toast('New comment on your post!', {\n                        action: {\n                            label: 'View',\n                            onClick: () => alert('Viewed')\n                        }\n                    })\n                }\n            >\n                Action\n            </Button>\n            <Button\n                variant='outline'\n                size='sm'\n                onPress={() =>\n                    toast('New comment on your post!', {\n                        cancel: {\n                            label: 'Cancel',\n                            onClick: () => alert('Cancelled')\n                        }\n                    })\n                }\n            >\n                Cancel\n            </Button>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "statuses/progress-bar-demo": {
    "component": "@/components/docs/statuses/progress-bar-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Progress } from '@/components/ui'\n\nexport default function ProgressDemo() {\n    const [value, setValue] = React.useState(1)\n\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            setValue((prev) => (prev < 100 ? prev + 1 : 100))\n        }, 50)\n\n        return () => clearInterval(interval)\n    }, [])\n\n    return <Progress label='Loading…' value={60} />\n}\n",
    "type": "docs"
  },
  "statuses/rating-controlled-demo": {
    "component": "@/components/docs/statuses/rating-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, Rating } from '@/components/ui'\n\nexport default function RatingControlledDemo() {\n    const [rating, setRating] = React.useState<number>(3.5)\n    return (\n        <div>\n            <Rating\n                value={rating}\n                minValue={1}\n                maxValue={5}\n                onChange={(e) => setRating(e as number)}\n                label='Rating'\n                size='3xl'\n                showValue={true}\n            />\n            <Description className='mt-2 block [&>strong]:text-foreground'>\n                Current Rating: <strong>{rating ?? '-'}</strong>\n            </Description>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "statuses/meter-demo": {
    "component": "@/components/docs/statuses/meter-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Meter } from '@/components/ui'\n\nexport default function MeterDemo() {\n    const [value, setValue] = React.useState(1)\n\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            setValue((prev) => (prev < 100 ? prev + 1 : 100))\n        }, 50)\n\n        return () => clearInterval(interval)\n    }, [])\n    return <Meter label='Storage space' value={value} />\n}\n",
    "type": "docs"
  },
  "statuses/note-demo": {
    "component": "@/components/docs/statuses/note-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { OptionPreview } from '@/components/docs/outside/option-preview'\nimport { Note, Select } from '@/components/ui'\n\nconst notes = ['info', 'primary', 'secondary', 'warning', 'danger', 'success'].map(\n    (n) => ({\n        name: n\n    })\n)\nexport default function NoteDemo() {\n    const [selected, setSelected] = React.useState<any>('secondary')\n    return (\n        <>\n            <OptionPreview>\n                <Select\n                    aria-labelledby='Variant'\n                    className='[&_button]:h-9'\n                    selectedKey={selected}\n                    onSelectionChange={setSelected}\n                    placeholder='Choose an variant'\n                    items={notes}\n                >\n                    {(item) => (\n                        <Select.Item id={item.name} textValue={item.name}>\n                            {item.name}\n                        </Select.Item>\n                    )}\n                </Select>\n            </OptionPreview>\n            <Note variant={selected as any}>\n                This is just basic note, you can use it like alert or reminder. You can\n                add more text to it. You can use it as you wish.\n            </Note>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "statuses/indeterminate-progress-bar-demo": {
    "component": "@/components/docs/statuses/indeterminate-progress-bar-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Progress } from '@/components/ui'\n\nexport default function ProgressDemo() {\n    const [value, setValue] = React.useState(1)\n\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            setValue((prev) => (prev < 100 ? prev + 1 : 100))\n        }, 50)\n\n        return () => clearInterval(interval)\n    }, [])\n\n    return <Progress label='Loading…' isIndeterminate value={60} />\n}\n",
    "type": "docs"
  },
  "statuses/badge-shape-demo": {
    "component": "@/components/docs/statuses/badge-shape-demo",
    "raw": "'use client'\n\nimport { Badge } from '@/components/ui'\n\nexport default function BadgeShapeDemo() {\n    return (\n        <div className='flex gap-2'>\n            <Badge shape='square'>Square</Badge>\n            <Badge shape='circle'>Circle</Badge>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "statuses/rating-demo": {
    "component": "@/components/docs/statuses/rating-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Rating } from '@/components/ui'\n\nexport default function RatingDemo() {\n    const [value, setValue] = React.useState(1)\n\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            setValue((prev) => (prev < 4 ? prev + 1 : 5))\n        }, 50)\n\n        return () => clearInterval(interval)\n    }, [])\n    return <Rating value={value} shape='star' size='2xl' />\n}\n",
    "type": "docs"
  },
  "statuses/toaster-positions-demo": {
    "component": "@/components/docs/statuses/toaster-positions-demo",
    "raw": "import { toast, type ToastT } from 'sonner'\n\nimport { Button } from '@/components/ui'\n\nconst positions: ToastT['position'][] = [\n    'top-left',\n    'top-center',\n    'top-right',\n    'bottom-left',\n    'bottom-center',\n    'bottom-right'\n]\n\nexport default function ToasterPositionsDemo() {\n    return (\n        <div className='grid grid-cols-2 gap-4 sm:grid-cols-3'>\n            {positions.map((position) => (\n                <Button\n                    variant='outline'\n                    size='sm'\n                    key={position}\n                    onPress={() =>\n                        toast('The registration is successful, click here to continue.', {\n                            position\n                        })\n                    }\n                >\n                    {position}\n                </Button>\n            ))}\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "statuses/toaster-demo": {
    "component": "@/components/docs/statuses/toaster-demo",
    "raw": "import { toast } from 'sonner'\n\nimport { Button } from '@/components/ui'\n\nexport default function ToasterDemo() {\n    return <Button onPress={() => toast('You have been toasted')}>Toast</Button>\n}\n",
    "type": "docs"
  },
  "statuses/table-of-badges": {
    "component": "@/components/docs/statuses/table-of-badges",
    "raw": "'use client'\n\nimport { Badge, badgeVariants, Table } from '@/components/ui'\n\nexport default function TableOfBadges() {\n    const colors = Object.keys(badgeVariants).map((i) => {\n        return {\n            color: i\n        }\n    })\n    return (\n        <div className='not-prose rounded-xl border'>\n            <Table aria-label='Available Badge Colors'>\n                <Table.Header>\n                    <Table.Column id='props'>Props</Table.Column>\n                    <Table.Column id='name'>Name</Table.Column>\n                    <Table.Column />\n                </Table.Header>\n                <Table.Body items={colors}>\n                    {(item) => (\n                        <Table.Row id={item.color}>\n                            <Table.Cell>\n                                <code>color</code>\n                            </Table.Cell>\n                            <Table.Cell>\n                                <code>{item.color}</code>\n                            </Table.Cell>\n                            <Table.Cell>\n                                <Badge variant={item.color as any}>Label</Badge>\n                            </Table.Cell>\n                        </Table.Row>\n                    )}\n                </Table.Body>\n            </Table>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "statuses/badge-demo": {
    "component": "@/components/docs/statuses/badge-demo",
    "raw": "'use client'\n\nimport { Badge, badgeVariants } from '@/components/ui'\n\ntype Variant = keyof typeof badgeVariants\n\nexport default function BadgeDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap'>\n            {Object.keys(badgeVariants).map((variant) => (\n                <div key={variant}>\n                    <Badge variant={variant as Variant}>{variant}</Badge>\n                </div>\n            ))}\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "statuses/rating-shapes-demo": {
    "component": "@/components/docs/statuses/rating-shapes-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Rating } from '@/components/ui'\n\nconst shapes = ['star', 'heart', 'diamond', 'triangle', 'circle', 'square'] as const\n\nexport default function RatingShapesDemo() {\n    const [value, setValue] = React.useState(1)\n\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            setValue((prev) => (prev < 5 ? prev + 1 : 5))\n        }, 50)\n\n        return () => clearInterval(interval)\n    }, [])\n    return (\n        <div className='flex flex-col gap-2 items-center justify-center'>\n            {shapes.map((shape, i) => (\n                <div key={i}>\n                    <Rating value={value} shape={shape} size='xl' />\n                </div>\n            ))}\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-picker-custom-validation-demo": {
    "component": "@/components/docs/date-and-time/date-picker-custom-validation-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, DatePicker, Form } from '@/components/ui'\nimport { getLocalTimeZone, parseDate, startOfYear, today } from '@internationalized/date'\n\nexport default function DatePickerInvalidDemo() {\n    const ly = startOfYear(today(getLocalTimeZone()))\n    const now = today(getLocalTimeZone())\n    const [value, setValue] = React.useState(parseDate(ly.toString()))\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <DatePicker\n                validate={(date) => (date < now ? 'Select a future date, please.' : null)}\n                value={value}\n                onChange={setValue}\n                label='Delivery date'\n                className='mb-2'\n            />\n\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-picker-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-picker-controlled-demo",
    "raw": "import React from 'react'\n\nimport { DatePicker } from '@/components/ui'\nimport { getLocalTimeZone, parseDate, today } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\n\nexport default function DatePickerControlledDemo() {\n    const now = today(getLocalTimeZone())\n\n    const [value, setValue] = React.useState(parseDate(now.toString()))\n\n    const formatter = useDateFormatter({ dateStyle: 'full' })\n\n    return (\n        <div className='space-y-3'>\n            <div className='divide-y [&_p]:py-2'>\n                <p>{value ? formatter.format(value.toDate(getLocalTimeZone())) : '--'}</p>\n                <p>{value ? value.toString() : '--'}</p>\n            </div>\n            <DatePicker value={value} onChange={setValue} label='Event date' />\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-field-validation-demo": {
    "component": "@/components/docs/date-and-time/date-field-validation-demo",
    "raw": "'use client'\n\nimport { Button, DateField, Form } from '@/components/ui'\n\nexport default function DateFieldDisabledDemo() {\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <DateField isRequired label='Event date' className='mb-2' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n",
    "type": "docs"
  },
  "date-and-time/range-calendar-demo": {
    "component": "@/components/docs/date-and-time/range-calendar-demo",
    "raw": "'use client'\n\nimport { Calendar } from '@/components/ui'\n\nexport default function RangeCalendarDemo() {\n    return <Calendar.RangeCalendar aria-label='Trip dates' />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-range-picker-validation-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker-validation-demo",
    "raw": "'use client'\n\nimport { Button, DateRangePicker, Form } from '@/components/ui'\n\nexport default function DateRangePickerValidationDemo() {\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <DateRangePicker isRequired label='Event date' className='mb-2' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field-disabled-demo": {
    "component": "@/components/docs/date-and-time/time-field-disabled-demo",
    "raw": "'use client'\n\nimport { TimeField } from '@/components/ui'\n\nexport default function TimeFieldDisabledDemo() {\n    return <TimeField isDisabled label='Event time' />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-field-demo": {
    "component": "@/components/docs/date-and-time/date-field-demo",
    "raw": "'use client'\n\nimport { DateField } from '@/components/ui'\n\nexport default function DateFieldDemo() {\n    return <DateField label='Event date' />\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field-demo": {
    "component": "@/components/docs/date-and-time/time-field-demo",
    "raw": "'use client'\n\nimport { TimeField } from '@/components/ui'\n\nexport default function TimeFieldDemo() {\n    return <TimeField label='Event time' />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-field-disabled-demo": {
    "component": "@/components/docs/date-and-time/date-field-disabled-demo",
    "raw": "'use client'\n\nimport { DateField } from '@/components/ui'\n\nexport default function DateFieldDisabledDemo() {\n    return <DateField isDisabled label='Event date' />\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field-validation-demo": {
    "component": "@/components/docs/date-and-time/time-field-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, TimeField } from '@/components/ui'\n\nexport default function TimeFieldValidationDemo() {\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <TimeField label='Event time' isRequired className='mb-2' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-picker-required-demo": {
    "component": "@/components/docs/date-and-time/date-picker-required-demo",
    "raw": "'use client'\n\nimport { Button, DatePicker, Form } from '@/components/ui'\n\nexport default function DatePickerRequiredDemo() {\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <DatePicker\n                label='Delivery date'\n                name='deliveryDate'\n                isRequired\n                className='mb-2'\n            />\n\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-field-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DateField } from '@/components/ui'\nimport { getLocalTimeZone, parseDate, today } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\n\nexport default function DateFieldDisabledDemo() {\n    const now = today(getLocalTimeZone())\n    const [value, setValue] = React.useState(parseDate(now.toString()))\n\n    const formatter = useDateFormatter({ dateStyle: 'full' })\n\n    return (\n        <div className='space-y-3'>\n            <div className='divide-y [&_p]:py-2'>\n                <p>{value ? formatter.format(value.toDate(getLocalTimeZone())) : '--'}</p>\n                <p>{value ? value.toString() : '--'}</p>\n            </div>\n            <DateField value={value} onChange={setValue} label='Event date' />\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-range-picker-custom-validation-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker-custom-validation-demo",
    "raw": "'use client'\n\nimport { Button, DateRangePicker, Form } from '@/components/ui'\nimport { getLocalTimeZone, today } from '@internationalized/date'\n\nexport default function DateRangePickerCustomValidationDemo() {\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <DateRangePicker\n                label='Room Booking Dates'\n                validate={(range) =>\n                    range?.end.compare(range.start) > 7\n                        ? 'Maximum booking duration is 1 week.'\n                        : null\n                }\n                defaultValue={{\n                    start: today(getLocalTimeZone()),\n                    end: today(getLocalTimeZone()).add({ weeks: 2 })\n                }}\n                className='mb-2'\n            />\n            <Button type='submit'>Book Room</Button>\n        </Form>\n    )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-picker-demo": {
    "component": "@/components/docs/date-and-time/date-picker-demo",
    "raw": "'use client'\n\nimport { DatePicker } from '@/components/ui'\n\nexport default function DatePickerDemo() {\n    return <DatePicker label='Event date' />\n}\n",
    "type": "docs"
  },
  "date-and-time/calendar-demo": {
    "component": "@/components/docs/date-and-time/calendar-demo",
    "raw": "'use client'\n\nimport { Calendar } from '@/components/ui'\n\nexport default function CalendarDemo() {\n    return (\n        <Calendar\n            aria-label='Event date'\n            onChange={function Qa() {}}\n            onFocusChange={function Qa() {}}\n        />\n    )\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field-hc-demo": {
    "component": "@/components/docs/date-and-time/time-field-hc-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { OptionPreview } from '@/components/docs/outside/option-preview'\nimport { Switch, TimeField } from '@/components/ui'\nimport { Time } from '@internationalized/date'\n\nexport default function TimeFieldHcDemo() {\n    const [hc, setHc] = React.useState<12 | 24>(24)\n    const [value, setValue] = React.useState(new Time(13, 45))\n    return (\n        <>\n            <OptionPreview>\n                <Switch\n                    isSelected={hc === 24}\n                    onChange={() => setHc((prevHc) => (prevHc === 24 ? 12 : 24))}\n                >\n                    {hc} hour\n                </Switch>\n            </OptionPreview>\n            <TimeField\n                value={value}\n                onChange={setValue}\n                hourCycle={hc}\n                label='Event time'\n            />\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-picker-disabled-demo": {
    "component": "@/components/docs/date-and-time/date-picker-disabled-demo",
    "raw": "'use client'\n\nimport { DatePicker } from '@/components/ui'\n\nexport default function DatePickerDisabledDemo() {\n    return <DatePicker isDisabled label='Event date' />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-range-picker-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker-demo",
    "raw": "'use client'\n\nimport { DateRangePicker } from '@/components/ui'\n\nexport default function DateRangePickerDemo() {\n    return <DateRangePicker label='Event date' />\n}\n",
    "type": "docs"
  },
  "date-and-time/date-range-picker-controlled-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { DateRangePicker } from '@/components/ui'\nimport { getLocalTimeZone, today } from '@internationalized/date'\nimport { useDateFormatter } from '@react-aria/i18n'\n\nexport default function DateRangePickerControlledDemo() {\n    const now = today(getLocalTimeZone())\n    const tomorrowWeek = today(getLocalTimeZone()).add({ days: 12 })\n    const formatter = useDateFormatter({ dateStyle: 'full' })\n\n    const [value, setValue] = React.useState({\n        start: now,\n        end: tomorrowWeek\n    })\n\n    return (\n        <div className='space-y-3'>\n            <div className='divide-y [&_p]:py-2'>\n                <p>\n                    {value\n                        ? `${formatter.format(value.start.toDate(getLocalTimeZone()))} to ${formatter.format(value.end.toDate(getLocalTimeZone()))}`\n                        : '-- to --'}\n                </p>\n                <p>\n                    {value\n                        ? `${value.start.toString()} to ${value.end.toString()}`\n                        : '-- to --'}\n                </p>\n            </div>\n            <DateRangePicker value={value} onChange={setValue} label='Event date' />\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "date-and-time/time-field-controlled-demo": {
    "component": "@/components/docs/date-and-time/time-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { TimeField } from '@/components/ui'\nimport { Time } from '@internationalized/date'\n\nexport default function TimeFieldValidationDemo() {\n    const [value, setValue] = React.useState(new Time(11, 45))\n    return (\n        <div className='space-y-3'>\n            <div className='divide-y [&_p]:py-2'>\n                <p>{value ? value.toString() : '--'}</p>\n            </div>\n            <TimeField label='Event time' value={value} onChange={setValue} />\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "date-and-time/date-range-picker-disabled-demo": {
    "component": "@/components/docs/date-and-time/date-range-picker-disabled-demo",
    "raw": "'use client'\n\nimport { DateRangePicker } from '@/components/ui'\n\nexport default function DateRangePickerDisabledDemo() {\n    return <DateRangePicker isDisabled label='Event date' />\n}\n",
    "type": "docs"
  },
  "collections/grid-list-controlled-demo": {
    "component": "@/components/docs/collections/grid-list-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { Description, GridList } from '@/components/ui'\n\nexport default function GridListControlledDemo() {\n    const [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set([]))\n    return (\n        <div>\n            <GridList\n                selectedKeys={selectedKeys}\n                onSelectionChange={setSelectedKeys}\n                items={items}\n                aria-label='Select items'\n                selectionMode='multiple'\n                className='min-w-64'\n            >\n                {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n            </GridList>\n            <Description className='mt-2 block [&>strong]:text-foreground text-muted-foreground'>\n                You have selected: <strong>{Array.from(selectedKeys).join(', ')}</strong>\n            </Description>\n        </div>\n    )\n}\n\nconst items = [\n    { id: '1', name: 'The Beatles' },\n    { id: '2', name: 'Led Zeppelin' },\n    { id: '3', name: 'Pink Floyd' },\n    { id: '4', name: 'Queen' },\n    { id: '5', name: 'The Rolling Stones' }\n]\n",
    "type": "docs"
  },
  "collections/menu-collection-demo": {
    "component": "@/components/docs/collections/menu-collection-demo",
    "raw": "'use client'\n\nimport { Button, Menu } from '@/components/ui'\n\nexport default function MenuCollectionDemo() {\n    return (\n        <Menu>\n            <Button variant='outline'>Open</Button>\n            <Menu.Content className='min-w-64' placement='bottom' items={categories}>\n                {(item) => <Menu.Item id={item.slug}>{item.name}</Menu.Item>}\n            </Menu.Content>\n        </Menu>\n    )\n}\n\nconst categories = [\n    {\n        name: 'Technology',\n        slug: 'technology'\n    },\n    {\n        name: 'Health',\n        slug: 'health'\n    },\n    {\n        name: 'Business',\n        slug: 'business'\n    },\n    {\n        name: 'Travel',\n        slug: 'travel'\n    },\n    {\n        name: 'Education',\n        slug: 'education'\n    },\n    {\n        name: 'Entertainment',\n        slug: 'entertainment'\n    },\n    {\n        name: 'Sports',\n        slug: 'sports'\n    },\n    {\n        name: 'Fashion',\n        slug: 'fashion'\n    },\n    {\n        name: 'Food',\n        slug: 'food'\n    },\n    {\n        name: 'Science',\n        slug: 'science'\n    }\n]\n",
    "type": "docs"
  },
  "collections/menu-with-arrow-demo": {
    "component": "@/components/docs/collections/menu-with-arrow-demo",
    "raw": "'use client'\n\nimport {\n    IconCommand,\n    IconHeadphones,\n    IconLogout,\n    IconSettings,\n    IconSquarePlus\n} from 'cleon-icons'\n\nimport { Avatar, Menu } from '@/components/ui'\n\nexport default function MenuWithArrowDemo() {\n    return (\n        <>\n            <Menu>\n                <Menu.Trigger aria-label='Open Menu.'>\n                    <Avatar className='size-10' src='https://github.com/dq-alhq.png' />\n                </Menu.Trigger>\n                <Menu.Content placement='bottom' showArrow className='min-w-64'>\n                    <Menu.Section>\n                        <Menu.Header separator>\n                            <span className='block'>DQ Al-Haqqi</span>\n                            <span className='font-normal text-muted-foreground'>\n                                @dq-alhq\n                            </span>\n                        </Menu.Header>\n                    </Menu.Section>\n                    <Menu.Item>\n                        <IconSettings />\n                        Settings\n                    </Menu.Item>\n                    <Menu.Item href='#'>\n                        <IconSquarePlus />\n                        Create Team\n                    </Menu.Item>\n                    <Menu.Item href='#'>\n                        <IconCommand />\n                        Command Menu.\n                        <Menu.Keyboard keys='⌘K' />\n                    </Menu.Item>\n                    <Menu.Separator />\n                    <Menu.Item href='#'>\n                        <IconHeadphones />\n                        Contact Support\n                    </Menu.Item>\n                    <Menu.Separator />\n                    <Menu.Item>\n                        <IconLogout />\n                        Log out\n                    </Menu.Item>\n                </Menu.Content>\n            </Menu>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "collections/accordion-disabled-demo": {
    "component": "@/components/docs/collections/accordion-disabled-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionDisabledDemo() {\n    return (\n        <Accordion disabledKeys={[1, 2, 4]}>\n            {faqs.map((item, index) => (\n                <Accordion.Item key={index} currentId={index}>\n                    <Accordion.Trigger>{item.q}</Accordion.Trigger>\n                    <Accordion.Content>{item.a}</Accordion.Content>\n                </Accordion.Item>\n            ))}\n        </Accordion>\n    )\n}\n\nconst faqs = [\n    {\n        q: 'Do you offer gift wrapping options?',\n        a: 'Yes, we provide gift wrapping services for a small additional charge at checkout.'\n    },\n    {\n        q: 'Can I return a gift card?',\n        a: 'Sorry, gift cards are non-refundable and cannot be returned.'\n    },\n    {\n        q: 'What are your store hours?',\n        a: 'Our store is open from 9 AM to 9 PM on weekdays and 10 AM to 6 PM on weekends.'\n    },\n    {\n        q: 'Do you have a loyalty program?',\n        a: 'Yes, we have a loyalty program where you can earn points for every purchase and redeem them for discounts.'\n    },\n    {\n        q: 'How do I update my billing information?',\n        a: 'You can update your billing information through your account settings on our website.'\n    },\n    {\n        q: 'Are there any discounts for bulk orders?',\n        a: 'Yes, we offer discounts on bulk orders. Please contact our sales team for more details.'\n    }\n]\n",
    "type": "docs"
  },
  "collections/menu-basic-demo": {
    "component": "@/components/docs/collections/menu-basic-demo",
    "raw": "'use client'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuBasicDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content placement='bottom'>\n                <Menu.Item>Inbox</Menu.Item>\n                <Menu.Item>Sent</Menu.Item>\n                <Menu.Item>New Message</Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n",
    "type": "docs"
  },
  "collections/grid-list-drag-demo": {
    "component": "@/components/docs/collections/grid-list-drag-demo",
    "raw": "'use client'\n\nimport { useDragAndDrop } from 'react-aria-components'\nimport { useListData } from 'react-stately'\n\nimport { GridList } from '@/components/ui'\n\nexport default function GridListDragDemo() {\n    const list = useListData({\n        initialItems: items\n    })\n    const { dragAndDropHooks } = useDragAndDrop({\n        getItems: (keys) =>\n            [...keys].map((key) => ({ 'text/plain': list.getItem(key).name })),\n        onReorder(e) {\n            if (e.target.dropPosition === 'before') {\n                list.moveBefore(e.target.key, e.keys)\n            } else if (e.target.dropPosition === 'after') {\n                list.moveAfter(e.target.key, e.keys)\n            }\n        }\n    })\n\n    return (\n        <div>\n            <GridList\n                items={list.items}\n                aria-label='Droppable list'\n                selectionMode='multiple'\n                dragAndDropHooks={dragAndDropHooks}\n            >\n                {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n            </GridList>\n        </div>\n    )\n}\n\nconst items = [\n    { id: 1, name: 'The Beatles' },\n    { id: 2, name: 'Led Zeppelin' },\n    { id: 3, name: 'Pink Floyd' },\n    { id: 4, name: 'Queen' },\n    { id: 5, name: 'The Rolling Stones' },\n    { id: 6, name: 'The Beach Boys' },\n    { id: 7, name: 'The Kinks' },\n    { id: 8, name: 'The Who' }\n]\n",
    "type": "docs"
  },
  "collections/list-box-rearrange-demo": {
    "component": "@/components/docs/collections/list-box-rearrange-demo",
    "raw": "'use client'\n\nimport { useDragAndDrop } from 'react-aria-components'\nimport { useListData } from 'react-stately'\n\nimport { ListBox } from '@/components/ui'\n\nexport default function ListBoxRearrangeDemo() {\n    const list = useListData({\n        initialItems: [\n            { id: '1', name: 'HTML' },\n            { id: '2', name: 'CSS' },\n            { id: '3', name: 'Javascript' },\n            { id: '4', name: 'Typescript' },\n            { id: '5', name: 'PHP' }\n        ]\n    })\n    const { dragAndDropHooks } = useDragAndDrop({\n        getItems: (keys: any) =>\n            [...keys].map((key) => ({ 'text/plain': list.getItem(key).name })),\n        onReorder(e: any) {\n            if (e.target.dropPosition === 'before') {\n                list.moveBefore(e.target.key, e.keys)\n            } else if (e.target.dropPosition === 'after') {\n                list.moveAfter(e.target.key, e.keys)\n            }\n        }\n    })\n    return (\n        <ListBox\n            items={list.items}\n            aria-label='Langueges'\n            selectionMode='multiple'\n            dragAndDropHooks={dragAndDropHooks}\n        >\n            {(item) => (\n                <ListBox.Item id={item.id} key={item.id}>\n                    {item.name}\n                </ListBox.Item>\n            )}\n        </ListBox>\n    )\n}\n",
    "type": "docs"
  },
  "collections/command-basic-demo": {
    "component": "@/components/docs/collections/command-basic-demo",
    "raw": "'use client'\n\nimport React, { useState } from 'react'\n\nimport { Button, Command } from '@/components/ui'\nimport { useMediaQuery } from '@/lib/utils'\n\nexport default function CommandBasicDemo() {\n    const [open, setOpen] = useState(false)\n    React.useEffect(() => {\n        const down = (e: KeyboardEvent) => {\n            if (e.key === 'j') {\n                e.preventDefault()\n                setOpen((open: boolean) => !open)\n            }\n        }\n        document.addEventListener('keydown', down)\n        return () => document.removeEventListener('keydown', down)\n    }, [])\n\n    const isDesktop = useMediaQuery('(min-width: 1024px)')\n    return (\n        <>\n            <Button\n                onPress={() => setOpen((open: boolean) => !open)}\n                variant='outline'\n                aria-label='Open command'\n            >\n                Press <kbd className='rounded border px-2 py-1 text-xs'>⌘J</kbd>\n            </Button>\n            <Command isOpen={open} onOpenChange={setOpen}>\n                <Command.Input autoFocus={isDesktop} placeholder='Search Item' />\n                <Command.List>\n                    <Command.Empty>No results found.</Command.Empty>\n                    <Command.Section heading='First Section'>\n                        <Command.Item>First</Command.Item>\n                        <Command.Item>Second</Command.Item>\n                        <Command.Item>Third</Command.Item>\n                    </Command.Section>\n                    <Command.Separator />\n                    <Command.Section heading='Second Section'>\n                        <Command.Item>Fourth</Command.Item>\n                        <Command.Item>Fifth</Command.Item>\n                        <Command.Item>Sixth</Command.Item>\n                    </Command.Section>\n                </Command.List>\n            </Command>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "collections/list-box-demo": {
    "component": "@/components/docs/collections/list-box-demo",
    "raw": "'use client'\n\nimport { ListBox } from '@/components/ui'\n\nconst libraries = [\n    { id: 'tw', name: 'Tailwind CSS' },\n    { id: 'bs', name: 'Bootstrap' },\n    { id: 'react', name: 'React.Js' },\n    { id: 'jq', name: 'JQuery' },\n    { id: 'alpine', name: 'Alpine.Js' }\n]\n\nexport default function ListBoxDemo() {\n    return (\n        <ListBox items={libraries} aria-label='Libraries' selectionMode='multiple'>\n            {(item) => (\n                <ListBox.Item id={item.id} key={item.id}>\n                    {item.name}\n                </ListBox.Item>\n            )}\n        </ListBox>\n    )\n}\n",
    "type": "docs"
  },
  "collections/table-sorting-demo": {
    "component": "@/components/docs/collections/table-sorting-demo",
    "raw": "'use client'\n\nimport { IconLoader2 } from 'cleon-icons'\n\nimport { Card, Table } from '@/components/ui'\nimport { useAsyncList } from '@react-stately/data'\n\ninterface Character {\n    title: string\n    director: number\n    producer: number\n    release_date: number\n}\n\nexport default function TableSortingDemo() {\n    const list = useAsyncList<Character>({\n        async load({ signal }) {\n            const res = await fetch(`https://swapi.py4e.com/api/films`, {\n                signal\n            })\n            const json = await res.json()\n            return {\n                items: json.results\n            }\n        },\n        async sort({ items, sortDescriptor }) {\n            return {\n                items: items.sort((a, b) => {\n                    // @ts-ignore\n                    const first = a[sortDescriptor.column]\n                    // @ts-ignore\n                    const second = b[sortDescriptor.column]\n                    let cmp =\n                        (parseInt(first) || first) < (parseInt(second) || second) ? -1 : 1\n                    if (sortDescriptor.direction === 'descending') {\n                        cmp *= -1\n                    }\n                    return cmp\n                })\n            }\n        }\n    })\n    return (\n        <Card>\n            <Table\n                aria-label='Movies'\n                selectionMode='multiple'\n                sortDescriptor={list.sortDescriptor}\n                onSortChange={list.sort}\n            >\n                <Table.Header>\n                    <Table.Column id='title' isRowHeader allowsSorting>\n                        Title\n                    </Table.Column>\n                    <Table.Column id='director' allowsSorting>\n                        Director\n                    </Table.Column>\n                    <Table.Column id='producer' allowsSorting>\n                        Producer\n                    </Table.Column>\n                    <Table.Column id='release_date' allowsSorting>\n                        Release Date\n                    </Table.Column>\n                </Table.Header>\n                <Table.Body\n                    items={list.items}\n                    renderEmptyState={() => (\n                        <div className='grid place-content-center p-10'>\n                            <IconLoader2 className='animate-spin' />\n                        </div>\n                    )}\n                >\n                    {(item) => (\n                        <Table.Row id={item.title}>\n                            <Table.Cell>{item.title}</Table.Cell>\n                            <Table.Cell>{item.director}</Table.Cell>\n                            <Table.Cell>{item.producer}</Table.Cell>\n                            <Table.Cell>{item.release_date}</Table.Cell>\n                        </Table.Row>\n                    )}\n                </Table.Body>\n            </Table>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "collections/grid-list-multiple-demo": {
    "component": "@/components/docs/collections/grid-list-multiple-demo",
    "raw": "'use client'\n\nimport { GridList } from '@/components/ui'\n\nexport default function GridListMultipleDemo() {\n    return (\n        <div>\n            <GridList\n                items={items}\n                aria-label='Select items'\n                selectionMode='multiple'\n                className='min-w-64'\n            >\n                {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n            </GridList>\n        </div>\n    )\n}\n\nconst items = [\n    { id: '1', name: 'The Beatles' },\n    { id: '2', name: 'Led Zeppelin' },\n    { id: '3', name: 'Pink Floyd' },\n    { id: '4', name: 'Queen' },\n    { id: '5', name: 'The Rolling Stones' }\n]\n",
    "type": "docs"
  },
  "collections/tag-group-with-remove-demo": {
    "component": "@/components/docs/collections/tag-group-with-remove-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport { Tag, TagGroup, TagList } from '@/components/ui'\n\nexport default function TagGroupWithRemoveDemo() {\n    const list = useListData({\n        initialItems: [\n            { id: '1', name: 'Ferrari', available: true },\n            { id: '2', name: 'Lamborghini', available: false },\n            { id: '3', name: 'Porsche', available: true },\n            { id: '4', name: 'Bugatti', available: false },\n            { id: '5', name: 'McLaren', available: true },\n            { id: '6', name: 'Aston Martin', available: true },\n            { id: '7', name: 'Bentley', available: false },\n            { id: '8', name: 'Rolls-Royce', available: true },\n            { id: '9', name: 'Maserati', available: false },\n            { id: '10', name: 'Jaguar', available: true }\n        ]\n    })\n\n    return (\n        <TagGroup\n            selectionMode='multiple'\n            className='max-w-sm'\n            onRemove={(keys) => list.remove(...keys)}\n        >\n            <TagList items={list.items}>{(item) => <Tag>{item.name}</Tag>}</TagList>\n        </TagGroup>\n    )\n}\n",
    "type": "docs"
  },
  "collections/menu-section-demo": {
    "component": "@/components/docs/collections/menu-section-demo",
    "raw": "'use client'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuSectionDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content className='min-w-64' items={cities} placement='bottom'>\n                {(city) => (\n                    <Menu.Section title={city.name} items={city.landmarks}>\n                        {(landmark) => (\n                            <Menu.Item textValue={landmark.name}>\n                                {landmark.name}\n                            </Menu.Item>\n                        )}\n                    </Menu.Section>\n                )}\n            </Menu.Content>\n        </Menu>\n    )\n}\n\nconst cities = [\n    {\n        id: 1,\n        name: 'New York City',\n        landmarks: [\n            {\n                id: 101,\n                name: 'Statue of Liberty'\n            },\n            {\n                id: 102,\n                name: 'Central Park'\n            },\n            {\n                id: 103,\n                name: 'Empire State Building'\n            },\n            {\n                id: 104,\n                name: 'Times Square'\n            }\n        ]\n    },\n    {\n        id: 2,\n        name: 'Paris',\n        landmarks: [\n            {\n                id: 201,\n                name: 'Eiffel Tower'\n            },\n            {\n                id: 202,\n                name: 'Louvre Museum'\n            },\n            {\n                id: 203,\n                name: 'Notre-Dame Cathedral'\n            },\n            {\n                id: 204,\n                name: 'Champs-Élysées'\n            }\n        ]\n    },\n    {\n        id: 3,\n        name: 'Tokyo',\n        landmarks: [\n            {\n                id: 301,\n                name: 'Tokyo Tower'\n            },\n            {\n                id: 302,\n                name: 'Shibuya Crossing'\n            },\n            {\n                id: 303,\n                name: 'Senso-ji Temple'\n            },\n            {\n                id: 304,\n                name: 'Meiji Shrine'\n            },\n            {\n                id: 305,\n                name: 'Tokyo Skytree'\n            }\n        ]\n    },\n    {\n        id: 4,\n        name: 'London',\n        landmarks: [\n            {\n                id: 401,\n                name: 'Big Ben'\n            },\n            {\n                id: 402,\n                name: 'Tower of London'\n            },\n            {\n                id: 403,\n                name: 'Buckingham Palace'\n            },\n            {\n                id: 404,\n                name: 'London Eye'\n            },\n            {\n                id: 405,\n                name: 'Westminster Abbey'\n            }\n        ]\n    },\n    {\n        id: 5,\n        name: 'Rome',\n        landmarks: [\n            {\n                id: 501,\n                name: 'Colosseum'\n            },\n            {\n                id: 502,\n                name: 'Vatican City'\n            },\n            {\n                id: 503,\n                name: 'Trevi Fountain'\n            },\n            {\n                id: 504,\n                name: 'Pantheon'\n            }\n        ]\n    },\n    {\n        id: 6,\n        name: 'Sydney',\n        landmarks: [\n            {\n                id: 601,\n                name: 'Sydney Opera House'\n            },\n            {\n                id: 602,\n                name: 'Sydney Harbour Bridge'\n            },\n            {\n                id: 603,\n                name: 'Bondi Beach'\n            },\n            {\n                id: 604,\n                name: 'Royal Botanic Garden'\n            }\n        ]\n    },\n    {\n        id: 7,\n        name: 'Dubai',\n        landmarks: [\n            {\n                id: 701,\n                name: 'Burj Khalifa'\n            },\n            {\n                id: 702,\n                name: 'Palm Jumeirah'\n            },\n            {\n                id: 703,\n                name: 'Dubai Mall'\n            },\n            {\n                id: 704,\n                name: 'Burj Al Arab'\n            }\n        ]\n    },\n    {\n        id: 8,\n        name: 'Moscow',\n        landmarks: [\n            {\n                id: 801,\n                name: 'Red Square'\n            },\n            {\n                id: 802,\n                name: 'Kremlin'\n            },\n            {\n                id: 803,\n                name: \"St. Basil's Cathedral\"\n            },\n            {\n                id: 804,\n                name: 'Bolshoi Theatre'\n            }\n        ]\n    },\n    {\n        id: 9,\n        name: 'Cairo',\n        landmarks: [\n            {\n                id: 901,\n                name: 'Pyramids of Giza'\n            },\n            {\n                id: 902,\n                name: 'Great Sphinx of Giza'\n            },\n            {\n                id: 903,\n                name: 'Egyptian Museum'\n            }\n        ]\n    },\n    {\n        id: 10,\n        name: 'Rio de Janeiro',\n        landmarks: [\n            {\n                id: 1001,\n                name: 'Christ the Redeemer'\n            },\n            {\n                id: 1002,\n                name: 'Sugarloaf Mountain'\n            },\n            {\n                id: 1003,\n                name: 'Copacabana Beach'\n            },\n            {\n                id: 1004,\n                name: 'Maracanã Stadium'\n            }\n        ]\n    }\n]\n",
    "type": "docs"
  },
  "collections/menu-danger-demo": {
    "component": "@/components/docs/collections/menu-danger-demo",
    "raw": "'use client'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuDangerDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content className='min-w-48' placement='bottom'>\n                <Menu.Item>View</Menu.Item>\n                <Menu.Item>Edit</Menu.Item>\n                <Menu.Separator />\n                <Menu.Item isDanger>Delete</Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n",
    "type": "docs"
  },
  "collections/multiple-menu-demo": {
    "component": "@/components/docs/collections/multiple-menu-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Menu } from '@/components/ui'\nimport { type Selection } from '@react-types/shared'\n\nexport default function MultipleMenuDemo() {\n    const [selected, setSelected] = React.useState<Selection>(new Set(['autoPlay']))\n    return (\n        <Menu>\n            <Button variant='outline'>Open</Button>\n            <Menu.Content\n                placement='bottom'\n                selectionMode='multiple'\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n            >\n                <Menu.Section items={menuItems} title='Content Preferences'>\n                    {(item) => (\n                        <Menu.Checkbox id={item.slug} textValue={item.name}>\n                            {item.name}\n                        </Menu.Checkbox>\n                    )}\n                </Menu.Section>\n            </Menu.Content>\n        </Menu>\n    )\n}\n\nconst menuItems = [\n    {\n        name: 'Auto-Play Videos',\n        slug: 'autoPlay'\n    },\n    {\n        name: 'High-Quality Streaming',\n        slug: 'highQuality'\n    },\n    {\n        name: 'Exclusive Releases',\n        slug: 'exclusiveContent'\n    },\n    {\n        name: 'Default Subtitles',\n        slug: 'subtitles'\n    },\n    {\n        name: 'Personalized Recommendations',\n        slug: 'recommendations'\n    },\n    {\n        name: 'Background Play',\n        slug: 'backgroundPlay'\n    },\n    {\n        name: 'Allow Downloads',\n        slug: 'download'\n    }\n]\n",
    "type": "docs"
  },
  "collections/grid-list-drag-between-item-demo": {
    "component": "@/components/docs/collections/grid-list-drag-between-item-demo",
    "raw": "'use client'\n\nimport { useDragAndDrop } from 'react-aria-components'\nimport { useListData } from 'react-stately'\n\nimport GridListDragDemo from '@/components/docs/collections/grid-list-drag-demo'\nimport { Grid, GridList } from '@/components/ui'\n\nexport default function GridListDragBetweenItemDemo() {\n    const list = useListData({\n        initialItems: [\n            { id: 6, name: 'The Byrds' },\n            { id: 7, name: 'The Yardbirds' }\n        ]\n    })\n\n    const { dragAndDropHooks } = useDragAndDrop({\n        async onInsert(e) {\n            const items = await Promise.all(\n                e.items.map(async (item) => {\n                    const name =\n                        item.kind === 'text'\n                            ? await item.getText('text/plain')\n                            : item.name\n                    return { id: Math.random(), name }\n                })\n            )\n\n            if (e.target.dropPosition === 'before') {\n                list.insertBefore(e.target.key, ...items)\n            } else if (e.target.dropPosition === 'after') {\n                list.insertAfter(e.target.key, ...items)\n            }\n        }\n    })\n\n    return (\n        <Grid gap={4} columns={3}>\n            <Grid.Item>\n                <GridListDragDemo />\n            </Grid.Item>\n            <Grid.Item>\n                <GridList\n                    aria-label='Droppable list'\n                    items={list.items}\n                    dragAndDropHooks={dragAndDropHooks}\n                >\n                    {(item) => <GridList.Item>{item.name}</GridList.Item>}\n                </GridList>\n            </Grid.Item>\n            <Grid.Item>\n                <OtherEmptyList />\n            </Grid.Item>\n        </Grid>\n    )\n}\n\nfunction OtherEmptyList() {\n    const list = useListData({\n        initialItems: [{ id: 7, name: 'The Who' }]\n    })\n\n    const { dragAndDropHooks } = useDragAndDrop({\n        async onInsert(e) {\n            const items = await Promise.all(\n                e.items.map(async (item) => {\n                    const name =\n                        item.kind === 'text'\n                            ? await item.getText('text/plain')\n                            : item.name\n                    return { id: Math.random(), name }\n                })\n            )\n\n            if (e.target.dropPosition === 'before') {\n                list.insertBefore(e.target.key, ...items)\n            } else if (e.target.dropPosition === 'after') {\n                list.insertAfter(e.target.key, ...items)\n            }\n        }\n    })\n\n    return (\n        <GridList\n            aria-label='Droppable list'\n            items={list.items}\n            dragAndDropHooks={dragAndDropHooks}\n            renderEmptyState={() => (\n                <GridList.EmptyState>No bands selected</GridList.EmptyState>\n            )}\n        >\n            {(item) => <GridList.Item>{item.name}</GridList.Item>}\n        </GridList>\n    )\n}\n",
    "type": "docs"
  },
  "collections/menu-respect-screen-demo": {
    "component": "@/components/docs/collections/menu-respect-screen-demo",
    "raw": "'use client'\n\nimport { buttonVariants, Menu } from '@/components/ui'\n\nexport default function MenuRespectScreenDemo() {\n    return (\n        <Menu respectScreen={false}>\n            <Menu.Trigger className={buttonVariants({ variant: 'outline' })}>\n                Open\n            </Menu.Trigger>\n            <Menu.Content placement='bottom' className='min-w-48'>\n                <Menu.Item>Dashboard</Menu.Item>\n                <Menu.Item>Reports</Menu.Item>\n                <Menu.Item>Settings</Menu.Item>\n                <Menu.Item>Security</Menu.Item>\n                <Menu.Item>Privacy</Menu.Item>\n                <Menu.Item>Help</Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n",
    "type": "docs"
  },
  "collections/accordion-demo": {
    "component": "@/components/docs/collections/accordion-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionDemo() {\n    return (\n        <Accordion>\n            <Accordion.Item currentId={1}>\n                <Accordion.Trigger>What is a VPS?</Accordion.Trigger>\n                <Accordion.Content>\n                    A VPS is a Virtual Private Server, which provides dedicated resources\n                    on a server shared with other users, offering more control and\n                    customization than shared hosting.\n                </Accordion.Content>\n            </Accordion.Item>\n\n            <Accordion.Item currentId={2}>\n                <Accordion.Trigger>What is cloud hosting?</Accordion.Trigger>\n                <Accordion.Content>\n                    Cloud hosting utilizes multiple servers to balance load and maximize\n                    uptime. Instead of being hosted on a single server, your data and\n                    resources are spread across multiple servers.\n                </Accordion.Content>\n            </Accordion.Item>\n\n            <Accordion.Item currentId={3}>\n                <Accordion.Trigger>What is shared hosting?</Accordion.Trigger>\n                <Accordion.Content>\n                    Shared hosting is a type of web hosting where multiple websites share\n                    the same server and its resources. It's an affordable option, but may\n                    have limitations on performance and customization.\n                </Accordion.Content>\n            </Accordion.Item>\n            <Accordion.Item currentId={4}>\n                <Accordion.Trigger>What is dedicated hosting?</Accordion.Trigger>\n                <Accordion.Content>\n                    Dedicated hosting means your website is hosted on a single server\n                    exclusively reserved for your site. This provides maximum performance\n                    and customization, but at a higher cost.\n                </Accordion.Content>\n            </Accordion.Item>\n        </Accordion>\n    )\n}\n",
    "type": "docs"
  },
  "collections/menu-disabled-demo": {
    "component": "@/components/docs/collections/menu-disabled-demo",
    "raw": "'use client'\n\nimport { Menu } from '@/components/ui'\n\nexport default function MenuDisabledDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger>Open</Menu.Trigger>\n            <Menu.Content className='min-w-48' placement='bottom'>\n                <Menu.Item id='view'>View</Menu.Item>\n                <Menu.Item id='edit'>Edit</Menu.Item>\n                <Menu.Item id='gsu' isDisabled>\n                    Generate Short URL\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n",
    "type": "docs"
  },
  "collections/table-bulk-actions-demo": {
    "component": "@/components/docs/collections/table-bulk-actions-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { Card, Description, Table } from '@/components/ui'\n\nexport default function TableBulkActionsDemo() {\n    const [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set())\n    return (\n        <>\n            <Card>\n                <Table\n                    aria-label='Books'\n                    selectionMode='multiple'\n                    selectedKeys={selectedKeys}\n                    onSelectionChange={setSelectedKeys}\n                >\n                    <Table.Header>\n                        <Table.Column>#</Table.Column>\n                        <Table.Column isRowHeader>Title</Table.Column>\n                        <Table.Column>Author</Table.Column>\n                        <Table.Column>Genre</Table.Column>\n                        <Table.Column>Published</Table.Column>\n                    </Table.Header>\n                    <Table.Body items={books}>\n                        {(item) => (\n                            <Table.Row>\n                                <Table.Cell>{item.id}</Table.Cell>\n                                <Table.Cell>{item.title}</Table.Cell>\n                                <Table.Cell>{item.author}</Table.Cell>\n                                <Table.Cell>{item.genre}</Table.Cell>\n                                <Table.Cell>{item.publishedYear}</Table.Cell>\n                            </Table.Row>\n                        )}\n                    </Table.Body>\n                </Table>\n            </Card>\n            <Description className='block mt-2 [&>strong]:text-foreground text-muted-foreground'>\n                {Array.from(selectedKeys).length > 0 ? (\n                    <>\n                        You have selected:{' '}\n                        <strong>{Array.from(selectedKeys).join(', ')}</strong>\n                    </>\n                ) : (\n                    'You have not selected anything.'\n                )}\n            </Description>\n        </>\n    )\n}\n\nexport const books = [\n    {\n        id: '1',\n        title: 'To Kill a Mockingbird',\n        author: 'Harper Lee',\n        genre: 'Fiction',\n        publishedYear: 1960\n    },\n    {\n        id: '2',\n        title: '1984',\n        author: 'George Orwell',\n        genre: 'Dystopian',\n        publishedYear: 1949\n    },\n    {\n        id: '3',\n        title: 'The Great Gatsby',\n        author: 'F. Scott Fitzgerald',\n        genre: 'Fiction',\n        publishedYear: 1925\n    },\n    {\n        id: '4',\n        title: 'The Catcher in the Rye',\n        author: 'J.D. Salinger',\n        genre: 'Fiction',\n        publishedYear: 1951\n    },\n    {\n        id: '5',\n        title: 'Pride and Prejudice',\n        author: 'Jane Austen',\n        genre: 'Romance',\n        publishedYear: 1813\n    },\n    {\n        id: '6',\n        title: 'The Lord of the Rings',\n        author: 'J.R.R. Tolkien',\n        genre: 'Fantasy',\n        publishedYear: 1954\n    },\n    {\n        id: '7',\n        title: \"Harry Potter and the Sorcerer's Stone\",\n        author: 'J.K. Rowling',\n        genre: 'Fantasy',\n        publishedYear: 1997\n    }\n]\n",
    "type": "docs"
  },
  "collections/accordion-multiple-demo": {
    "component": "@/components/docs/collections/accordion-multiple-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionMultipleDemo() {\n    return (\n        <Accordion defaultExpandedKeys={[1, 2]}>\n            {faqs.map((item, index) => (\n                <Accordion.Item key={index} currentId={index}>\n                    <Accordion.Trigger>{item.q}</Accordion.Trigger>\n                    <Accordion.Content>{item.a}</Accordion.Content>\n                </Accordion.Item>\n            ))}\n        </Accordion>\n    )\n}\n\nconst faqs = [\n    {\n        q: 'How do I reset my password?',\n        a: \"You can reset your password by going to the settings page and clicking on 'Reset Password'.\"\n    },\n    {\n        q: 'Can I change my subscription plan?',\n        a: 'Yes, you can upgrade or downgrade your subscription plan at any time from your account settings.'\n    },\n    {\n        q: 'Where can I view my past orders?',\n        a: \"Your past orders can be viewed in the 'Orders' section of your account dashboard.\"\n    },\n    {\n        q: 'What is the return policy?',\n        a: 'Our return policy allows you to return products within 30 days of purchase for a full refund or exchange.'\n    },\n    {\n        q: 'How do I contact customer support?',\n        a: 'You can contact customer support via email at support@example.com or through our online chat system.'\n    }\n]\n",
    "type": "docs"
  },
  "collections/tag-group-controlled-demo": {
    "component": "@/components/docs/collections/tag-group-controlled-demo",
    "raw": "import React from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { Description, Tag, TagGroup, TagList } from '@/components/ui'\n\nconst fruitList = [\n    { id: '1', name: 'Apple', available: false },\n    { id: '2', name: 'Banana', available: true },\n    { id: '3', name: 'Cherry', available: true },\n    { id: '4', name: 'Date', available: false }\n]\n\nexport default function TagGroupControlledDemo() {\n    const [selected, setSelected] = React.useState<Selection>(new Set([]))\n    return (\n        <div>\n            <TagGroup\n                selectionMode='multiple'\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n            >\n                <TagList items={fruitList}>{(item) => <Tag>{item.name}</Tag>}</TagList>\n            </TagGroup>\n\n            <Description className='mt-2 block [&>strong]:text-foreground text-muted-foreground'>\n                You have selected: <strong>{Array.from(selected).join(', ')}</strong>\n            </Description>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "collections/tag-group-variant-demo": {
    "component": "@/components/docs/collections/tag-group-variant-demo",
    "raw": "'use client'\n\nimport { Tag, TagGroup, TagList } from '@/components/ui'\n\nconst shoes = [\n    { id: '1', name: 'Nike', available: true },\n    { id: '2', name: 'Adidas', available: false },\n    { id: '3', name: 'Puma', available: true },\n    { id: '4', name: 'Reebok', available: true },\n    { id: '5', name: 'Under Armour', available: false }\n]\n\nexport default function TagGroupVariantDemo() {\n    return (\n        <div className='space-y-6 max-w-sm'>\n            <TagGroup variant='primary' label='Primary' selectionMode='multiple'>\n                <TagList items={shoes}>{(item) => <Tag>{item.name}</Tag>}</TagList>\n            </TagGroup>\n            <TagGroup variant='secondary' label='Secondary' selectionMode='multiple'>\n                <TagList items={shoes}>{(item) => <Tag>{item.name}</Tag>}</TagList>\n            </TagGroup>\n            <TagGroup variant='danger' label='Danger' selectionMode='multiple'>\n                <TagList items={shoes}>{(item) => <Tag>{item.name}</Tag>}</TagList>\n            </TagGroup>\n            <TagGroup variant='success' label='Success' selectionMode='multiple'>\n                <TagList items={shoes}>{(item) => <Tag>{item.name}</Tag>}</TagList>\n            </TagGroup>\n            <TagGroup variant='info' label='Info' selectionMode='multiple'>\n                <TagList items={shoes}>{(item) => <Tag>{item.name}</Tag>}</TagList>\n            </TagGroup>\n            <TagGroup variant='warning' label='Warning' selectionMode='multiple'>\n                <TagList items={shoes}>{(item) => <Tag>{item.name}</Tag>}</TagList>\n            </TagGroup>\n            <TagGroup variant='dark' label='Dark' selectionMode='multiple'>\n                <TagList items={shoes}>{(item) => <Tag>{item.name}</Tag>}</TagList>\n            </TagGroup>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "collections/accordion-hide-indicator-demo": {
    "component": "@/components/docs/collections/accordion-hide-indicator-demo",
    "raw": "'use client'\n\nimport { Accordion } from '@/components/ui'\n\nexport default function AccordionHideIndicatorDemo() {\n    return (\n        <Accordion hideIndicator>\n            {faqs.map((item, index) => (\n                <Accordion.Item key={index} currentId={index}>\n                    <Accordion.Trigger>{item.q}</Accordion.Trigger>\n                    <Accordion.Content>{item.a}</Accordion.Content>\n                </Accordion.Item>\n            ))}\n        </Accordion>\n    )\n}\n\nconst faqs = [\n    {\n        q: 'What payment methods are accepted?',\n        a: 'We accept all major credit cards, PayPal, and Apple Pay.'\n    },\n    {\n        q: 'How long does shipping take?',\n        a: 'Shipping times vary by location but typically take between 3-7 business days.'\n    },\n    {\n        q: 'Can I track my order?',\n        a: 'Yes, you can track your order using the tracking link provided in your shipping confirmation email.'\n    }\n]\n",
    "type": "docs"
  },
  "collections/grid-list-disabled-demo": {
    "component": "@/components/docs/collections/grid-list-disabled-demo",
    "raw": "'use client'\n\nimport { GridList } from '@/components/ui'\n\nexport default function GridListDisabledDemo() {\n    return (\n        <GridList\n            items={items}\n            aria-label='Select your favorite bands'\n            selectionMode='multiple'\n            className='min-w-64'\n        >\n            {(item) => (\n                <GridList.Item isDisabled={[2, 5].includes(Number(item.id))} id={item.id}>\n                    {item.name}\n                </GridList.Item>\n            )}\n        </GridList>\n    )\n}\n\nconst items = [\n    { id: '1', name: 'The Beatles' },\n    { id: '2', name: 'Led Zeppelin' },\n    { id: '3', name: 'Pink Floyd' },\n    { id: '4', name: 'Queen' },\n    { id: '5', name: 'The Rolling Stones' }\n]\n",
    "type": "docs"
  },
  "collections/tag-group-disabled-demo": {
    "component": "@/components/docs/collections/tag-group-disabled-demo",
    "raw": "'use client'\n\nimport { Tag, TagGroup, TagList } from '@/components/ui'\n\nconst androidBrands = [\n    { id: '1', name: 'Samsung', available: false },\n    { id: '2', name: 'OnePlus', available: true },\n    { id: '3', name: 'Google', available: true },\n    { id: '4', name: 'Xiaomi', available: false }\n]\n\nexport default function TagGroupDisabledDemo() {\n    return (\n        <div className='space-y-6'>\n            <TagGroup\n                disabledKeys={androidBrands\n                    .filter((brand) => !brand.available)\n                    .map((brand) => brand.id)}\n                label='Disabled Key'\n                selectionMode='multiple'\n            >\n                <TagList items={androidBrands}>\n                    {(item) => <Tag>{item.name}</Tag>}\n                </TagList>\n            </TagGroup>\n\n            <TagGroup label='Disabled by Tag' selectionMode='multiple'>\n                <TagList items={androidBrands}>\n                    {(item) => <Tag isDisabled={item.available}>{item.name}</Tag>}\n                </TagList>\n            </TagGroup>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "collections/menu-sub-demo": {
    "component": "@/components/docs/collections/menu-sub-demo",
    "raw": "'use client'\n\nimport { buttonVariants, Menu } from '@/components/ui'\n\nexport default function MenuSubDemo() {\n    return (\n        <Menu>\n            <Menu.Trigger className={buttonVariants({ variant: 'outline' })}>\n                Open\n            </Menu.Trigger>\n            <Menu.Content placement='bottom' className='sm:min-w-48'>\n                <Menu.Item>Dashboard</Menu.Item>\n                <Menu.Item>Reports</Menu.Item>\n                <Menu.Separator />\n                <Menu.Sub>\n                    <Menu.Item>Settings</Menu.Item>\n                    <Menu.Content aria-labelledby='Settings'>\n                        <Menu.Item>General</Menu.Item>\n                        <Menu.Item>Security</Menu.Item>\n                        <Menu.Item>Privacy</Menu.Item>\n                        <Menu.Item>Data Sharing</Menu.Item>\n                    </Menu.Content>\n                </Menu.Sub>\n                <Menu.Item>Help</Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n",
    "type": "docs"
  },
  "collections/table-demo": {
    "component": "@/components/docs/collections/table-demo",
    "raw": "'use client'\n\nimport { Table } from '@/components/ui'\n\nexport const presidents = [\n    { id: '1', name: 'Soekarno', year: '1945 - 1965', terms: '20 Years' },\n    { id: '2', name: 'Soeharto', year: '1965 - 1998', terms: '32 Years' },\n    { id: '3', name: 'B.J. Habibie', year: '1998 - 1999', terms: '1 Year' },\n    { id: '4', name: 'Abdurrahman Wahid', year: '1999 - 2001', terms: '2 Years' },\n    { id: '5', name: 'Megawati Soekarnoputri', year: '2001 - 2004', terms: '3 Years' },\n    { id: '6', name: 'Susilo Bambang Yudhoyono', year: '2004 - 2014', terms: '10 Years' },\n    { id: '7', name: 'Joko Widodo', year: '2014 - 2024', terms: '10 Years' },\n    { id: '8', name: 'Prabowo Subianto', year: '2024 - Now', terms: 'Not yet' }\n]\n\nexport default function TableDemo() {\n    return (\n        <Table aria-label='President of Indonesia' selectionMode='multiple'>\n            <Table.Header>\n                <Table.Column>#</Table.Column>\n                <Table.Column isRowHeader>Name</Table.Column>\n                <Table.Column>Year</Table.Column>\n                <Table.Column>Terms</Table.Column>\n            </Table.Header>\n            <Table.Body items={presidents}>\n                {(item) => (\n                    <Table.Row key={item.id}>\n                        <Table.Cell>{item.id}</Table.Cell>\n                        <Table.Cell>{item.name}</Table.Cell>\n                        <Table.Cell>{item.year}</Table.Cell>\n                        <Table.Cell>{item.terms}</Table.Cell>\n                    </Table.Row>\n                )}\n            </Table.Body>\n        </Table>\n    )\n}\n",
    "type": "docs"
  },
  "collections/grid-list-demo": {
    "component": "@/components/docs/collections/grid-list-demo",
    "raw": "'use client'\n\nimport { GridList } from '@/components/ui'\n\nexport default function GridListDemo() {\n    return (\n        <GridList\n            items={items}\n            aria-label='Select your favorite bands'\n            className='min-w-64'\n        >\n            {(item) => <GridList.Item id={item.id}>{item.name}</GridList.Item>}\n        </GridList>\n    )\n}\n\nconst items = [\n    { id: '1', name: 'The Beatles' },\n    { id: '2', name: 'Led Zeppelin' },\n    { id: '3', name: 'Pink Floyd' },\n    { id: '4', name: 'Queen' },\n    { id: '5', name: 'The Rolling Stones' }\n]\n",
    "type": "docs"
  },
  "collections/tag-group-href-demo": {
    "component": "@/components/docs/collections/tag-group-href-demo",
    "raw": "'use client'\n\nimport { Tag, TagGroup, TagList } from '@/components/ui'\n\nconst articles = [\n    { name: 'React Tutorial', url: '#' },\n    { name: 'TypeScript Handbook', url: '#' },\n    { name: 'JavaScript Guide', url: '#' }\n]\n\nexport default function TagGroupControlledDemo() {\n    return (\n        <TagGroup>\n            <TagList items={articles}>\n                {(item) => (\n                    <Tag id={item.name} href={item.url}>\n                        {item.name}\n                    </Tag>\n                )}\n            </TagList>\n        </TagGroup>\n    )\n}\n",
    "type": "docs"
  },
  "collections/menu-item-details-demo": {
    "component": "@/components/docs/collections/menu-item-details-demo",
    "raw": "import { Button, Menu } from '@/components/ui'\n\nexport default function MenuItemDetailsDemo() {\n    return (\n        <Menu>\n            <Button variant='outline'>Open</Button>\n            <Menu.Content placement='bottom' items={roles}>\n                {(item) => (\n                    <Menu.Item id={item.id} textValue={item.name}>\n                        <Menu.ItemDetails\n                            label={item.name}\n                            description={item.description}\n                        />\n                    </Menu.Item>\n                )}\n            </Menu.Content>\n        </Menu>\n    )\n}\n\nconst roles = [\n    { id: 1, name: 'Admin', description: 'Has full access to all resources' },\n    {\n        id: 2,\n        name: 'Editor',\n        description: 'Can edit content but has limited access to settings'\n    },\n    { id: 3, name: 'Viewer', description: 'Can view content but cannot make changes' },\n    { id: 4, name: 'Contributor', description: 'Can contribute content for review' },\n    { id: 5, name: 'Guest', description: 'Limited access, mostly for viewing purposes' }\n]\n",
    "type": "docs"
  },
  "collections/single-menu-demo": {
    "component": "@/components/docs/collections/single-menu-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Menu } from '@/components/ui'\nimport type { Placement } from '@react-types/overlays'\nimport type { Selection } from '@react-types/shared'\n\nexport const placements = [\n    'bottom',\n    'bottom left',\n    'bottom right',\n    'bottom start',\n    'bottom end',\n    'top',\n    'top left',\n    'top right',\n    'top start',\n    'top end',\n    'left',\n    'left top',\n    'left bottom',\n    'start',\n    'start top',\n    'start bottom',\n    'right',\n    'right top',\n    'right bottom',\n    'end',\n    'end top',\n    'end bottom'\n].map((item, i) => ({ id: i, name: item }))\n\nexport default function SingleMenuDemo() {\n    const [selected, setSelected] = React.useState<Selection>(new Set(['bottom']))\n    return (\n        <Menu>\n            <Button variant='outline'>Placement</Button>\n            <Menu.Content\n                placement={Array.from(selected)[0] as Placement}\n                selectionMode='single'\n                selectedKeys={selected}\n                onSelectionChange={setSelected}\n                items={placements}\n                className='max-h-72 min-w-52'\n            >\n                {(item) => <Menu.Radio id={item.name}>{item.name}</Menu.Radio>}\n            </Menu.Content>\n        </Menu>\n    )\n}\n",
    "type": "docs"
  },
  "collections/grid-list-render-empty-state-demo": {
    "component": "@/components/docs/collections/grid-list-render-empty-state-demo",
    "raw": "'use client'\n\nimport { GridList } from '@/components/ui'\n\nexport default function GridListRenderEmptyStateDemo() {\n    return (\n        <GridList\n            items={items}\n            aria-label='Select items'\n            selectionMode='multiple'\n            className='min-w-64'\n            renderEmptyState={() => (\n                <GridList.EmptyState>No bands selected</GridList.EmptyState>\n            )}\n        />\n    )\n}\n\nconst items: Iterable<any> | undefined = []\n",
    "type": "docs"
  },
  "collections/table-drag-drop-demo": {
    "component": "@/components/docs/collections/table-drag-drop-demo",
    "raw": "'use client'\n\nimport { IconStar } from 'cleon-icons'\nimport { useDragAndDrop } from 'react-aria-components'\nimport { useListData } from 'react-stately'\n\nimport { Card, Table } from '@/components/ui'\n\nexport default function TableDragDropDemo() {\n    const list = useListData({\n        initialItems: movies\n    })\n\n    const { dragAndDropHooks } = useDragAndDrop({\n        getItems: (keys) =>\n            [...keys].map((key) => ({\n                'text/plain': list.getItem(key).name\n            })),\n        onReorder(e) {\n            if (e.target.dropPosition === 'before') {\n                list.moveBefore(e.target.key, e.keys)\n            } else if (e.target.dropPosition === 'after') {\n                list.moveAfter(e.target.key, e.keys)\n            }\n        }\n    })\n    return (\n        <Card>\n            <Table\n                aria-label='Movies'\n                selectionMode='multiple'\n                dragAndDropHooks={dragAndDropHooks}\n            >\n                <Table.Header>\n                    <Table.Column>#</Table.Column>\n                    <Table.Column isRowHeader>Name</Table.Column>\n                    <Table.Column>Genre</Table.Column>\n                    <Table.Column>Release</Table.Column>\n                    <Table.Column>Rating</Table.Column>\n                </Table.Header>\n                <Table.Body items={list.items}>\n                    {(item) => (\n                        <Table.Row>\n                            <Table.Cell>{item.id}</Table.Cell>\n                            <Table.Cell>{item.name}</Table.Cell>\n                            <Table.Cell>{item.genre}</Table.Cell>\n                            <Table.Cell>{item.releaseYear}</Table.Cell>\n                            <Table.Cell>\n                                <div className='flex items-center gap-x-2'>\n                                    <IconStar className='text-warning size-3.5' />{' '}\n                                    <span>{item.rating}</span>\n                                </div>\n                            </Table.Cell>\n                        </Table.Row>\n                    )}\n                </Table.Body>\n            </Table>\n        </Card>\n    )\n}\n\nconst movies = [\n    {\n        id: '1',\n        name: 'The Matrix',\n        genre: 'Sci-Fi',\n        releaseYear: 1999,\n        director: 'Wachowskis',\n        rating: 8.7\n    },\n    {\n        id: '2',\n        name: 'Inception',\n        genre: 'Sci-Fi',\n        releaseYear: 2010,\n        director: 'Christopher Nolan',\n        rating: 8.8\n    },\n    {\n        id: '3',\n        name: 'The Godfather',\n        genre: 'Crime',\n        releaseYear: 1972,\n        director: 'Francis Ford Coppola',\n        rating: 9.2\n    },\n    {\n        id: '4',\n        name: 'Pulp Fiction',\n        genre: 'Crime',\n        releaseYear: 1994,\n        director: 'Quentin Tarantino',\n        rating: 8.9\n    },\n    {\n        id: '5',\n        name: 'The Dark Knight',\n        genre: 'Action',\n        releaseYear: 2008,\n        director: 'Christopher Nolan',\n        rating: 9.0\n    },\n    {\n        id: '6',\n        name: 'Fight Club',\n        genre: 'Drama',\n        releaseYear: 1999,\n        director: 'David Fincher',\n        rating: 8.8\n    },\n    {\n        id: '7',\n        name: 'Forrest Gump',\n        genre: 'Drama',\n        releaseYear: 1994,\n        director: 'Robert Zemeckis',\n        rating: 8.8\n    }\n]\n",
    "type": "docs"
  },
  "collections/tag-group-demo": {
    "component": "@/components/docs/collections/tag-group-demo",
    "raw": "'use client'\n\nimport { Tag, TagGroup, TagList } from '@/components/ui'\n\nconst androidBrands = [\n    { id: '1', name: 'Samsung', available: false },\n    { id: '2', name: 'OnePlus', available: true },\n    { id: '3', name: 'Google', available: true },\n    { id: '4', name: 'Xiaomi', available: false }\n]\n\nexport default function TagGroupDemo() {\n    return (\n        <TagGroup label='Android Brands' selectionMode='multiple'>\n            <TagList items={androidBrands}>{(item) => <Tag>{item.name}</Tag>}</TagList>\n        </TagGroup>\n    )\n}\n",
    "type": "docs"
  },
  "collections/menu-with-icon-demo": {
    "component": "@/components/docs/collections/menu-with-icon-demo",
    "raw": "'use client'\n\nimport {\n    IconCommand,\n    IconDashboard,\n    IconDeviceDesktop,\n    IconHeadphones,\n    IconHeart,\n    IconLogout,\n    IconMoon,\n    IconSettings,\n    IconShoppingBag,\n    IconSun\n} from 'cleon-icons'\n\nimport { useTheme } from '@/components/providers'\nimport { Avatar, Menu } from '@/components/ui'\n\nexport default function MenuWithIconDemo() {\n    const { resolvedTheme, setTheme } = useTheme()\n    return (\n        <Menu>\n            <Menu.Trigger>\n                <Avatar className='size-10' src='https://github.com/dq-alhq.png' />\n            </Menu.Trigger>\n            <Menu.Content placement='bottom' showArrow className='min-w-64'>\n                <Menu.Section>\n                    <Menu.Header separator>\n                        <span className='block'>DQ Al-Haqqi</span>\n                        <span className='font-normal text-muted-foreground'>\n                            @dq-alhq\n                        </span>\n                    </Menu.Header>\n                </Menu.Section>\n                <Menu.Item href='#dashboard'>\n                    <IconDashboard />\n                    Dashboard\n                </Menu.Item>\n                <Menu.Item href='#settings'>\n                    <IconSettings />\n                    Settings\n                </Menu.Item>\n                <Menu.Separator />\n                <Menu.Item href='#wishlist'>\n                    <IconHeart />\n                    My Wishlist\n                </Menu.Item>\n                <Menu.Item href='#orders'>\n                    <IconShoppingBag />\n                    Orders\n                </Menu.Item>\n                <Menu.Separator />\n                <Menu.Item>\n                    <IconCommand />\n                    Command Menu.\n                </Menu.Item>\n                <Menu.Sub>\n                    <Menu.Item aria-label='Switch theme'>\n                        {resolvedTheme === 'light' ? (\n                            <IconSun />\n                        ) : resolvedTheme === 'dark' ? (\n                            <IconMoon />\n                        ) : (\n                            <IconDeviceDesktop />\n                        )}\n                        Switch theme\n                    </Menu.Item>\n                    <Menu.Content>\n                        <Menu.Item onAction={() => setTheme('system')}>\n                            <IconDeviceDesktop /> System\n                        </Menu.Item>\n                        <Menu.Item onAction={() => setTheme('dark')}>\n                            <IconMoon /> Dark\n                        </Menu.Item>\n                        <Menu.Item onAction={() => setTheme('light')}>\n                            <IconSun /> Light\n                        </Menu.Item>\n                    </Menu.Content>\n                </Menu.Sub>\n                <Menu.Separator />\n                <Menu.Item href='#contact-s'>\n                    <IconHeadphones />\n                    Contact Support\n                </Menu.Item>\n                <Menu.Separator />\n                <Menu.Item href='#logout'>\n                    <IconLogout />\n                    Log out\n                </Menu.Item>\n            </Menu.Content>\n        </Menu>\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-wheel-controlled-demo": {
    "component": "@/components/docs/colors/color-wheel-controlled-demo",
    "raw": "import React from 'react'\n\nimport { ColorThumb, ColorWheel, ColorWheelTrack } from '@/components/ui'\nimport { parseColor } from '@react-stately/color'\n\nexport default function ColorWheelControlledDemo() {\n    const [color, setColor] = React.useState(parseColor('hsl(0, 100%, 50%)'))\n    return (\n        <ColorWheel value={color} onChange={setColor} outerRadius={105} innerRadius={78}>\n            <ColorWheelTrack />\n            <ColorThumb />\n        </ColorWheel>\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-slider-with-label-demo": {
    "component": "@/components/docs/colors/color-slider-with-label-demo",
    "raw": "import { ColorSlider } from '@/components/ui'\n\nexport default function ColorSliderWithLabelDemo() {\n    return (\n        <ColorSlider\n            label='Color Customizer'\n            channel='hue'\n            defaultValue='hsl(0, 100%, 50%)'\n        />\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-area-controlled-demo": {
    "component": "@/components/docs/colors/color-area-controlled-demo",
    "raw": "import React from 'react'\n\nimport { ColorArea, ColorThumb, Description } from '@/components/ui'\nimport { parseColor } from '@react-stately/color'\n\nexport default function ColorAreaControlledDemo() {\n    const [value, setValue] = React.useState(parseColor('hsl(0, 100%, 50%)'))\n\n    return (\n        <>\n            <ColorArea value={value} onChange={setValue}>\n                <ColorThumb />\n            </ColorArea>\n            <Description className='block mt-2'>\n                Current color value:{' '}\n                <strong style={{ color: value.toString('hex') }}>\n                    {value.toString('hex')}\n                </strong>\n            </Description>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-field-controlled-demo": {
    "component": "@/components/docs/colors/color-field-controlled-demo",
    "raw": "import React from 'react'\n\nimport { ColorField } from '@/components/ui'\nimport { type Color, parseColor } from '@react-stately/color'\n\nexport default function ColorFieldControlledDemo() {\n    const [color, setColor] = React.useState(parseColor('#FAFAFA'))\n    const handleColorChange = (newColor: Color | null) => {\n        if (newColor) {\n            setColor(newColor)\n        }\n    }\n    return (\n        <ColorField\n            value={color}\n            onChange={handleColorChange}\n            label='Color'\n            placeholder='#FAFAFA'\n            description={`Current color value: ${color.toString('hex')}`}\n        />\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-slider-without-output-demo": {
    "component": "@/components/docs/colors/color-slider-without-output-demo",
    "raw": "import { ColorSlider } from '@/components/ui'\n\nexport default function ColorSliderWithoutOutputDemo() {\n    return (\n        <ColorSlider channel='hue' showOutput={false} defaultValue='hsl(0, 100%, 50%)' />\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-picker-with-placeholder-demo": {
    "component": "@/components/docs/colors/color-picker-with-placeholder-demo",
    "raw": "import React from 'react'\n\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerWithPlaceholderDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    return <ColorPicker placeholder='Select a color' value={color} onChange={setColor} />\n}\n",
    "type": "docs"
  },
  "colors/color-picker-demo": {
    "component": "@/components/docs/colors/color-picker-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ColorPicker } from '@/components/ui'\nimport { parseColor } from '@react-stately/color'\n\nexport default function ColorPickerDemo() {\n    const [color, setColor] = React.useState(parseColor('hsl(216, 98%, 52%)'))\n    return <ColorPicker label='Color Picker' value={color} onChange={setColor} />\n}\n",
    "type": "docs"
  },
  "colors/color-slider-demo": {
    "component": "@/components/docs/colors/color-slider-demo",
    "raw": "import { ColorSlider } from '@/components/ui'\n\nexport default function ColorSliderDemo() {\n    return <ColorSlider channel='hue' defaultValue='hsl(0, 100%, 50%)' />\n}\n",
    "type": "docs"
  },
  "colors/color-picker-controlled-demo": {
    "component": "@/components/docs/colors/color-picker-controlled-demo",
    "raw": "import React from 'react'\n\nimport { type Color } from 'react-aria-components'\n\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerControlledDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    const colorChangeHandler = (v: Color) => {\n        // ['hex','rgb','rgba','hsb','hsba','hsl','hsla']\n        // console.log(v.toString('hex'))\n        setColor(v)\n    }\n    return (\n        <ColorPicker\n            label='Pick Color'\n            value={color}\n            onChange={(v) => colorChangeHandler(v)}\n        />\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-wheel-disabled-demo": {
    "component": "@/components/docs/colors/color-wheel-disabled-demo",
    "raw": "import { ColorThumb, ColorWheel, ColorWheelTrack } from '@/components/ui'\n\nexport default function ColorWheelDisabledDemo() {\n    return (\n        <ColorWheel outerRadius={105} innerRadius={78}>\n            <ColorWheelTrack />\n            <ColorThumb />\n        </ColorWheel>\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-picker-with-label-demo": {
    "component": "@/components/docs/colors/color-picker-with-label-demo",
    "raw": "import React from 'react'\n\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerWithLabelDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    return <ColorPicker label='Theme Color' value={color} onChange={setColor} />\n}\n",
    "type": "docs"
  },
  "colors/color-picker-combination-demo": {
    "component": "@/components/docs/colors/color-picker-combination-demo",
    "raw": "import React from 'react'\n\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerEnableSelectionFormatDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    return (\n        <ColorPicker\n            enableColorFormatSelection\n            enableColorSwatch\n            value={color}\n            onChange={setColor}\n        />\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-slider-disabled-demo": {
    "component": "@/components/docs/colors/color-slider-disabled-demo",
    "raw": "import { ColorSlider } from '@/components/ui'\n\nexport default function ColorSliderDisabledDemo() {\n    return <ColorSlider isDisabled channel='hue' defaultValue='hsl(0, 100%, 50%)' />\n}\n",
    "type": "docs"
  },
  "colors/color-field-demo": {
    "component": "@/components/docs/colors/color-field-demo",
    "raw": "import { ColorField } from '@/components/ui'\n\nexport default function ColorFieldDemo() {\n    return <ColorField label='Color' placeholder='#FAFAFA' />\n}\n",
    "type": "docs"
  },
  "colors/color-picker-with-description-demo": {
    "component": "@/components/docs/colors/color-picker-with-description-demo",
    "raw": "import React from 'react'\n\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerWithDescriptionDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    return (\n        <ColorPicker\n            label='Theme Color'\n            description='Snag a color for the app theme'\n            value={color}\n            onChange={setColor}\n        />\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-picker-disabled-demo": {
    "component": "@/components/docs/colors/color-picker-disabled-demo",
    "raw": "import React from 'react'\n\nimport { ColorPicker } from '@/components/ui'\nimport { parseColor } from '@react-stately/color'\n\nexport default function ColorPickerDemo() {\n    const [color, setColor] = React.useState(parseColor('hsl(216, 98%, 52%)'))\n    return (\n        <ColorPicker isDisabled label='Color Picker' value={color} onChange={setColor} />\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-swatch-demo": {
    "component": "@/components/docs/colors/color-swatch-demo",
    "raw": "import { ColorSwatch } from '@/components/ui'\n\nexport default function ColorSwatchDemo() {\n    return <ColorSwatch aria-label='Current color' color='#0d6efd' />\n}\n",
    "type": "docs"
  },
  "colors/color-wheel-demo": {
    "component": "@/components/docs/colors/color-wheel-demo",
    "raw": "import { ColorThumb, ColorWheel, ColorWheelTrack } from '@/components/ui'\n\nexport default function ColorWheelDemo() {\n    return (\n        <ColorWheel outerRadius={105} innerRadius={78}>\n            <ColorWheelTrack />\n            <ColorThumb />\n        </ColorWheel>\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-swatch-picker-demo": {
    "component": "@/components/docs/colors/color-swatch-picker-demo",
    "raw": "import * as React from 'react'\n\nimport { ColorSwatchPicker, ColorSwatchPickerItem } from '@/components/ui'\nimport { parseColor } from '@react-stately/color'\n\nexport default function ColorSwatchPickerDemo() {\n    const [value, setValue] = React.useState(parseColor('#0d6efd'))\n    return (\n        <ColorSwatchPicker\n            value={value}\n            onChange={setValue}\n            className='grid grid-cols-3 lg:grid-cols-6 gap-2'\n        >\n            <ColorSwatchPickerItem color='#f59e0b' />\n            <ColorSwatchPickerItem color='#84cc16' />\n            <ColorSwatchPickerItem color='#0d6efd' />\n            <ColorSwatchPickerItem color='#ec4899' />\n            <ColorSwatchPickerItem color='#f43f5e' />\n        </ColorSwatchPicker>\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-area-channel-demo": {
    "component": "@/components/docs/colors/color-area-channel-demo",
    "raw": "import { ColorArea, ColorThumb } from '@/components/ui'\n\nexport default function ColorAreaChannelDemo() {\n    return (\n        <ColorArea xChannel='alpha' yChannel='blue'>\n            <ColorThumb />\n        </ColorArea>\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-swatch-picker-item-disabled-demo": {
    "component": "@/components/docs/colors/color-swatch-picker-item-disabled-demo",
    "raw": "import * as React from 'react'\n\nimport { ColorSwatchPicker, ColorSwatchPickerItem } from '@/components/ui'\nimport { parseColor } from '@react-stately/color'\n\nexport default function ColorSwatchPickerDemo() {\n    const [value, setValue] = React.useState(parseColor('#0d6efd'))\n    return (\n        <ColorSwatchPicker\n            value={value}\n            onChange={setValue}\n            className='grid grid-cols-3 lg:grid-cols-6 gap-2'\n        >\n            <ColorSwatchPickerItem isDisabled color='#f59e0b' />\n            <ColorSwatchPickerItem color='#84cc16' />\n            <ColorSwatchPickerItem color='#0d6efd' />\n            <ColorSwatchPickerItem isDisabled color='#ec4899' />\n            <ColorSwatchPickerItem isDisabled color='#f43f5e' />\n        </ColorSwatchPicker>\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-area-demo": {
    "component": "@/components/docs/colors/color-area-demo",
    "raw": "import { ColorArea, ColorThumb as Thumb } from '@/components/ui'\n\nexport default function ColorAreaDemo() {\n    return (\n        <ColorArea>\n            <Thumb />\n        </ColorArea>\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-area-space-demo": {
    "component": "@/components/docs/colors/color-area-space-demo",
    "raw": "import { ColorArea, ColorThumb } from '@/components/ui'\n\nexport default function ColorAreaSpaceDemo() {\n    return (\n        <ColorArea colorSpace='rgb'>\n            <ColorThumb />\n        </ColorArea>\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-field-with-suffix-demo": {
    "component": "@/components/docs/colors/color-field-with-suffix-demo",
    "raw": "import { IconColorSwatch } from 'cleon-icons'\n\nimport { ColorField } from '@/components/ui'\n\nexport default function ColorFieldWithSuffixDemo() {\n    return <ColorField label='Color' suffix={<IconColorSwatch />} placeholder='#FAFAFA' />\n}\n",
    "type": "docs"
  },
  "colors/color-swatch-controlled-demo": {
    "component": "@/components/docs/colors/color-swatch-controlled-demo",
    "raw": "import * as React from 'react'\n\nimport { ColorSwatchPicker, ColorSwatchPickerItem, Description } from '@/components/ui'\nimport { parseColor } from '@react-stately/color'\n\nexport default function ColorSwatchPickerDemo() {\n    const [value, setValue] = React.useState(parseColor('#0d6efd'))\n    return (\n        <div>\n            <ColorSwatchPicker\n                value={value}\n                onChange={setValue}\n                className='grid grid-cols-3 lg:grid-cols-6 gap-2'\n            >\n                <ColorSwatchPickerItem color='#f59e0b' />\n                <ColorSwatchPickerItem color='#84cc16' />\n                <ColorSwatchPickerItem color='#0d6efd' />\n                <ColorSwatchPickerItem color='#ec4899' />\n                <ColorSwatchPickerItem color='#f43f5e' />\n            </ColorSwatchPicker>\n            <Description className='block mt-2'>\n                Current color value:{' '}\n                <strong style={{ color: value.toString('hex') }}>\n                    {value.toString('hex')}\n                </strong>\n            </Description>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-field-with-prefix-demo": {
    "component": "@/components/docs/colors/color-field-with-prefix-demo",
    "raw": "import { IconColorSwatch } from 'cleon-icons'\n\nimport { ColorField } from '@/components/ui'\n\nexport default function ColorFieldWithPrefixDemo() {\n    return <ColorField label='Color' prefix={<IconColorSwatch />} placeholder='#FAFAFA' />\n}\n",
    "type": "docs"
  },
  "colors/color-picker-custom-colors-demo": {
    "component": "@/components/docs/colors/color-picker-custom-colors-demo",
    "raw": "import React from 'react'\n\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerCustomColorsDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    return (\n        <ColorPicker\n            enableColorFormatSelection\n            enableColorSwatch\n            colors={[\n                '#eef8ff',\n                '#d8eeff',\n                '#b9e0ff',\n                '#89cfff',\n                '#52b4ff',\n                '#2a91ff',\n                '#0d6efd',\n                '#0c5ae9',\n                '#1149bc',\n                '#144194',\n                '#11295a'\n            ]}\n            value={color}\n            onChange={setColor}\n        />\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-area-disabled-demo": {
    "component": "@/components/docs/colors/color-area-disabled-demo",
    "raw": "import { ColorArea, ColorThumb as Thumb } from '@/components/ui'\n\nexport default function ColorAreaDisabledDemo() {\n    return (\n        <ColorArea isDisabled>\n            <Thumb />\n        </ColorArea>\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-picker-enable-selection-format-demo": {
    "component": "@/components/docs/colors/color-picker-enable-selection-format-demo",
    "raw": "import React from 'react'\n\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerEnableSelectionFormatDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    return <ColorPicker enableColorFormatSelection value={color} onChange={setColor} />\n}\n",
    "type": "docs"
  },
  "colors/color-picker-enable-swatch-demo": {
    "component": "@/components/docs/colors/color-picker-enable-swatch-demo",
    "raw": "import React from 'react'\n\nimport { type Color } from 'react-aria-components'\n\nimport { ColorPicker, defaultColor } from '@/components/ui'\n\nexport default function ColorPickerEnableSwatchDemo() {\n    const [color, setColor] = React.useState(defaultColor)\n    const colorChangeHandler = (v: Color) => {\n        // ['hex','rgb','rgba','hsb','hsba','hsl','hsla']\n        console.log(v.toString('hex'))\n        setColor(v)\n    }\n    return (\n        <ColorPicker\n            enableColorSwatch\n            value={color}\n            onChange={(v) => colorChangeHandler(v)}\n        />\n    )\n}\n",
    "type": "docs"
  },
  "colors/color-field-disabled-demo": {
    "component": "@/components/docs/colors/color-field-disabled-demo",
    "raw": "import { ColorField } from '@/components/ui'\n\nexport default function ColorFieldDisabledDemo() {\n    return <ColorField isDisabled label='Color' placeholder='#FAFAFA' />\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger-disabled-demo": {
    "component": "@/components/docs/buttons/file-trigger-disabled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerDemo() {\n    const [file, setFile] = React.useState<string[] | null>(null)\n    return (\n        <>\n            <FileTrigger\n                isDisabled\n                onSelect={(e) => {\n                    const files = Array.from(e ?? [])\n                    const filenames = files.map((file) => file.name)\n                    setFile(filenames)\n                }}\n            />\n            {file && <Description>{file}</Description>}\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger-controlled-demo": {
    "component": "@/components/docs/buttons/file-trigger-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerControlledDemo() {\n    const [file, setFile] = React.useState<string[] | null>(null)\n    return (\n        <>\n            <FileTrigger\n                onSelect={(e) => {\n                    const files = Array.from(e ?? [])\n                    const filenames = files.map((file) => file.name)\n                    setFile(filenames)\n                }}\n            />\n            {file && (\n                <Description className='truncate max-w-60 [&>strong]:font-medium block [&>strong]:text-foreground mt-2'>\n                    Your file: <strong>{file}</strong>\n                </Description>\n            )}\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "buttons/button-only-icon-demo": {
    "component": "@/components/docs/buttons/button-only-icon-demo",
    "raw": "'use client'\n\nimport { IconBrandNextjs } from 'cleon-icons'\n\nimport { Button } from '@/components/ui'\n\nexport default function ButtonOnlyIconDemo() {\n    return (\n        <Button size='icon'>\n            <IconBrandNextjs className='size-4' />\n        </Button>\n    )\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger-folder-demo": {
    "component": "@/components/docs/buttons/file-trigger-folder-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerFolderDemo() {\n    return <FileTrigger acceptDirectory />\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger-camera-demo": {
    "component": "@/components/docs/buttons/file-trigger-camera-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerCameraDemo() {\n    return <FileTrigger defaultCamera='environment'>Open a camera</FileTrigger>\n}\n",
    "type": "docs"
  },
  "buttons/button-disabled-demo": {
    "component": "@/components/docs/buttons/button-disabled-demo",
    "raw": "'use client'\n\nimport { Button } from '@/components/ui'\n\nexport default function ButtonDisabledDemo() {\n    return <Button isDisabled>This Button is Disabled</Button>\n}\n",
    "type": "docs"
  },
  "buttons/button-size-demo": {
    "component": "@/components/docs/buttons/button-size-demo",
    "raw": "'use client'\n\nimport { IconBrandNextjs } from 'cleon-icons'\n\nimport { Button } from '@/components/ui'\n\nexport default function ButtonSizeDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap justify-center items-center'>\n            <Button size='xs'>Extra Small</Button>\n            <Button size='sm'>Small</Button>\n            <Button>Medium (Default)</Button>\n            <Button size='lg'>Large</Button>\n            <Button size='icon'>\n                <IconBrandNextjs />\n            </Button>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger-multiple-demo": {
    "component": "@/components/docs/buttons/file-trigger-multiple-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerMultipleDemo() {\n    return <FileTrigger allowsMultiple />\n}\n",
    "type": "docs"
  },
  "buttons/button-basic-demo": {
    "component": "@/components/docs/buttons/button-basic-demo",
    "raw": "'use client'\n\nimport { Button } from '@/components/ui'\n\nexport default function ButtonBasicDemo() {\n    return <Button>This is Button</Button>\n}\n",
    "type": "docs"
  },
  "buttons/toggle-button-demo": {
    "component": "@/components/docs/buttons/toggle-button-demo",
    "raw": "'use client'\n\nimport { IconSun } from 'cleon-icons'\n\nimport { buttonVariants, Toggle } from '@/components/ui'\n\ntype Variant = keyof typeof buttonVariants.variants.variant\n\nexport default function ToggleButtonDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap justify-center items-center'>\n            {Object.keys(buttonVariants.variants.variant).map((variant) => (\n                <div key={variant}>\n                    <Toggle size='icon' variant={variant as Variant}>\n                        {({ isSelected }) => (\n                            <>\n                                {isSelected ? (\n                                    <IconSun className='fill-foreground' />\n                                ) : (\n                                    <IconSun />\n                                )}\n                            </>\n                        )}\n                    </Toggle>\n                </div>\n            ))}\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "buttons/button-shape-demo": {
    "component": "@/components/docs/buttons/button-shape-demo",
    "raw": "'use client'\n\nimport { Button } from '@/components/ui'\n\nexport default function ButtonShapeDemo() {\n    return (\n        <div className='flex gap-2'>\n            <Button shape='square'>Square</Button>\n            <Button shape='circle'>Circle</Button>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "buttons/button-icon-demo": {
    "component": "@/components/docs/buttons/button-icon-demo",
    "raw": "'use client'\n\nimport { IconBrandNextjs } from 'cleon-icons'\n\nimport { Button } from '@/components/ui'\n\nexport default function ButtonIconDemo() {\n    return (\n        <Button>\n            <IconBrandNextjs className='size-4' />\n            Next.Js\n        </Button>\n    )\n}\n",
    "type": "docs"
  },
  "buttons/button-variant-demo": {
    "component": "@/components/docs/buttons/button-variant-demo",
    "raw": "'use client'\n\nimport { Button, buttonVariants } from '@/components/ui'\n\ntype Variant = keyof typeof buttonVariants.variants.variant\n\nexport default function ButtonVariantDemo() {\n    return (\n        <div className='flex flex-col gap-2 md:flex-row md:flex-wrap justify-center items-center'>\n            {Object.keys(buttonVariants.variants.variant).map((variant) => (\n                <div key={variant}>\n                    <Button variant={variant as Variant}>{variant}</Button>\n                </div>\n            ))}\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger-avatar-demo": {
    "component": "@/components/docs/buttons/file-trigger-avatar-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconUser } from 'cleon-icons'\nimport { isFileDropItem } from 'react-aria-components'\n\nimport { Avatar, DropZone, FileTrigger } from '@/components/ui'\nimport { cn } from '@/lib/utils'\nimport type { DropEvent } from '@react-types/shared'\n\nexport default function FileTriggerAvatarDemo() {\n    const [droppedImage, setDroppedImage] = React.useState<string | undefined>('')\n\n    const onDropHandler = async (e: DropEvent) => {\n        const item = e.items\n            .filter(isFileDropItem)\n            .find((item) => item.type === 'image/jpeg' || item.type === 'image/png')\n        if (item) {\n            const file = await item.getFile()\n            setDroppedImage(URL.createObjectURL(file))\n        }\n    }\n\n    async function onSelectHandler(e: any) {\n        if (e) {\n            const files = Array.from([...e])\n            const item = files[0]\n\n            if (item) {\n                setDroppedImage(URL.createObjectURL(item))\n            }\n        }\n    }\n\n    return (\n        <div className='flex items-center gap-2'>\n            <DropZone\n                getDropOperation={() => 'copy'}\n                onDrop={onDropHandler}\n                className={cn(\n                    'rounded-full bg-tertiary p-0 size-10 grid place-content-center overflow-hidden',\n                    droppedImage && 'border-solid border-foreground/20'\n                )}\n            >\n                {droppedImage ? (\n                    <Avatar src={droppedImage} size='lg' />\n                ) : (\n                    <IconUser className='size-6 text-muted-foreground' />\n                )}\n                <input type='hidden' name='image' value={droppedImage} />\n            </DropZone>\n            <FileTrigger\n                size='sm'\n                acceptedFileTypes={['image/png', 'image/jpeg']}\n                onSelect={onSelectHandler}\n            >\n                Upload avatar\n            </FileTrigger>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "buttons/file-trigger-demo": {
    "component": "@/components/docs/buttons/file-trigger-demo",
    "raw": "'use client'\n\nimport { FileTrigger } from '@/components/ui'\n\nexport default function FileTriggerDemo() {\n    return <FileTrigger />\n}\n",
    "type": "docs"
  },
  "charts/bar-chart-stacked-demo": {
    "component": "@/components/docs/charts/bar-chart-stacked-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { Bar, BarChart, CartesianGrid, XAxis } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartLegend,\n    ChartLegendContent,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186, mobile: 80 },\n    { month: 'February', desktop: 305, mobile: 200 },\n    { month: 'March', desktop: 237, mobile: 120 },\n    { month: 'April', desktop: 73, mobile: 190 },\n    { month: 'May', desktop: 209, mobile: 130 },\n    { month: 'June', desktop: 214, mobile: 140 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    },\n    mobile: {\n        label: 'Mobile',\n        color: 'hsl(var(--chart-2))'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartStackedDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Bar Chart - Stacked + Legend</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <ChartContainer config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <ChartTooltip content={<ChartTooltipContent hideLabel />} />\n                        <ChartLegend content={<ChartLegendContent />} />\n                        <Bar\n                            dataKey='desktop'\n                            stackId='a'\n                            fill='var(--color-desktop)'\n                            radius={[0, 0, 4, 4]}\n                        />\n                        <Bar\n                            dataKey='mobile'\n                            stackId='a'\n                            fill='var(--color-mobile)'\n                            radius={[4, 4, 0, 0]}\n                        />\n                    </BarChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col items-start gap-2 text-sm'>\n                <div className='flex gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/line-chart-multiple-demo": {
    "component": "@/components/docs/charts/line-chart-multiple-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186, mobile: 80 },\n    { month: 'February', desktop: 305, mobile: 200 },\n    { month: 'March', desktop: 237, mobile: 120 },\n    { month: 'April', desktop: 73, mobile: 190 },\n    { month: 'May', desktop: 209, mobile: 130 },\n    { month: 'June', desktop: 214, mobile: 140 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    },\n    mobile: {\n        label: 'Mobile',\n        color: 'hsl(var(--chart-2))'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartMultipleDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Line Chart - Multiple</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <ChartContainer config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <ChartTooltip cursor={false} content={<ChartTooltipContent />} />\n                        <Line\n                            dataKey='desktop'\n                            type='monotone'\n                            stroke='var(--color-desktop)'\n                            strokeWidth={2}\n                            dot={false}\n                        />\n                        <Line\n                            dataKey='mobile'\n                            type='monotone'\n                            stroke='var(--color-mobile)'\n                            strokeWidth={2}\n                            dot={false}\n                        />\n                    </LineChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer>\n                <div className='flex w-full items-start gap-2 text-sm'>\n                    <div className='grid gap-2'>\n                        <div className='flex items-center gap-2 font-medium leading-none'>\n                            Trending up by 5.2% this month{' '}\n                            <IconTrendingUp className='h-4 w-4' />\n                        </div>\n                        <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                            Showing total visitors for the last 6 months\n                        </div>\n                    </div>\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/bar-chart-simple-demo": {
    "component": "@/components/docs/charts/bar-chart-simple-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { Bar, BarChart, CartesianGrid, XAxis } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186 },\n    { month: 'February', desktop: 305 },\n    { month: 'March', desktop: 237 },\n    { month: 'April', desktop: 73 },\n    { month: 'May', desktop: 209 },\n    { month: 'June', desktop: 214 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartSimpleDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Bar Chart</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <ChartContainer config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent hideLabel />}\n                        />\n                        <Bar dataKey='desktop' fill='var(--color-desktop)' radius={8} />\n                    </BarChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col items-start gap-2 text-sm'>\n                <div className='flex gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/line-chart-custom-label-demo": {
    "component": "@/components/docs/charts/line-chart-custom-label-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { CartesianGrid, LabelList, Line, LineChart } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { browser: 'chrome', visitors: 275, fill: 'var(--color-chrome)' },\n    { browser: 'safari', visitors: 200, fill: 'var(--color-safari)' },\n    { browser: 'firefox', visitors: 187, fill: 'var(--color-firefox)' },\n    { browser: 'edge', visitors: 173, fill: 'var(--color-edge)' },\n    { browser: 'other', visitors: 90, fill: 'var(--color-other)' }\n]\n\nconst chartConfig = {\n    visitors: {\n        label: 'Visitors',\n        color: 'hsl(var(--chart-2))'\n    },\n    chrome: {\n        label: 'Chrome',\n        color: 'hsl(var(--chart-1))'\n    },\n    safari: {\n        label: 'Safari',\n        color: 'hsl(var(--chart-2))'\n    },\n    firefox: {\n        label: 'Firefox',\n        color: 'hsl(var(--chart-3))'\n    },\n    edge: {\n        label: 'Edge',\n        color: 'hsl(var(--chart-4))'\n    },\n    other: {\n        label: 'Other',\n        color: 'hsl(var(--chart-5))'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartCustomLabelDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Line Chart - Custom Label</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <ChartContainer config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            top: 24,\n                            left: 24,\n                            right: 24\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <ChartTooltip\n                            cursor={false}\n                            content={\n                                <ChartTooltipContent\n                                    indicator='line'\n                                    nameKey='visitors'\n                                    hideLabel\n                                />\n                            }\n                        />\n                        <Line\n                            dataKey='visitors'\n                            type='natural'\n                            stroke='var(--color-visitors)'\n                            strokeWidth={2}\n                            dot={{\n                                fill: 'var(--color-visitors)'\n                            }}\n                            activeDot={{\n                                r: 6\n                            }}\n                        >\n                            <LabelList\n                                position='top'\n                                offset={12}\n                                className='fill-foreground'\n                                fontSize={12}\n                                dataKey='browser'\n                                formatter={(value: keyof typeof chartConfig) =>\n                                    chartConfig[value]?.label\n                                }\n                            />\n                        </Line>\n                    </LineChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col items-start gap-2 text-sm'>\n                <div className='flex gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/pie-chart-separator-none-demo": {
    "component": "@/components/docs/charts/pie-chart-separator-none-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { Pie, PieChart } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { browser: 'chrome', visitors: 275, fill: 'var(--color-chrome)' },\n    { browser: 'safari', visitors: 200, fill: 'var(--color-safari)' },\n    { browser: 'firefox', visitors: 187, fill: 'var(--color-firefox)' },\n    { browser: 'edge', visitors: 173, fill: 'var(--color-edge)' },\n    { browser: 'other', visitors: 90, fill: 'var(--color-other)' }\n]\n\nconst chartConfig = {\n    visitors: {\n        label: 'Visitors'\n    },\n    chrome: {\n        label: 'Chrome',\n        color: 'hsl(var(--chart-1))'\n    },\n    safari: {\n        label: 'Safari',\n        color: 'hsl(var(--chart-2))'\n    },\n    firefox: {\n        label: 'Firefox',\n        color: 'hsl(var(--chart-3))'\n    },\n    edge: {\n        label: 'Edge',\n        color: 'hsl(var(--chart-4))'\n    },\n    other: {\n        label: 'Other',\n        color: 'hsl(var(--chart-5))'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartSeparatorNoneDemo() {\n    return (\n        <Card className='flex flex-col'>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Pie Chart - Separator None</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[250px]'\n                >\n                    <PieChart>\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent hideLabel />}\n                        />\n                        <Pie\n                            data={chartData}\n                            dataKey='visitors'\n                            nameKey='browser'\n                            stroke='0'\n                        />\n                    </PieChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/line-chart-custom-dots-demo": {
    "component": "@/components/docs/charts/line-chart-custom-dots-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { IconPointer } from 'cleon-icons'\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186, mobile: 80 },\n    { month: 'February', desktop: 305, mobile: 200 },\n    { month: 'March', desktop: 237, mobile: 120 },\n    { month: 'April', desktop: 73, mobile: 190 },\n    { month: 'May', desktop: 209, mobile: 130 },\n    { month: 'June', desktop: 214, mobile: 140 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    },\n    mobile: {\n        label: 'Mobile',\n        color: 'hsl(var(--chart-2))'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartCustomDotsDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Line Chart - Custom Dots</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <ChartContainer config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent hideLabel />}\n                        />\n                        <Line\n                            dataKey='desktop'\n                            type='natural'\n                            stroke='var(--color-desktop)'\n                            strokeWidth={2}\n                            dot={({ cx, cy, payload }) => {\n                                const r = 24\n                                return (\n                                    <IconPointer\n                                        key={payload.month}\n                                        x={cx - r / 2}\n                                        y={cy - r / 2}\n                                        width={r}\n                                        height={r}\n                                        fill='hsl(var(--background))'\n                                        stroke='var(--color-desktop)'\n                                    />\n                                )\n                            }}\n                        />\n                    </LineChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col items-start gap-2 text-sm'>\n                <div className='flex gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/radar-chart-icons-demo": {
    "component": "@/components/docs/charts/radar-chart-icons-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { IconArrowDown, IconArrowUp } from 'cleon-icons'\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartLegend,\n    ChartLegendContent,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186, mobile: 80 },\n    { month: 'February', desktop: 305, mobile: 200 },\n    { month: 'March', desktop: 237, mobile: 120 },\n    { month: 'April', desktop: 73, mobile: 190 },\n    { month: 'May', desktop: 209, mobile: 130 },\n    { month: 'June', desktop: 214, mobile: 140 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))',\n        icon: IconArrowUp\n    },\n    mobile: {\n        label: 'Mobile',\n        color: 'hsl(var(--chart-2))',\n        icon: IconArrowDown\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartIconsDemo() {\n    return (\n        <Card>\n            <Card.Header className='items-center pb-4'>\n                <Card.Title>Radar Chart - Icons</Card.Title>\n                <Card.Description>\n                    Showing total visitors for the last 6 months\n                </Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[250px]'\n                >\n                    <RadarChart\n                        data={chartData}\n                        margin={{\n                            top: -40,\n                            bottom: -10\n                        }}\n                    >\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent indicator='line' />}\n                        />\n                        <PolarAngleAxis dataKey='month' />\n                        <PolarGrid />\n                        <Radar\n                            dataKey='desktop'\n                            fill='var(--color-desktop)'\n                            fillOpacity={0.6}\n                        />\n                        <Radar dataKey='mobile' fill='var(--color-mobile)' />\n                        <ChartLegend className='mt-8' content={<ChartLegendContent />} />\n                    </RadarChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 pt-4 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                    January - June 2024\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/bar-chart-interactive-demo": {
    "component": "@/components/docs/charts/bar-chart-interactive-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { Bar, BarChart, CartesianGrid, XAxis } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { date: '2024-04-01', desktop: 222, mobile: 150 },\n    { date: '2024-04-02', desktop: 97, mobile: 180 },\n    { date: '2024-04-03', desktop: 167, mobile: 120 },\n    { date: '2024-04-04', desktop: 242, mobile: 260 },\n    { date: '2024-04-05', desktop: 373, mobile: 290 },\n    { date: '2024-04-06', desktop: 301, mobile: 340 },\n    { date: '2024-04-07', desktop: 245, mobile: 180 },\n    { date: '2024-04-08', desktop: 409, mobile: 320 },\n    { date: '2024-04-09', desktop: 59, mobile: 110 },\n    { date: '2024-04-10', desktop: 261, mobile: 190 },\n    { date: '2024-04-11', desktop: 327, mobile: 350 },\n    { date: '2024-04-12', desktop: 292, mobile: 210 },\n    { date: '2024-04-13', desktop: 342, mobile: 380 },\n    { date: '2024-04-14', desktop: 137, mobile: 220 },\n    { date: '2024-04-15', desktop: 120, mobile: 170 },\n    { date: '2024-04-16', desktop: 138, mobile: 190 },\n    { date: '2024-04-17', desktop: 446, mobile: 360 },\n    { date: '2024-04-18', desktop: 364, mobile: 410 },\n    { date: '2024-04-19', desktop: 243, mobile: 180 },\n    { date: '2024-04-20', desktop: 89, mobile: 150 },\n    { date: '2024-04-21', desktop: 137, mobile: 200 },\n    { date: '2024-04-22', desktop: 224, mobile: 170 },\n    { date: '2024-04-23', desktop: 138, mobile: 230 },\n    { date: '2024-04-24', desktop: 387, mobile: 290 },\n    { date: '2024-04-25', desktop: 215, mobile: 250 },\n    { date: '2024-04-26', desktop: 75, mobile: 130 },\n    { date: '2024-04-27', desktop: 383, mobile: 420 },\n    { date: '2024-04-28', desktop: 122, mobile: 180 },\n    { date: '2024-04-29', desktop: 315, mobile: 240 },\n    { date: '2024-04-30', desktop: 454, mobile: 380 },\n    { date: '2024-05-01', desktop: 165, mobile: 220 },\n    { date: '2024-05-02', desktop: 293, mobile: 310 },\n    { date: '2024-05-03', desktop: 247, mobile: 190 },\n    { date: '2024-05-04', desktop: 385, mobile: 420 },\n    { date: '2024-05-05', desktop: 481, mobile: 390 },\n    { date: '2024-05-06', desktop: 498, mobile: 520 },\n    { date: '2024-05-07', desktop: 388, mobile: 300 },\n    { date: '2024-05-08', desktop: 149, mobile: 210 },\n    { date: '2024-05-09', desktop: 227, mobile: 180 },\n    { date: '2024-05-10', desktop: 293, mobile: 330 },\n    { date: '2024-05-11', desktop: 335, mobile: 270 },\n    { date: '2024-05-12', desktop: 197, mobile: 240 },\n    { date: '2024-05-13', desktop: 197, mobile: 160 },\n    { date: '2024-05-14', desktop: 448, mobile: 490 },\n    { date: '2024-05-15', desktop: 473, mobile: 380 },\n    { date: '2024-05-16', desktop: 338, mobile: 400 },\n    { date: '2024-05-17', desktop: 499, mobile: 420 },\n    { date: '2024-05-18', desktop: 315, mobile: 350 },\n    { date: '2024-05-19', desktop: 235, mobile: 180 },\n    { date: '2024-05-20', desktop: 177, mobile: 230 },\n    { date: '2024-05-21', desktop: 82, mobile: 140 },\n    { date: '2024-05-22', desktop: 81, mobile: 120 },\n    { date: '2024-05-23', desktop: 252, mobile: 290 },\n    { date: '2024-05-24', desktop: 294, mobile: 220 },\n    { date: '2024-05-25', desktop: 201, mobile: 250 },\n    { date: '2024-05-26', desktop: 213, mobile: 170 },\n    { date: '2024-05-27', desktop: 420, mobile: 460 },\n    { date: '2024-05-28', desktop: 233, mobile: 190 },\n    { date: '2024-05-29', desktop: 78, mobile: 130 },\n    { date: '2024-05-30', desktop: 340, mobile: 280 },\n    { date: '2024-05-31', desktop: 178, mobile: 230 },\n    { date: '2024-06-01', desktop: 178, mobile: 200 },\n    { date: '2024-06-02', desktop: 470, mobile: 410 },\n    { date: '2024-06-03', desktop: 103, mobile: 160 },\n    { date: '2024-06-04', desktop: 439, mobile: 380 },\n    { date: '2024-06-05', desktop: 88, mobile: 140 },\n    { date: '2024-06-06', desktop: 294, mobile: 250 },\n    { date: '2024-06-07', desktop: 323, mobile: 370 },\n    { date: '2024-06-08', desktop: 385, mobile: 320 },\n    { date: '2024-06-09', desktop: 438, mobile: 480 },\n    { date: '2024-06-10', desktop: 155, mobile: 200 },\n    { date: '2024-06-11', desktop: 92, mobile: 150 },\n    { date: '2024-06-12', desktop: 492, mobile: 420 },\n    { date: '2024-06-13', desktop: 81, mobile: 130 },\n    { date: '2024-06-14', desktop: 426, mobile: 380 },\n    { date: '2024-06-15', desktop: 307, mobile: 350 },\n    { date: '2024-06-16', desktop: 371, mobile: 310 },\n    { date: '2024-06-17', desktop: 475, mobile: 520 },\n    { date: '2024-06-18', desktop: 107, mobile: 170 },\n    { date: '2024-06-19', desktop: 341, mobile: 290 },\n    { date: '2024-06-20', desktop: 408, mobile: 450 },\n    { date: '2024-06-21', desktop: 169, mobile: 210 },\n    { date: '2024-06-22', desktop: 317, mobile: 270 },\n    { date: '2024-06-23', desktop: 480, mobile: 530 },\n    { date: '2024-06-24', desktop: 132, mobile: 180 },\n    { date: '2024-06-25', desktop: 141, mobile: 190 },\n    { date: '2024-06-26', desktop: 434, mobile: 380 },\n    { date: '2024-06-27', desktop: 448, mobile: 490 },\n    { date: '2024-06-28', desktop: 149, mobile: 200 },\n    { date: '2024-06-29', desktop: 103, mobile: 160 },\n    { date: '2024-06-30', desktop: 446, mobile: 400 }\n]\n\nconst chartConfig = {\n    views: {\n        label: 'Page Views'\n    },\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    },\n    mobile: {\n        label: 'Mobile',\n        color: 'hsl(var(--chart-2))'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartInteractiveDemo() {\n    const [activeChart, setActiveChart] =\n        React.useState<keyof typeof chartConfig>('desktop')\n\n    const total = React.useMemo(\n        () => ({\n            desktop: chartData.reduce((acc, curr) => acc + curr.desktop, 0),\n            mobile: chartData.reduce((acc, curr) => acc + curr.mobile, 0)\n        }),\n        []\n    )\n\n    return (\n        <Card>\n            <Card.Header className='flex flex-col items-stretch space-y-0 border-b p-0 sm:flex-row'>\n                <div className='flex flex-1 flex-col justify-center gap-1 px-6 py-5 sm:py-6'>\n                    <Card.Title>Bar Chart - Interactive</Card.Title>\n                    <Card.Description>\n                        Showing total visitors for the last 3 months\n                    </Card.Description>\n                </div>\n                <div className='flex'>\n                    {['desktop', 'mobile'].map((key) => {\n                        const chart = key as keyof typeof chartConfig\n                        return (\n                            <button\n                                key={chart}\n                                data-active={activeChart === chart}\n                                className='relative z-30 flex flex-1 flex-col justify-center gap-1 border-t px-6 py-4 text-left even:border-l data-[active=true]:bg-muted/50 sm:border-l sm:border-t-0 sm:px-8 sm:py-6'\n                                onClick={() => setActiveChart(chart)}\n                            >\n                                <span className='text-xs text-muted-foreground'>\n                                    {chartConfig[chart].label}\n                                </span>\n                                <span className='text-lg font-bold leading-none sm:text-3xl'>\n                                    {total[key as keyof typeof total].toLocaleString()}\n                                </span>\n                            </button>\n                        )\n                    })}\n                </div>\n            </Card.Header>\n            <Card.Content className='px-2 sm:p-6'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='aspect-auto h-[250px] w-full'\n                >\n                    <BarChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            minTickGap={32}\n                            tickFormatter={(value) => {\n                                const date = new Date(value)\n                                return date.toLocaleDateString('en-US', {\n                                    month: 'short',\n                                    day: 'numeric'\n                                })\n                            }}\n                        />\n                        <ChartTooltip\n                            content={\n                                <ChartTooltipContent\n                                    className='w-[150px]'\n                                    nameKey='views'\n                                    labelFormatter={(value) => {\n                                        return new Date(value).toLocaleDateString(\n                                            'en-US',\n                                            {\n                                                month: 'short',\n                                                day: 'numeric',\n                                                year: 'numeric'\n                                            }\n                                        )\n                                    }}\n                                />\n                            }\n                        />\n                        <Bar dataKey={activeChart} fill={`var(--color-${activeChart})`} />\n                    </BarChart>\n                </ChartContainer>\n            </Card.Content>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/radar-chart-multiple-demo": {
    "component": "@/components/docs/charts/radar-chart-multiple-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186, mobile: 80 },\n    { month: 'February', desktop: 305, mobile: 200 },\n    { month: 'March', desktop: 237, mobile: 120 },\n    { month: 'April', desktop: 73, mobile: 190 },\n    { month: 'May', desktop: 209, mobile: 130 },\n    { month: 'June', desktop: 214, mobile: 140 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    },\n    mobile: {\n        label: 'Mobile',\n        color: 'hsl(var(--chart-2))'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartMultipleDemo() {\n    return (\n        <Card>\n            <Card.Header className='items-center pb-4'>\n                <Card.Title>Radar Chart - Multiple</Card.Title>\n                <Card.Description>\n                    Showing total visitors for the last 6 months\n                </Card.Description>\n            </Card.Header>\n            <Card.Content className='pb-0'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[250px]'\n                >\n                    <RadarChart data={chartData}>\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent indicator='line' />}\n                        />\n                        <PolarAngleAxis dataKey='month' />\n                        <PolarGrid />\n                        <Radar\n                            dataKey='desktop'\n                            fill='var(--color-desktop)'\n                            fillOpacity={0.6}\n                        />\n                        <Radar dataKey='mobile' fill='var(--color-mobile)' />\n                    </RadarChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                    January - June 2024\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/radar-chart-legend-demo": {
    "component": "@/components/docs/charts/radar-chart-legend-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartLegend,\n    ChartLegendContent,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186, mobile: 80 },\n    { month: 'February', desktop: 305, mobile: 200 },\n    { month: 'March', desktop: 237, mobile: 120 },\n    { month: 'April', desktop: 73, mobile: 190 },\n    { month: 'May', desktop: 209, mobile: 130 },\n    { month: 'June', desktop: 214, mobile: 140 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    },\n    mobile: {\n        label: 'Mobile',\n        color: 'hsl(var(--chart-2))'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartLegendDemo() {\n    return (\n        <Card>\n            <Card.Header className='items-center pb-4'>\n                <Card.Title>Radar Chart - Legend</Card.Title>\n                <Card.Description>\n                    Showing total visitors for the last 6 months\n                </Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[250px]'\n                >\n                    <RadarChart\n                        data={chartData}\n                        margin={{\n                            top: -40,\n                            bottom: -10\n                        }}\n                    >\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent indicator='line' />}\n                        />\n                        <PolarAngleAxis dataKey='month' />\n                        <PolarGrid />\n                        <Radar\n                            dataKey='desktop'\n                            fill='var(--color-desktop)'\n                            fillOpacity={0.6}\n                        />\n                        <Radar dataKey='mobile' fill='var(--color-mobile)' />\n                        <ChartLegend className='mt-8' content={<ChartLegendContent />} />\n                    </RadarChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 pt-4 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                    January - June 2024\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/radar-chart-dots-demo": {
    "component": "@/components/docs/charts/radar-chart-dots-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186 },\n    { month: 'February', desktop: 305 },\n    { month: 'March', desktop: 237 },\n    { month: 'April', desktop: 273 },\n    { month: 'May', desktop: 209 },\n    { month: 'June', desktop: 214 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartDotsDemo() {\n    return (\n        <Card>\n            <Card.Header className='items-center'>\n                <Card.Title>Radar Chart - Dots</Card.Title>\n                <Card.Description>\n                    Showing total visitors for the last 6 months\n                </Card.Description>\n            </Card.Header>\n            <Card.Content className='pb-0'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[250px]'\n                >\n                    <RadarChart data={chartData}>\n                        <ChartTooltip cursor={false} content={<ChartTooltipContent />} />\n                        <PolarAngleAxis dataKey='month' />\n                        <PolarGrid />\n                        <Radar\n                            dataKey='desktop'\n                            fill='var(--color-desktop)'\n                            fillOpacity={0.6}\n                            dot={{\n                                r: 4,\n                                fillOpacity: 1\n                            }}\n                        />\n                    </RadarChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                    January - June 2024\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/radar-chart-grid-circle-demo": {
    "component": "@/components/docs/charts/radar-chart-grid-circle-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186 },\n    { month: 'February', desktop: 305 },\n    { month: 'March', desktop: 237 },\n    { month: 'April', desktop: 273 },\n    { month: 'May', desktop: 209 },\n    { month: 'June', desktop: 214 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartGridCircleDemo() {\n    return (\n        <Card>\n            <Card.Header className='items-center pb-4'>\n                <Card.Title>Radar Chart - Grid Circle</Card.Title>\n                <Card.Description>\n                    Showing total visitors for the last 6 months\n                </Card.Description>\n            </Card.Header>\n            <Card.Content className='pb-0'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[250px]'\n                >\n                    <RadarChart data={chartData}>\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent hideLabel />}\n                        />\n                        <PolarGrid gridType='circle' />\n                        <PolarAngleAxis dataKey='month' />\n                        <Radar\n                            dataKey='desktop'\n                            fill='var(--color-desktop)'\n                            fillOpacity={0.6}\n                            dot={{\n                                r: 4,\n                                fillOpacity: 1\n                            }}\n                        />\n                    </RadarChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                    January - June 2024\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/bar-chart-multiple-demo": {
    "component": "@/components/docs/charts/bar-chart-multiple-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { Bar, BarChart, CartesianGrid, XAxis } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186, mobile: 80 },\n    { month: 'February', desktop: 305, mobile: 200 },\n    { month: 'March', desktop: 237, mobile: 120 },\n    { month: 'April', desktop: 73, mobile: 190 },\n    { month: 'May', desktop: 209, mobile: 130 },\n    { month: 'June', desktop: 214, mobile: 140 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    },\n    mobile: {\n        label: 'Mobile',\n        color: 'hsl(var(--chart-2))'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartMultipleDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Bar Chart - Multiple</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <ChartContainer config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent indicator='dashed' />}\n                        />\n                        <Bar dataKey='desktop' fill='var(--color-desktop)' radius={4} />\n                        <Bar dataKey='mobile' fill='var(--color-mobile)' radius={4} />\n                    </BarChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col items-start gap-2 text-sm'>\n                <div className='flex gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/bar-chart-active-demo": {
    "component": "@/components/docs/charts/bar-chart-active-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { Bar, BarChart, CartesianGrid, Rectangle, XAxis } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { browser: 'chrome', visitors: 187, fill: 'var(--color-chrome)' },\n    { browser: 'safari', visitors: 200, fill: 'var(--color-safari)' },\n    { browser: 'firefox', visitors: 275, fill: 'var(--color-firefox)' },\n    { browser: 'edge', visitors: 173, fill: 'var(--color-edge)' },\n    { browser: 'other', visitors: 90, fill: 'var(--color-other)' }\n]\n\nconst chartConfig = {\n    visitors: {\n        label: 'Visitors'\n    },\n    chrome: {\n        label: 'Chrome',\n        color: 'hsl(var(--chart-1))'\n    },\n    safari: {\n        label: 'Safari',\n        color: 'hsl(var(--chart-2))'\n    },\n    firefox: {\n        label: 'Firefox',\n        color: 'hsl(var(--chart-3))'\n    },\n    edge: {\n        label: 'Edge',\n        color: 'hsl(var(--chart-4))'\n    },\n    other: {\n        label: 'Other',\n        color: 'hsl(var(--chart-5))'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartActiveDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Bar Chart - Active</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <ChartContainer config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='browser'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) =>\n                                chartConfig[value as keyof typeof chartConfig]?.label\n                            }\n                        />\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent hideLabel />}\n                        />\n                        <Bar\n                            dataKey='visitors'\n                            strokeWidth={2}\n                            radius={8}\n                            activeIndex={2}\n                            activeBar={({ ...props }) => {\n                                return (\n                                    <Rectangle\n                                        {...props}\n                                        fillOpacity={0.8}\n                                        stroke={props.payload.fill}\n                                        strokeDasharray={4}\n                                        strokeDashoffset={4}\n                                    />\n                                )\n                            }}\n                        />\n                    </BarChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col items-start gap-2 text-sm'>\n                <div className='flex gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/pie-chart-donut-with-text-demo": {
    "component": "@/components/docs/charts/pie-chart-donut-with-text-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { Label, Pie, PieChart } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { browser: 'chrome', visitors: 275, fill: 'var(--color-chrome)' },\n    { browser: 'safari', visitors: 200, fill: 'var(--color-safari)' },\n    { browser: 'firefox', visitors: 287, fill: 'var(--color-firefox)' },\n    { browser: 'edge', visitors: 173, fill: 'var(--color-edge)' },\n    { browser: 'other', visitors: 190, fill: 'var(--color-other)' }\n]\n\nconst chartConfig = {\n    visitors: {\n        label: 'Visitors'\n    },\n    chrome: {\n        label: 'Chrome',\n        color: 'hsl(var(--chart-1))'\n    },\n    safari: {\n        label: 'Safari',\n        color: 'hsl(var(--chart-2))'\n    },\n    firefox: {\n        label: 'Firefox',\n        color: 'hsl(var(--chart-3))'\n    },\n    edge: {\n        label: 'Edge',\n        color: 'hsl(var(--chart-4))'\n    },\n    other: {\n        label: 'Other',\n        color: 'hsl(var(--chart-5))'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartDonutWithTextDemo() {\n    const totalVisitors = React.useMemo(() => {\n        return chartData.reduce((acc, curr) => acc + curr.visitors, 0)\n    }, [])\n\n    return (\n        <Card className='flex flex-col'>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Pie Chart - Donut with Text</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[250px]'\n                >\n                    <PieChart>\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent hideLabel />}\n                        />\n                        <Pie\n                            data={chartData}\n                            dataKey='visitors'\n                            nameKey='browser'\n                            innerRadius={60}\n                            strokeWidth={5}\n                        >\n                            <Label\n                                content={({ viewBox }) => {\n                                    if (viewBox && 'cx' in viewBox && 'cy' in viewBox) {\n                                        return (\n                                            <text\n                                                x={viewBox.cx}\n                                                y={viewBox.cy}\n                                                textAnchor='middle'\n                                                dominantBaseline='middle'\n                                            >\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={viewBox.cy}\n                                                    className='fill-foreground text-3xl font-bold'\n                                                >\n                                                    {totalVisitors.toLocaleString()}\n                                                </tspan>\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) + 24}\n                                                    className='fill-muted-foreground'\n                                                >\n                                                    Visitors\n                                                </tspan>\n                                            </text>\n                                        )\n                                    }\n                                }}\n                            />\n                        </Pie>\n                    </PieChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/area-chart-gradient-demo": {
    "component": "@/components/docs/charts/area-chart-gradient-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186, mobile: 80 },\n    { month: 'February', desktop: 305, mobile: 200 },\n    { month: 'March', desktop: 237, mobile: 120 },\n    { month: 'April', desktop: 73, mobile: 190 },\n    { month: 'May', desktop: 209, mobile: 130 },\n    { month: 'June', desktop: 214, mobile: 140 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    },\n    mobile: {\n        label: 'Mobile',\n        color: 'hsl(var(--chart-2))'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartGradientDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Area Chart - Gradient</Card.Title>\n                <Card.Description>\n                    Showing total visitors for the last 6 months\n                </Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <ChartContainer config={chartConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <ChartTooltip cursor={false} content={<ChartTooltipContent />} />\n                        <defs>\n                            <linearGradient id='fillDesktop' x1='0' y1='0' x2='0' y2='1'>\n                                <stop\n                                    offset='5%'\n                                    stopColor='var(--color-desktop)'\n                                    stopOpacity={0.8}\n                                />\n                                <stop\n                                    offset='95%'\n                                    stopColor='var(--color-desktop)'\n                                    stopOpacity={0.1}\n                                />\n                            </linearGradient>\n                            <linearGradient id='fillMobile' x1='0' y1='0' x2='0' y2='1'>\n                                <stop\n                                    offset='5%'\n                                    stopColor='var(--color-mobile)'\n                                    stopOpacity={0.8}\n                                />\n                                <stop\n                                    offset='95%'\n                                    stopColor='var(--color-mobile)'\n                                    stopOpacity={0.1}\n                                />\n                            </linearGradient>\n                        </defs>\n                        <Area\n                            dataKey='mobile'\n                            type='natural'\n                            fill='url(#fillMobile)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-mobile)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='desktop'\n                            type='natural'\n                            fill='url(#fillDesktop)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-desktop)'\n                            stackId='a'\n                        />\n                    </AreaChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer>\n                <div className='flex w-full items-start gap-2 text-sm'>\n                    <div className='grid gap-2'>\n                        <div className='flex items-center gap-2 font-medium leading-none'>\n                            Trending up by 5.2% this month{' '}\n                            <IconTrendingUp className='h-4 w-4' />\n                        </div>\n                        <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                            January - June 2024\n                        </div>\n                    </div>\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/line-chart-dots-demo": {
    "component": "@/components/docs/charts/line-chart-dots-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186, mobile: 80 },\n    { month: 'February', desktop: 305, mobile: 200 },\n    { month: 'March', desktop: 237, mobile: 120 },\n    { month: 'April', desktop: 73, mobile: 190 },\n    { month: 'May', desktop: 209, mobile: 130 },\n    { month: 'June', desktop: 214, mobile: 140 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    },\n    mobile: {\n        label: 'Mobile',\n        color: 'hsl(var(--chart-2))'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartDotsDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Line Chart - Dots</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <ChartContainer config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent hideLabel />}\n                        />\n                        <Line\n                            dataKey='desktop'\n                            type='natural'\n                            stroke='var(--color-desktop)'\n                            strokeWidth={2}\n                            dot={{\n                                fill: 'var(--color-desktop)'\n                            }}\n                            activeDot={{\n                                r: 6\n                            }}\n                        />\n                    </LineChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col items-start gap-2 text-sm'>\n                <div className='flex gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/pie-chart-donut-demo": {
    "component": "@/components/docs/charts/pie-chart-donut-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { Pie, PieChart } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { browser: 'chrome', visitors: 275, fill: 'var(--color-chrome)' },\n    { browser: 'safari', visitors: 200, fill: 'var(--color-safari)' },\n    { browser: 'firefox', visitors: 187, fill: 'var(--color-firefox)' },\n    { browser: 'edge', visitors: 173, fill: 'var(--color-edge)' },\n    { browser: 'other', visitors: 90, fill: 'var(--color-other)' }\n]\n\nconst chartConfig = {\n    visitors: {\n        label: 'Visitors'\n    },\n    chrome: {\n        label: 'Chrome',\n        color: 'hsl(var(--chart-1))'\n    },\n    safari: {\n        label: 'Safari',\n        color: 'hsl(var(--chart-2))'\n    },\n    firefox: {\n        label: 'Firefox',\n        color: 'hsl(var(--chart-3))'\n    },\n    edge: {\n        label: 'Edge',\n        color: 'hsl(var(--chart-4))'\n    },\n    other: {\n        label: 'Other',\n        color: 'hsl(var(--chart-5))'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartDonutDemo() {\n    return (\n        <Card className='flex flex-col'>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Pie Chart - Donut</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[250px]'\n                >\n                    <PieChart>\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent hideLabel />}\n                        />\n                        <Pie\n                            data={chartData}\n                            dataKey='visitors'\n                            nameKey='browser'\n                            innerRadius={60}\n                        />\n                    </PieChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/radar-chart-simple-demo": {
    "component": "@/components/docs/charts/radar-chart-simple-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186 },\n    { month: 'February', desktop: 305 },\n    { month: 'March', desktop: 237 },\n    { month: 'April', desktop: 273 },\n    { month: 'May', desktop: 209 },\n    { month: 'June', desktop: 214 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartSimpleDemo() {\n    return (\n        <Card>\n            <Card.Header className='items-center pb-4'>\n                <Card.Title>Radar Chart</Card.Title>\n                <Card.Description>\n                    Showing total visitors for the last 6 months\n                </Card.Description>\n            </Card.Header>\n            <Card.Content className='pb-0'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[250px]'\n                >\n                    <RadarChart data={chartData}>\n                        <ChartTooltip cursor={false} content={<ChartTooltipContent />} />\n                        <PolarAngleAxis dataKey='month' />\n                        <PolarGrid />\n                        <Radar\n                            dataKey='desktop'\n                            fill='var(--color-desktop)'\n                            fillOpacity={0.6}\n                        />\n                    </RadarChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                    January - June 2024\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/area-chart-interactive-demo": {
    "component": "@/components/docs/charts/area-chart-interactive-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartLegend,\n    ChartLegendContent,\n    ChartTooltip,\n    ChartTooltipContent,\n    Select,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { date: '2024-04-01', desktop: 222, mobile: 150 },\n    { date: '2024-04-02', desktop: 97, mobile: 180 },\n    { date: '2024-04-03', desktop: 167, mobile: 120 },\n    { date: '2024-04-04', desktop: 242, mobile: 260 },\n    { date: '2024-04-05', desktop: 373, mobile: 290 },\n    { date: '2024-04-06', desktop: 301, mobile: 340 },\n    { date: '2024-04-07', desktop: 245, mobile: 180 },\n    { date: '2024-04-08', desktop: 409, mobile: 320 },\n    { date: '2024-04-09', desktop: 59, mobile: 110 },\n    { date: '2024-04-10', desktop: 261, mobile: 190 },\n    { date: '2024-04-11', desktop: 327, mobile: 350 },\n    { date: '2024-04-12', desktop: 292, mobile: 210 },\n    { date: '2024-04-13', desktop: 342, mobile: 380 },\n    { date: '2024-04-14', desktop: 137, mobile: 220 },\n    { date: '2024-04-15', desktop: 120, mobile: 170 },\n    { date: '2024-04-16', desktop: 138, mobile: 190 },\n    { date: '2024-04-17', desktop: 446, mobile: 360 },\n    { date: '2024-04-18', desktop: 364, mobile: 410 },\n    { date: '2024-04-19', desktop: 243, mobile: 180 },\n    { date: '2024-04-20', desktop: 89, mobile: 150 },\n    { date: '2024-04-21', desktop: 137, mobile: 200 },\n    { date: '2024-04-22', desktop: 224, mobile: 170 },\n    { date: '2024-04-23', desktop: 138, mobile: 230 },\n    { date: '2024-04-24', desktop: 387, mobile: 290 },\n    { date: '2024-04-25', desktop: 215, mobile: 250 },\n    { date: '2024-04-26', desktop: 75, mobile: 130 },\n    { date: '2024-04-27', desktop: 383, mobile: 420 },\n    { date: '2024-04-28', desktop: 122, mobile: 180 },\n    { date: '2024-04-29', desktop: 315, mobile: 240 },\n    { date: '2024-04-30', desktop: 454, mobile: 380 },\n    { date: '2024-05-01', desktop: 165, mobile: 220 },\n    { date: '2024-05-02', desktop: 293, mobile: 310 },\n    { date: '2024-05-03', desktop: 247, mobile: 190 },\n    { date: '2024-05-04', desktop: 385, mobile: 420 },\n    { date: '2024-05-05', desktop: 481, mobile: 390 },\n    { date: '2024-05-06', desktop: 498, mobile: 520 },\n    { date: '2024-05-07', desktop: 388, mobile: 300 },\n    { date: '2024-05-08', desktop: 149, mobile: 210 },\n    { date: '2024-05-09', desktop: 227, mobile: 180 },\n    { date: '2024-05-10', desktop: 293, mobile: 330 },\n    { date: '2024-05-11', desktop: 335, mobile: 270 },\n    { date: '2024-05-12', desktop: 197, mobile: 240 },\n    { date: '2024-05-13', desktop: 197, mobile: 160 },\n    { date: '2024-05-14', desktop: 448, mobile: 490 },\n    { date: '2024-05-15', desktop: 473, mobile: 380 },\n    { date: '2024-05-16', desktop: 338, mobile: 400 },\n    { date: '2024-05-17', desktop: 499, mobile: 420 },\n    { date: '2024-05-18', desktop: 315, mobile: 350 },\n    { date: '2024-05-19', desktop: 235, mobile: 180 },\n    { date: '2024-05-20', desktop: 177, mobile: 230 },\n    { date: '2024-05-21', desktop: 82, mobile: 140 },\n    { date: '2024-05-22', desktop: 81, mobile: 120 },\n    { date: '2024-05-23', desktop: 252, mobile: 290 },\n    { date: '2024-05-24', desktop: 294, mobile: 220 },\n    { date: '2024-05-25', desktop: 201, mobile: 250 },\n    { date: '2024-05-26', desktop: 213, mobile: 170 },\n    { date: '2024-05-27', desktop: 420, mobile: 460 },\n    { date: '2024-05-28', desktop: 233, mobile: 190 },\n    { date: '2024-05-29', desktop: 78, mobile: 130 },\n    { date: '2024-05-30', desktop: 340, mobile: 280 },\n    { date: '2024-05-31', desktop: 178, mobile: 230 },\n    { date: '2024-06-01', desktop: 178, mobile: 200 },\n    { date: '2024-06-02', desktop: 470, mobile: 410 },\n    { date: '2024-06-03', desktop: 103, mobile: 160 },\n    { date: '2024-06-04', desktop: 439, mobile: 380 },\n    { date: '2024-06-05', desktop: 88, mobile: 140 },\n    { date: '2024-06-06', desktop: 294, mobile: 250 },\n    { date: '2024-06-07', desktop: 323, mobile: 370 },\n    { date: '2024-06-08', desktop: 385, mobile: 320 },\n    { date: '2024-06-09', desktop: 438, mobile: 480 },\n    { date: '2024-06-10', desktop: 155, mobile: 200 },\n    { date: '2024-06-11', desktop: 92, mobile: 150 },\n    { date: '2024-06-12', desktop: 492, mobile: 420 },\n    { date: '2024-06-13', desktop: 81, mobile: 130 },\n    { date: '2024-06-14', desktop: 426, mobile: 380 },\n    { date: '2024-06-15', desktop: 307, mobile: 350 },\n    { date: '2024-06-16', desktop: 371, mobile: 310 },\n    { date: '2024-06-17', desktop: 475, mobile: 520 },\n    { date: '2024-06-18', desktop: 107, mobile: 170 },\n    { date: '2024-06-19', desktop: 341, mobile: 290 },\n    { date: '2024-06-20', desktop: 408, mobile: 450 },\n    { date: '2024-06-21', desktop: 169, mobile: 210 },\n    { date: '2024-06-22', desktop: 317, mobile: 270 },\n    { date: '2024-06-23', desktop: 480, mobile: 530 },\n    { date: '2024-06-24', desktop: 132, mobile: 180 },\n    { date: '2024-06-25', desktop: 141, mobile: 190 },\n    { date: '2024-06-26', desktop: 434, mobile: 380 },\n    { date: '2024-06-27', desktop: 448, mobile: 490 },\n    { date: '2024-06-28', desktop: 149, mobile: 200 },\n    { date: '2024-06-29', desktop: 103, mobile: 160 },\n    { date: '2024-06-30', desktop: 446, mobile: 400 }\n]\n\nconst chartConfig = {\n    visitors: {\n        label: 'Visitors'\n    },\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    },\n    mobile: {\n        label: 'Mobile',\n        color: 'hsl(var(--chart-2))'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartInteractiveDemo() {\n    const [timeRange, setTimeRange] = React.useState<'30d' | '7d' | '90d'>('90d')\n\n    const filteredData = chartData.filter((item) => {\n        const date = new Date(item.date)\n        const now = new Date()\n        let daysToSubtract = 90\n        if (timeRange === '30d') {\n            daysToSubtract = 30\n        } else if (timeRange === '7d') {\n            daysToSubtract = 7\n        }\n        now.setDate(now.getDate() - daysToSubtract)\n        return date >= now\n    })\n\n    return (\n        <Card>\n            <Card.Header className='flex items-center gap-2 space-y-0 border-b py-5 sm:flex-row'>\n                <div className='grid flex-1 gap-1 text-center sm:text-left'>\n                    <Card.Title>Area Chart - Interactive</Card.Title>\n                    <Card.Description>\n                        Showing total visitors for the last 3 months\n                    </Card.Description>\n                </div>\n                <Select\n                    className='w-[160px] rounded-lg sm:ml-auto'\n                    selectedKey={timeRange}\n                    onSelectionChange={(v) => setTimeRange(v as '30d' | '7d' | '90d')}\n                    aria-label='Select a value'\n                    placeholder='Last 3 months'\n                >\n                    <Select.Item id='90d' className='rounded-lg'>\n                        Last 3 months\n                    </Select.Item>\n                    <Select.Item id='30d' className='rounded-lg'>\n                        Last 30 days\n                    </Select.Item>\n                    <Select.Item id='7d' className='rounded-lg'>\n                        Last 7 days\n                    </Select.Item>\n                </Select>\n            </Card.Header>\n            <Card.Content className='px-2 pt-4 sm:px-6 sm:pt-6'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='aspect-auto h-[250px] w-full'\n                >\n                    <AreaChart data={filteredData}>\n                        <defs>\n                            <linearGradient id='fillDesktop' x1='0' y1='0' x2='0' y2='1'>\n                                <stop\n                                    offset='5%'\n                                    stopColor='var(--color-desktop)'\n                                    stopOpacity={0.8}\n                                />\n                                <stop\n                                    offset='95%'\n                                    stopColor='var(--color-desktop)'\n                                    stopOpacity={0.1}\n                                />\n                            </linearGradient>\n                            <linearGradient id='fillMobile' x1='0' y1='0' x2='0' y2='1'>\n                                <stop\n                                    offset='5%'\n                                    stopColor='var(--color-mobile)'\n                                    stopOpacity={0.8}\n                                />\n                                <stop\n                                    offset='95%'\n                                    stopColor='var(--color-mobile)'\n                                    stopOpacity={0.1}\n                                />\n                            </linearGradient>\n                        </defs>\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            minTickGap={32}\n                            tickFormatter={(value) => {\n                                const date = new Date(value)\n                                return date.toLocaleDateString('en-US', {\n                                    month: 'short',\n                                    day: 'numeric'\n                                })\n                            }}\n                        />\n                        <ChartTooltip\n                            cursor={false}\n                            content={\n                                <ChartTooltipContent\n                                    labelFormatter={(value) => {\n                                        return new Date(value).toLocaleDateString(\n                                            'en-US',\n                                            {\n                                                month: 'short',\n                                                day: 'numeric'\n                                            }\n                                        )\n                                    }}\n                                    indicator='dot'\n                                />\n                            }\n                        />\n                        <Area\n                            dataKey='mobile'\n                            type='natural'\n                            fill='url(#fillMobile)'\n                            stroke='var(--color-mobile)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='desktop'\n                            type='natural'\n                            fill='url(#fillDesktop)'\n                            stroke='var(--color-desktop)'\n                            stackId='a'\n                        />\n                        <ChartLegend content={<ChartLegendContent />} />\n                    </AreaChart>\n                </ChartContainer>\n            </Card.Content>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/radar-chart-grid-custom-demo": {
    "component": "@/components/docs/charts/radar-chart-grid-custom-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186 },\n    { month: 'February', desktop: 305 },\n    { month: 'March', desktop: 237 },\n    { month: 'April', desktop: 273 },\n    { month: 'May', desktop: 209 },\n    { month: 'June', desktop: 214 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartGridCustomDemo() {\n    return (\n        <Card>\n            <Card.Header className='items-center pb-4'>\n                <Card.Title>Radar Chart - Grid Custom</Card.Title>\n                <Card.Description>\n                    Showing total visitors for the last 6 months\n                </Card.Description>\n            </Card.Header>\n            <Card.Content className='pb-0'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[250px]'\n                >\n                    <RadarChart data={chartData}>\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent hideLabel />}\n                        />\n                        <PolarGrid\n                            radialLines={false}\n                            polarRadius={[90]}\n                            strokeWidth={1}\n                        />\n                        <PolarAngleAxis dataKey='month' />\n                        <Radar\n                            dataKey='desktop'\n                            fill='var(--color-desktop)'\n                            fillOpacity={0.6}\n                        />\n                    </RadarChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                    January - June 2024\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/radar-chart-lines-only-demo": {
    "component": "@/components/docs/charts/radar-chart-lines-only-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186, mobile: 160 },\n    { month: 'February', desktop: 185, mobile: 170 },\n    { month: 'March', desktop: 207, mobile: 180 },\n    { month: 'April', desktop: 173, mobile: 160 },\n    { month: 'May', desktop: 160, mobile: 190 },\n    { month: 'June', desktop: 174, mobile: 204 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    },\n    mobile: {\n        label: 'Mobile',\n        color: 'hsl(var(--chart-2))'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartLinesOnlyDemo() {\n    return (\n        <Card>\n            <Card.Header className='items-center pb-4'>\n                <Card.Title>Radar Chart - Lines Only</Card.Title>\n                <Card.Description>\n                    Showing total visitors for the last 6 months\n                </Card.Description>\n            </Card.Header>\n            <Card.Content className='pb-0'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[250px]'\n                >\n                    <RadarChart data={chartData}>\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent indicator='line' />}\n                        />\n                        <PolarAngleAxis dataKey='month' />\n                        <PolarGrid radialLines={false} />\n                        <Radar\n                            dataKey='desktop'\n                            fill='var(--color-desktop)'\n                            fillOpacity={0}\n                            stroke='var(--color-desktop)'\n                            strokeWidth={2}\n                        />\n                        <Radar\n                            dataKey='mobile'\n                            fill='var(--color-mobile)'\n                            fillOpacity={0}\n                            stroke='var(--color-mobile)'\n                            strokeWidth={2}\n                        />\n                    </RadarChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                    January - June 2024\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/radar-chart-grid-filled-demo": {
    "component": "@/components/docs/charts/radar-chart-grid-filled-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186 },\n    { month: 'February', desktop: 285 },\n    { month: 'March', desktop: 237 },\n    { month: 'April', desktop: 203 },\n    { month: 'May', desktop: 209 },\n    { month: 'June', desktop: 264 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartGridFilledDemo() {\n    return (\n        <Card>\n            <Card.Header className='items-center pb-4'>\n                <Card.Title>Radar Chart - Grid Filled</Card.Title>\n                <Card.Description>\n                    Showing total visitors for the last 6 months\n                </Card.Description>\n            </Card.Header>\n            <Card.Content className='pb-0'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[250px]'\n                >\n                    <RadarChart data={chartData}>\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent hideLabel />}\n                        />\n                        <PolarGrid className='fill-[--color-desktop] opacity-20' />\n                        <PolarAngleAxis dataKey='month' />\n                        <Radar\n                            dataKey='desktop'\n                            fill='var(--color-desktop)'\n                            fillOpacity={0.5}\n                        />\n                    </RadarChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                    January - June 2024\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/radial-chart-text-demo": {
    "component": "@/components/docs/charts/radial-chart-text-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { Label, PolarGrid, PolarRadiusAxis, RadialBar, RadialBarChart } from 'recharts'\n\nimport { Card, ChartContainer, type ChartConfig } from '@/components/ui'\n\nconst chartData = [{ browser: 'safari', visitors: 200, fill: 'var(--color-safari)' }]\n\nconst chartConfig = {\n    visitors: {\n        label: 'Visitors'\n    },\n    safari: {\n        label: 'Safari',\n        color: 'hsl(var(--chart-2))'\n    }\n} satisfies ChartConfig\n\nexport default function RadialChartTextDemo() {\n    return (\n        <Card className='flex flex-col'>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Radial Chart - Text</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[250px]'\n                >\n                    <RadialBarChart\n                        data={chartData}\n                        startAngle={0}\n                        endAngle={250}\n                        innerRadius={80}\n                        outerRadius={110}\n                    >\n                        <PolarGrid\n                            gridType='circle'\n                            radialLines={false}\n                            stroke='none'\n                            className='first:fill-muted last:fill-background'\n                            polarRadius={[86, 74]}\n                        />\n                        <RadialBar dataKey='visitors' background cornerRadius={10} />\n                        <PolarRadiusAxis tick={false} tickLine={false} axisLine={false}>\n                            <Label\n                                content={({ viewBox }) => {\n                                    if (viewBox && 'cx' in viewBox && 'cy' in viewBox) {\n                                        return (\n                                            <text\n                                                x={viewBox.cx}\n                                                y={viewBox.cy}\n                                                textAnchor='middle'\n                                                dominantBaseline='middle'\n                                            >\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={viewBox.cy}\n                                                    className='fill-foreground text-4xl font-bold'\n                                                >\n                                                    {chartData[0].visitors.toLocaleString()}\n                                                </tspan>\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) + 24}\n                                                    className='fill-muted-foreground'\n                                                >\n                                                    Visitors\n                                                </tspan>\n                                            </text>\n                                        )\n                                    }\n                                }}\n                            />\n                        </PolarRadiusAxis>\n                    </RadialBarChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/area-chart-stacked-expanded-demo": {
    "component": "@/components/docs/charts/area-chart-stacked-expanded-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186, mobile: 80, other: 45 },\n    { month: 'February', desktop: 305, mobile: 200, other: 100 },\n    { month: 'March', desktop: 237, mobile: 120, other: 150 },\n    { month: 'April', desktop: 73, mobile: 190, other: 50 },\n    { month: 'May', desktop: 209, mobile: 130, other: 100 },\n    { month: 'June', desktop: 214, mobile: 140, other: 160 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    },\n    mobile: {\n        label: 'Mobile',\n        color: 'hsl(var(--chart-2))'\n    },\n    other: {\n        label: 'Other',\n        color: 'hsl(var(--chart-3))'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartStackedExpandedDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Area Chart - Stacked Expanded</Card.Title>\n                <Card.Description>\n                    Showing total visitors for the last 6months\n                </Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <ChartContainer config={chartConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12,\n                            top: 12\n                        }}\n                        stackOffset='expand'\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent indicator='line' />}\n                        />\n                        <Area\n                            dataKey='other'\n                            type='natural'\n                            fill='var(--color-other)'\n                            fillOpacity={0.1}\n                            stroke='var(--color-other)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='mobile'\n                            type='natural'\n                            fill='var(--color-mobile)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-mobile)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='desktop'\n                            type='natural'\n                            fill='var(--color-desktop)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-desktop)'\n                            stackId='a'\n                        />\n                    </AreaChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer>\n                <div className='flex w-full items-start gap-2 text-sm'>\n                    <div className='grid gap-2'>\n                        <div className='flex items-center gap-2 font-medium leading-none'>\n                            Trending up by 5.2% this month{' '}\n                            <IconTrendingUp className='h-4 w-4' />\n                        </div>\n                        <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                            January - June 2024\n                        </div>\n                    </div>\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/radar-chart-custom-label-demo": {
    "component": "@/components/docs/charts/radar-chart-custom-label-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186, mobile: 80 },\n    { month: 'February', desktop: 305, mobile: 200 },\n    { month: 'March', desktop: 237, mobile: 120 },\n    { month: 'April', desktop: 73, mobile: 190 },\n    { month: 'May', desktop: 209, mobile: 130 },\n    { month: 'June', desktop: 214, mobile: 140 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    },\n    mobile: {\n        label: 'Mobile',\n        color: 'hsl(var(--chart-2))'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartCustomLabelDemo() {\n    return (\n        <Card>\n            <Card.Header className='items-center pb-4'>\n                <Card.Title>Radar Chart - Custom Label</Card.Title>\n                <Card.Description>\n                    Showing total visitors for the last 6 months\n                </Card.Description>\n            </Card.Header>\n            <Card.Content className='pb-0'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[250px]'\n                >\n                    <RadarChart\n                        data={chartData}\n                        margin={{\n                            top: 10,\n                            right: 10,\n                            bottom: 10,\n                            left: 10\n                        }}\n                    >\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent indicator='line' />}\n                        />\n                        <PolarAngleAxis\n                            dataKey='month'\n                            tick={({ x, y, textAnchor, value, index, ...props }) => {\n                                const data = chartData[index]\n\n                                return (\n                                    <text\n                                        x={x}\n                                        y={index === 0 ? y - 10 : y}\n                                        textAnchor={textAnchor}\n                                        fontSize={13}\n                                        fontWeight={500}\n                                        {...props}\n                                    >\n                                        <tspan>{data.desktop}</tspan>\n                                        <tspan className='fill-muted-foreground'>/</tspan>\n                                        <tspan>{data.mobile}</tspan>\n                                        <tspan\n                                            x={x}\n                                            dy={'1rem'}\n                                            fontSize={12}\n                                            className='fill-muted-foreground'\n                                        >\n                                            {data.month}\n                                        </tspan>\n                                    </text>\n                                )\n                            }}\n                        />\n\n                        <PolarGrid />\n                        <Radar\n                            dataKey='desktop'\n                            fill='var(--color-desktop)'\n                            fillOpacity={0.6}\n                        />\n                        <Radar dataKey='mobile' fill='var(--color-mobile)' />\n                    </RadarChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                    January - June 2024\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/line-chart-interactive-demo": {
    "component": "@/components/docs/charts/line-chart-interactive-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { date: '2024-04-01', desktop: 222, mobile: 150 },\n    { date: '2024-04-02', desktop: 97, mobile: 180 },\n    { date: '2024-04-03', desktop: 167, mobile: 120 },\n    { date: '2024-04-04', desktop: 242, mobile: 260 },\n    { date: '2024-04-05', desktop: 373, mobile: 290 },\n    { date: '2024-04-06', desktop: 301, mobile: 340 },\n    { date: '2024-04-07', desktop: 245, mobile: 180 },\n    { date: '2024-04-08', desktop: 409, mobile: 320 },\n    { date: '2024-04-09', desktop: 59, mobile: 110 },\n    { date: '2024-04-10', desktop: 261, mobile: 190 },\n    { date: '2024-04-11', desktop: 327, mobile: 350 },\n    { date: '2024-04-12', desktop: 292, mobile: 210 },\n    { date: '2024-04-13', desktop: 342, mobile: 380 },\n    { date: '2024-04-14', desktop: 137, mobile: 220 },\n    { date: '2024-04-15', desktop: 120, mobile: 170 },\n    { date: '2024-04-16', desktop: 138, mobile: 190 },\n    { date: '2024-04-17', desktop: 446, mobile: 360 },\n    { date: '2024-04-18', desktop: 364, mobile: 410 },\n    { date: '2024-04-19', desktop: 243, mobile: 180 },\n    { date: '2024-04-20', desktop: 89, mobile: 150 },\n    { date: '2024-04-21', desktop: 137, mobile: 200 },\n    { date: '2024-04-22', desktop: 224, mobile: 170 },\n    { date: '2024-04-23', desktop: 138, mobile: 230 },\n    { date: '2024-04-24', desktop: 387, mobile: 290 },\n    { date: '2024-04-25', desktop: 215, mobile: 250 },\n    { date: '2024-04-26', desktop: 75, mobile: 130 },\n    { date: '2024-04-27', desktop: 383, mobile: 420 },\n    { date: '2024-04-28', desktop: 122, mobile: 180 },\n    { date: '2024-04-29', desktop: 315, mobile: 240 },\n    { date: '2024-04-30', desktop: 454, mobile: 380 },\n    { date: '2024-05-01', desktop: 165, mobile: 220 },\n    { date: '2024-05-02', desktop: 293, mobile: 310 },\n    { date: '2024-05-03', desktop: 247, mobile: 190 },\n    { date: '2024-05-04', desktop: 385, mobile: 420 },\n    { date: '2024-05-05', desktop: 481, mobile: 390 },\n    { date: '2024-05-06', desktop: 498, mobile: 520 },\n    { date: '2024-05-07', desktop: 388, mobile: 300 },\n    { date: '2024-05-08', desktop: 149, mobile: 210 },\n    { date: '2024-05-09', desktop: 227, mobile: 180 },\n    { date: '2024-05-10', desktop: 293, mobile: 330 },\n    { date: '2024-05-11', desktop: 335, mobile: 270 },\n    { date: '2024-05-12', desktop: 197, mobile: 240 },\n    { date: '2024-05-13', desktop: 197, mobile: 160 },\n    { date: '2024-05-14', desktop: 448, mobile: 490 },\n    { date: '2024-05-15', desktop: 473, mobile: 380 },\n    { date: '2024-05-16', desktop: 338, mobile: 400 },\n    { date: '2024-05-17', desktop: 499, mobile: 420 },\n    { date: '2024-05-18', desktop: 315, mobile: 350 },\n    { date: '2024-05-19', desktop: 235, mobile: 180 },\n    { date: '2024-05-20', desktop: 177, mobile: 230 },\n    { date: '2024-05-21', desktop: 82, mobile: 140 },\n    { date: '2024-05-22', desktop: 81, mobile: 120 },\n    { date: '2024-05-23', desktop: 252, mobile: 290 },\n    { date: '2024-05-24', desktop: 294, mobile: 220 },\n    { date: '2024-05-25', desktop: 201, mobile: 250 },\n    { date: '2024-05-26', desktop: 213, mobile: 170 },\n    { date: '2024-05-27', desktop: 420, mobile: 460 },\n    { date: '2024-05-28', desktop: 233, mobile: 190 },\n    { date: '2024-05-29', desktop: 78, mobile: 130 },\n    { date: '2024-05-30', desktop: 340, mobile: 280 },\n    { date: '2024-05-31', desktop: 178, mobile: 230 },\n    { date: '2024-06-01', desktop: 178, mobile: 200 },\n    { date: '2024-06-02', desktop: 470, mobile: 410 },\n    { date: '2024-06-03', desktop: 103, mobile: 160 },\n    { date: '2024-06-04', desktop: 439, mobile: 380 },\n    { date: '2024-06-05', desktop: 88, mobile: 140 },\n    { date: '2024-06-06', desktop: 294, mobile: 250 },\n    { date: '2024-06-07', desktop: 323, mobile: 370 },\n    { date: '2024-06-08', desktop: 385, mobile: 320 },\n    { date: '2024-06-09', desktop: 438, mobile: 480 },\n    { date: '2024-06-10', desktop: 155, mobile: 200 },\n    { date: '2024-06-11', desktop: 92, mobile: 150 },\n    { date: '2024-06-12', desktop: 492, mobile: 420 },\n    { date: '2024-06-13', desktop: 81, mobile: 130 },\n    { date: '2024-06-14', desktop: 426, mobile: 380 },\n    { date: '2024-06-15', desktop: 307, mobile: 350 },\n    { date: '2024-06-16', desktop: 371, mobile: 310 },\n    { date: '2024-06-17', desktop: 475, mobile: 520 },\n    { date: '2024-06-18', desktop: 107, mobile: 170 },\n    { date: '2024-06-19', desktop: 341, mobile: 290 },\n    { date: '2024-06-20', desktop: 408, mobile: 450 },\n    { date: '2024-06-21', desktop: 169, mobile: 210 },\n    { date: '2024-06-22', desktop: 317, mobile: 270 },\n    { date: '2024-06-23', desktop: 480, mobile: 530 },\n    { date: '2024-06-24', desktop: 132, mobile: 180 },\n    { date: '2024-06-25', desktop: 141, mobile: 190 },\n    { date: '2024-06-26', desktop: 434, mobile: 380 },\n    { date: '2024-06-27', desktop: 448, mobile: 490 },\n    { date: '2024-06-28', desktop: 149, mobile: 200 },\n    { date: '2024-06-29', desktop: 103, mobile: 160 },\n    { date: '2024-06-30', desktop: 446, mobile: 400 }\n]\n\nconst chartConfig = {\n    views: {\n        label: 'Page Views'\n    },\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    },\n    mobile: {\n        label: 'Mobile',\n        color: 'hsl(var(--chart-2))'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartInteractiveDemo() {\n    const [activeChart, setActiveChart] =\n        React.useState<keyof typeof chartConfig>('desktop')\n\n    const total = React.useMemo(\n        () => ({\n            desktop: chartData.reduce((acc, curr) => acc + curr.desktop, 0),\n            mobile: chartData.reduce((acc, curr) => acc + curr.mobile, 0)\n        }),\n        []\n    )\n\n    return (\n        <Card>\n            <Card.Header className='flex flex-col items-stretch space-y-0 border-b p-0 sm:flex-row'>\n                <div className='flex flex-1 flex-col justify-center gap-1 px-6 py-5 sm:py-6'>\n                    <Card.Title>Line Chart - Interactive</Card.Title>\n                    <Card.Description>\n                        Showing total visitors for the last 3 months\n                    </Card.Description>\n                </div>\n                <div className='flex'>\n                    {['desktop', 'mobile'].map((key) => {\n                        const chart = key as keyof typeof chartConfig\n                        return (\n                            <button\n                                key={chart}\n                                data-active={activeChart === chart}\n                                className='flex flex-1 flex-col justify-center gap-1 border-t px-6 py-4 text-left even:border-l data-[active=true]:bg-muted/50 sm:border-l sm:border-t-0 sm:px-8 sm:py-6'\n                                onClick={() => setActiveChart(chart)}\n                            >\n                                <span className='text-xs text-muted-foreground'>\n                                    {chartConfig[chart].label}\n                                </span>\n                                <span className='text-lg font-bold leading-none sm:text-3xl'>\n                                    {total[key as keyof typeof total].toLocaleString()}\n                                </span>\n                            </button>\n                        )\n                    })}\n                </div>\n            </Card.Header>\n            <Card.Content className='px-2 sm:p-6'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='aspect-auto h-[250px] w-full'\n                >\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='date'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            minTickGap={32}\n                            tickFormatter={(value) => {\n                                const date = new Date(value)\n                                return date.toLocaleDateString('en-US', {\n                                    month: 'short',\n                                    day: 'numeric'\n                                })\n                            }}\n                        />\n                        <ChartTooltip\n                            content={\n                                <ChartTooltipContent\n                                    className='w-[150px]'\n                                    nameKey='views'\n                                    labelFormatter={(value) => {\n                                        return new Date(value).toLocaleDateString(\n                                            'en-US',\n                                            {\n                                                month: 'short',\n                                                day: 'numeric',\n                                                year: 'numeric'\n                                            }\n                                        )\n                                    }}\n                                />\n                            }\n                        />\n                        <Line\n                            dataKey={activeChart}\n                            type='monotone'\n                            stroke={`var(--color-${activeChart})`}\n                            strokeWidth={2}\n                            dot={false}\n                        />\n                    </LineChart>\n                </ChartContainer>\n            </Card.Content>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/line-chart-linear-demo": {
    "component": "@/components/docs/charts/line-chart-linear-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186 },\n    { month: 'February', desktop: 305 },\n    { month: 'March', desktop: 237 },\n    { month: 'April', desktop: 73 },\n    { month: 'May', desktop: 209 },\n    { month: 'June', desktop: 214 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartLinearDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Line Chart - Linear</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <ChartContainer config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent hideLabel />}\n                        />\n                        <Line\n                            dataKey='desktop'\n                            type='linear'\n                            stroke='var(--color-desktop)'\n                            strokeWidth={2}\n                            dot={false}\n                        />\n                    </LineChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col items-start gap-2 text-sm'>\n                <div className='flex gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/radar-chart-grid-circle-filled-demo": {
    "component": "@/components/docs/charts/radar-chart-grid-circle-filled-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186 },\n    { month: 'February', desktop: 285 },\n    { month: 'March', desktop: 237 },\n    { month: 'April', desktop: 203 },\n    { month: 'May', desktop: 209 },\n    { month: 'June', desktop: 264 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartGridCircleFilledDemo() {\n    return (\n        <Card>\n            <Card.Header className='items-center pb-4'>\n                <Card.Title>Radar Chart - Grid Circle Filled</Card.Title>\n                <Card.Description>\n                    Showing total visitors for the last 6 months\n                </Card.Description>\n            </Card.Header>\n            <Card.Content className='pb-0'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[250px]'\n                >\n                    <RadarChart data={chartData}>\n                        <ChartTooltip cursor={false} content={<ChartTooltipContent />} />\n                        <PolarGrid\n                            className='fill-[--color-desktop] opacity-20'\n                            gridType='circle'\n                        />\n                        <PolarAngleAxis dataKey='month' />\n                        <Radar\n                            dataKey='desktop'\n                            fill='var(--color-desktop)'\n                            fillOpacity={0.5}\n                        />\n                    </RadarChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                    January - June 2024\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/bar-chart-label-demo": {
    "component": "@/components/docs/charts/bar-chart-label-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { Bar, BarChart, CartesianGrid, LabelList, XAxis } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186 },\n    { month: 'February', desktop: 305 },\n    { month: 'March', desktop: 237 },\n    { month: 'April', desktop: 73 },\n    { month: 'May', desktop: 209 },\n    { month: 'June', desktop: 214 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartLabelDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Bar Chart - Label</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <ChartContainer config={chartConfig}>\n                    <BarChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            top: 20\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent hideLabel />}\n                        />\n                        <Bar dataKey='desktop' fill='var(--color-desktop)' radius={8}>\n                            <LabelList\n                                position='top'\n                                offset={12}\n                                className='fill-foreground'\n                                fontSize={12}\n                            />\n                        </Bar>\n                    </BarChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col items-start gap-2 text-sm'>\n                <div className='flex gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/area-chart-legend-demo": {
    "component": "@/components/docs/charts/area-chart-legend-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartLegend,\n    ChartLegendContent,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186, mobile: 80 },\n    { month: 'February', desktop: 305, mobile: 200 },\n    { month: 'March', desktop: 237, mobile: 120 },\n    { month: 'April', desktop: 73, mobile: 190 },\n    { month: 'May', desktop: 209, mobile: 130 },\n    { month: 'June', desktop: 214, mobile: 140 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    },\n    mobile: {\n        label: 'Mobile',\n        color: 'hsl(var(--chart-2))'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartLegendDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Area Chart - Legend</Card.Title>\n                <Card.Description>\n                    Showing total visitors for the last 6 months\n                </Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <ChartContainer config={chartConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent indicator='line' />}\n                        />\n                        <Area\n                            dataKey='mobile'\n                            type='natural'\n                            fill='var(--color-mobile)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-mobile)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='desktop'\n                            type='natural'\n                            fill='var(--color-desktop)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-desktop)'\n                            stackId='a'\n                        />\n                        <ChartLegend content={<ChartLegendContent />} />\n                    </AreaChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer>\n                <div className='flex w-full items-start gap-2 text-sm'>\n                    <div className='grid gap-2'>\n                        <div className='flex items-center gap-2 font-medium leading-none'>\n                            Trending up by 5.2% this month{' '}\n                            <IconTrendingUp className='h-4 w-4' />\n                        </div>\n                        <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                            January - June 2024\n                        </div>\n                    </div>\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/radar-chart-radius-axis-demo": {
    "component": "@/components/docs/charts/radar-chart-radius-axis-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { PolarGrid, PolarRadiusAxis, Radar, RadarChart } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186, mobile: 80 },\n    { month: 'February', desktop: 305, mobile: 200 },\n    { month: 'March', desktop: 237, mobile: 120 },\n    { month: 'April', desktop: 73, mobile: 190 },\n    { month: 'May', desktop: 209, mobile: 130 },\n    { month: 'June', desktop: 214, mobile: 140 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    },\n    mobile: {\n        label: 'Mobile',\n        color: 'hsl(var(--chart-2))'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartRadiusAxis() {\n    return (\n        <Card>\n            <Card.Header className='items-center pb-4'>\n                <Card.Title>Radar Chart - Radius Axis</Card.Title>\n                <Card.Description>\n                    Showing total visitors for the last 6 months\n                </Card.Description>\n            </Card.Header>\n            <Card.Content className='pb-0'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[250px]'\n                >\n                    <RadarChart data={chartData}>\n                        <ChartTooltip\n                            cursor={false}\n                            content={\n                                <ChartTooltipContent indicator='line' labelKey='month' />\n                            }\n                        />\n                        <PolarGrid />\n                        <Radar\n                            dataKey='desktop'\n                            fill='var(--color-desktop)'\n                            fillOpacity={0.6}\n                        />\n                        <Radar dataKey='mobile' fill='var(--color-mobile)' />\n                        <PolarRadiusAxis\n                            angle={60}\n                            stroke='hsla(var(--foreground))'\n                            orientation='middle'\n                            axisLine={false}\n                        />\n                    </RadarChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                    January - June 2024\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/pie-chart-label-list-demo": {
    "component": "@/components/docs/charts/pie-chart-label-list-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { LabelList, Pie, PieChart } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { browser: 'chrome', visitors: 275, fill: 'var(--color-chrome)' },\n    { browser: 'safari', visitors: 200, fill: 'var(--color-safari)' },\n    { browser: 'firefox', visitors: 187, fill: 'var(--color-firefox)' },\n    { browser: 'edge', visitors: 173, fill: 'var(--color-edge)' },\n    { browser: 'other', visitors: 90, fill: 'var(--color-other)' }\n]\n\nconst chartConfig = {\n    visitors: {\n        label: 'Visitors'\n    },\n    chrome: {\n        label: 'Chrome',\n        color: 'hsl(var(--chart-1))'\n    },\n    safari: {\n        label: 'Safari',\n        color: 'hsl(var(--chart-2))'\n    },\n    firefox: {\n        label: 'Firefox',\n        color: 'hsl(var(--chart-3))'\n    },\n    edge: {\n        label: 'Edge',\n        color: 'hsl(var(--chart-4))'\n    },\n    other: {\n        label: 'Other',\n        color: 'hsl(var(--chart-5))'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartLabelListDemo() {\n    return (\n        <Card className='flex flex-col'>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Pie Chart - Label List</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[250px]'\n                >\n                    <PieChart>\n                        <ChartTooltip\n                            content={<ChartTooltipContent nameKey='visitors' hideLabel />}\n                        />\n                        <Pie data={chartData} dataKey='visitors'>\n                            <LabelList\n                                dataKey='browser'\n                                className='fill-background'\n                                stroke='none'\n                                fontSize={12}\n                                formatter={(value: keyof typeof chartConfig) =>\n                                    chartConfig[value]?.label\n                                }\n                            />\n                        </Pie>\n                    </PieChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/line-chart-label-demo": {
    "component": "@/components/docs/charts/line-chart-label-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { CartesianGrid, LabelList, Line, LineChart, XAxis } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186, mobile: 80 },\n    { month: 'February', desktop: 305, mobile: 200 },\n    { month: 'March', desktop: 237, mobile: 120 },\n    { month: 'April', desktop: 73, mobile: 190 },\n    { month: 'May', desktop: 209, mobile: 130 },\n    { month: 'June', desktop: 214, mobile: 140 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    },\n    mobile: {\n        label: 'Mobile',\n        color: 'hsl(var(--chart-2))'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartLabelDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Line Chart - Label</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <ChartContainer config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            top: 20,\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent indicator='line' />}\n                        />\n                        <Line\n                            dataKey='desktop'\n                            type='natural'\n                            stroke='var(--color-desktop)'\n                            strokeWidth={2}\n                            dot={{\n                                fill: 'var(--color-desktop)'\n                            }}\n                            activeDot={{\n                                r: 6\n                            }}\n                        >\n                            <LabelList\n                                position='top'\n                                offset={12}\n                                className='fill-foreground'\n                                fontSize={12}\n                            />\n                        </Line>\n                    </LineChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col items-start gap-2 text-sm'>\n                <div className='flex gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/pie-chart-simple-demo": {
    "component": "@/components/docs/charts/pie-chart-simple-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { Pie, PieChart } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { browser: 'chrome', visitors: 275, fill: 'var(--color-chrome)' },\n    { browser: 'safari', visitors: 200, fill: 'var(--color-safari)' },\n    { browser: 'firefox', visitors: 187, fill: 'var(--color-firefox)' },\n    { browser: 'edge', visitors: 173, fill: 'var(--color-edge)' },\n    { browser: 'other', visitors: 90, fill: 'var(--color-other)' }\n]\n\nconst chartConfig = {\n    visitors: {\n        label: 'Visitors'\n    },\n    chrome: {\n        label: 'Chrome',\n        color: 'hsl(var(--chart-1))'\n    },\n    safari: {\n        label: 'Safari',\n        color: 'hsl(var(--chart-2))'\n    },\n    firefox: {\n        label: 'Firefox',\n        color: 'hsl(var(--chart-3))'\n    },\n    edge: {\n        label: 'Edge',\n        color: 'hsl(var(--chart-4))'\n    },\n    other: {\n        label: 'Other',\n        color: 'hsl(var(--chart-5))'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartSimpleDemo() {\n    return (\n        <Card className='flex flex-col'>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Pie Chart</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[250px]'\n                >\n                    <PieChart>\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent hideLabel />}\n                        />\n                        <Pie data={chartData} dataKey='visitors' nameKey='browser' />\n                    </PieChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/bar-chart-custom-label-demo": {
    "component": "@/components/docs/charts/bar-chart-custom-label-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { Bar, BarChart, CartesianGrid, LabelList, XAxis, YAxis } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186, mobile: 80 },\n    { month: 'February', desktop: 305, mobile: 200 },\n    { month: 'March', desktop: 237, mobile: 120 },\n    { month: 'April', desktop: 73, mobile: 190 },\n    { month: 'May', desktop: 209, mobile: 130 },\n    { month: 'June', desktop: 214, mobile: 140 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    },\n    mobile: {\n        label: 'Mobile',\n        color: 'hsl(var(--chart-2))'\n    },\n    label: {\n        color: 'hsl(var(--background))'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartCustomLabelDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Bar Chart - Custom Label</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <ChartContainer config={chartConfig}>\n                    <BarChart\n                        accessibilityLayer\n                        data={chartData}\n                        layout='vertical'\n                        margin={{\n                            right: 16\n                        }}\n                    >\n                        <CartesianGrid horizontal={false} />\n                        <YAxis\n                            dataKey='month'\n                            type='category'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                            hide\n                        />\n                        <XAxis dataKey='desktop' type='number' hide />\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent indicator='line' />}\n                        />\n                        <Bar\n                            dataKey='desktop'\n                            layout='vertical'\n                            fill='var(--color-desktop)'\n                            radius={4}\n                        >\n                            <LabelList\n                                dataKey='month'\n                                position='insideLeft'\n                                offset={8}\n                                className='fill-[--color-label]'\n                                fontSize={12}\n                            />\n                            <LabelList\n                                dataKey='desktop'\n                                position='right'\n                                offset={8}\n                                className='fill-foreground'\n                                fontSize={12}\n                            />\n                        </Bar>\n                    </BarChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col items-start gap-2 text-sm'>\n                <div className='flex gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/bar-chart-mixed-demo": {
    "component": "@/components/docs/charts/bar-chart-mixed-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { Bar, BarChart, XAxis, YAxis } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { browser: 'chrome', visitors: 275, fill: 'var(--color-chrome)' },\n    { browser: 'safari', visitors: 200, fill: 'var(--color-safari)' },\n    { browser: 'firefox', visitors: 187, fill: 'var(--color-firefox)' },\n    { browser: 'edge', visitors: 173, fill: 'var(--color-edge)' },\n    { browser: 'other', visitors: 90, fill: 'var(--color-other)' }\n]\n\nconst chartConfig = {\n    visitors: {\n        label: 'Visitors'\n    },\n    chrome: {\n        label: 'Chrome',\n        color: 'hsl(var(--chart-1))'\n    },\n    safari: {\n        label: 'Safari',\n        color: 'hsl(var(--chart-2))'\n    },\n    firefox: {\n        label: 'Firefox',\n        color: 'hsl(var(--chart-3))'\n    },\n    edge: {\n        label: 'Edge',\n        color: 'hsl(var(--chart-4))'\n    },\n    other: {\n        label: 'Other',\n        color: 'hsl(var(--chart-5))'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartMixedDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Bar Chart - Mixed</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <ChartContainer config={chartConfig}>\n                    <BarChart\n                        accessibilityLayer\n                        data={chartData}\n                        layout='vertical'\n                        margin={{\n                            left: 0\n                        }}\n                    >\n                        <YAxis\n                            dataKey='browser'\n                            type='category'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) =>\n                                chartConfig[value as keyof typeof chartConfig]?.label\n                            }\n                        />\n                        <XAxis dataKey='visitors' type='number' hide />\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent hideLabel />}\n                        />\n                        <Bar dataKey='visitors' layout='vertical' radius={5} />\n                    </BarChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col items-start gap-2 text-sm'>\n                <div className='flex gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/bar-chart-horizontal-demo": {
    "component": "@/components/docs/charts/bar-chart-horizontal-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { Bar, BarChart, XAxis, YAxis } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186 },\n    { month: 'February', desktop: 305 },\n    { month: 'March', desktop: 237 },\n    { month: 'April', desktop: 73 },\n    { month: 'May', desktop: 209 },\n    { month: 'June', desktop: 214 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartHorizontalDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Bar Chart - Horizontal</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <ChartContainer config={chartConfig}>\n                    <BarChart\n                        accessibilityLayer\n                        data={chartData}\n                        layout='vertical'\n                        margin={{\n                            left: -20\n                        }}\n                    >\n                        <XAxis type='number' dataKey='desktop' hide />\n                        <YAxis\n                            dataKey='month'\n                            type='category'\n                            tickLine={false}\n                            tickMargin={10}\n                            axisLine={false}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent hideLabel />}\n                        />\n                        <Bar dataKey='desktop' fill='var(--color-desktop)' radius={5} />\n                    </BarChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col items-start gap-2 text-sm'>\n                <div className='flex gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/line-chart-step-demo": {
    "component": "@/components/docs/charts/line-chart-step-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186 },\n    { month: 'February', desktop: 305 },\n    { month: 'March', desktop: 237 },\n    { month: 'April', desktop: 73 },\n    { month: 'May', desktop: 209 },\n    { month: 'June', desktop: 214 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartStepDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Line Chart - Step</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <ChartContainer config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent hideLabel />}\n                        />\n                        <Line\n                            dataKey='desktop'\n                            type='step'\n                            stroke='var(--color-desktop)'\n                            strokeWidth={2}\n                            dot={false}\n                        />\n                    </LineChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col items-start gap-2 text-sm'>\n                <div className='flex gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/pie-chart-custom-label-demo": {
    "component": "@/components/docs/charts/pie-chart-custom-label-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { Pie, PieChart } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { browser: 'chrome', visitors: 275, fill: 'var(--color-chrome)' },\n    { browser: 'safari', visitors: 200, fill: 'var(--color-safari)' },\n    { browser: 'firefox', visitors: 187, fill: 'var(--color-firefox)' },\n    { browser: 'edge', visitors: 173, fill: 'var(--color-edge)' },\n    { browser: 'other', visitors: 90, fill: 'var(--color-other)' }\n]\n\nconst chartConfig = {\n    visitors: {\n        label: 'Visitors'\n    },\n    chrome: {\n        label: 'Chrome',\n        color: 'hsl(var(--chart-1))'\n    },\n    safari: {\n        label: 'Safari',\n        color: 'hsl(var(--chart-2))'\n    },\n    firefox: {\n        label: 'Firefox',\n        color: 'hsl(var(--chart-3))'\n    },\n    edge: {\n        label: 'Edge',\n        color: 'hsl(var(--chart-4))'\n    },\n    other: {\n        label: 'Other',\n        color: 'hsl(var(--chart-5))'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartCustomLabelDemo() {\n    return (\n        <Card className='flex flex-col'>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Pie Chart - Custom Label</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[250px]'\n                >\n                    <PieChart>\n                        <ChartTooltip\n                            content={<ChartTooltipContent nameKey='visitors' hideLabel />}\n                        />\n                        <Pie\n                            data={chartData}\n                            dataKey='visitors'\n                            labelLine={false}\n                            label={({ payload, ...props }) => {\n                                return (\n                                    <text\n                                        cx={props.cx}\n                                        cy={props.cy}\n                                        x={props.x}\n                                        y={props.y}\n                                        textAnchor={props.textAnchor}\n                                        dominantBaseline={props.dominantBaseline}\n                                        fill='hsla(var(--foreground))'\n                                    >\n                                        {`${\n                                            chartConfig[\n                                                payload.browser as keyof typeof chartConfig\n                                            ]?.label\n                                        } (${payload.visitors})`}\n                                    </text>\n                                )\n                            }}\n                            nameKey='browser'\n                        />\n                    </PieChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/pie-chart-stacked-demo": {
    "component": "@/components/docs/charts/pie-chart-stacked-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { Pie, PieChart } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst desktopData = [\n    { month: 'january', desktop: 186, fill: 'var(--color-january)' },\n    { month: 'february', desktop: 305, fill: 'var(--color-february)' },\n    { month: 'march', desktop: 237, fill: 'var(--color-march)' },\n    { month: 'april', desktop: 173, fill: 'var(--color-april)' },\n    { month: 'may', desktop: 209, fill: 'var(--color-may)' }\n]\n\nconst mobileData = [\n    { month: 'january', mobile: 80, fill: 'var(--color-january)' },\n    { month: 'february', mobile: 200, fill: 'var(--color-february)' },\n    { month: 'march', mobile: 120, fill: 'var(--color-march)' },\n    { month: 'april', mobile: 190, fill: 'var(--color-april)' },\n    { month: 'may', mobile: 130, fill: 'var(--color-may)' }\n]\n\nconst chartConfig = {\n    visitors: {\n        label: 'Visitors'\n    },\n    desktop: {\n        label: 'Desktop'\n    },\n    mobile: {\n        label: 'Mobile'\n    },\n    january: {\n        label: 'January',\n        color: 'hsl(var(--chart-1))'\n    },\n    february: {\n        label: 'February',\n        color: 'hsl(var(--chart-2))'\n    },\n    march: {\n        label: 'March',\n        color: 'hsl(var(--chart-3))'\n    },\n    april: {\n        label: 'April',\n        color: 'hsl(var(--chart-4))'\n    },\n    may: {\n        label: 'May',\n        color: 'hsl(var(--chart-5))'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartStackedDemo() {\n    return (\n        <Card className='flex flex-col'>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Pie Chart - Stacked</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[250px]'\n                >\n                    <PieChart>\n                        <ChartTooltip\n                            content={\n                                <ChartTooltipContent\n                                    labelKey='visitors'\n                                    nameKey='month'\n                                    indicator='line'\n                                    labelFormatter={(_, payload) => {\n                                        return chartConfig[\n                                            payload?.[0]\n                                                .dataKey as keyof typeof chartConfig\n                                        ].label\n                                    }}\n                                />\n                            }\n                        />\n                        <Pie data={desktopData} dataKey='desktop' outerRadius={60} />\n                        <Pie\n                            data={mobileData}\n                            dataKey='mobile'\n                            innerRadius={70}\n                            outerRadius={90}\n                        />\n                    </PieChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/pie-chart-label-demo": {
    "component": "@/components/docs/charts/pie-chart-label-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { Pie, PieChart } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { browser: 'chrome', visitors: 275, fill: 'var(--color-chrome)' },\n    { browser: 'safari', visitors: 200, fill: 'var(--color-safari)' },\n    { browser: 'firefox', visitors: 187, fill: 'var(--color-firefox)' },\n    { browser: 'edge', visitors: 173, fill: 'var(--color-edge)' },\n    { browser: 'other', visitors: 90, fill: 'var(--color-other)' }\n]\n\nconst chartConfig = {\n    visitors: {\n        label: 'Visitors'\n    },\n    chrome: {\n        label: 'Chrome',\n        color: 'hsl(var(--chart-1))'\n    },\n    safari: {\n        label: 'Safari',\n        color: 'hsl(var(--chart-2))'\n    },\n    firefox: {\n        label: 'Firefox',\n        color: 'hsl(var(--chart-3))'\n    },\n    edge: {\n        label: 'Edge',\n        color: 'hsl(var(--chart-4))'\n    },\n    other: {\n        label: 'Other',\n        color: 'hsl(var(--chart-5))'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartLabelDemo() {\n    return (\n        <Card className='flex flex-col'>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Pie Chart - Label</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[250px] pb-0 [&_.recharts-pie-label-text]:fill-foreground'\n                >\n                    <PieChart>\n                        <ChartTooltip content={<ChartTooltipContent hideLabel />} />\n                        <Pie\n                            data={chartData}\n                            dataKey='visitors'\n                            label\n                            nameKey='browser'\n                        />\n                    </PieChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/radial-chart-grid-demo": {
    "component": "@/components/docs/charts/radial-chart-grid-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { PolarGrid, RadialBar, RadialBarChart } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { browser: 'chrome', visitors: 275, fill: 'var(--color-chrome)' },\n    { browser: 'safari', visitors: 200, fill: 'var(--color-safari)' },\n    { browser: 'firefox', visitors: 187, fill: 'var(--color-firefox)' },\n    { browser: 'edge', visitors: 173, fill: 'var(--color-edge)' },\n    { browser: 'other', visitors: 90, fill: 'var(--color-other)' }\n]\n\nconst chartConfig = {\n    visitors: {\n        label: 'Visitors'\n    },\n    chrome: {\n        label: 'Chrome',\n        color: 'hsl(var(--chart-1))'\n    },\n    safari: {\n        label: 'Safari',\n        color: 'hsl(var(--chart-2))'\n    },\n    firefox: {\n        label: 'Firefox',\n        color: 'hsl(var(--chart-3))'\n    },\n    edge: {\n        label: 'Edge',\n        color: 'hsl(var(--chart-4))'\n    },\n    other: {\n        label: 'Other',\n        color: 'hsl(var(--chart-5))'\n    }\n} satisfies ChartConfig\n\nexport default function RadialChartGridDemo() {\n    return (\n        <Card className='flex flex-col'>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Radial Chart - Grid</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[250px]'\n                >\n                    <RadialBarChart data={chartData} innerRadius={30} outerRadius={100}>\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent hideLabel nameKey='browser' />}\n                        />\n                        <PolarGrid gridType='circle' />\n                        <RadialBar dataKey='visitors' />\n                    </RadialBarChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/pie-chart-interactive-demo": {
    "component": "@/components/docs/charts/pie-chart-interactive-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { Label, Pie, PieChart, Sector } from 'recharts'\nimport type { PieSectorDataItem } from 'recharts/types/polar/Pie'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartStyle,\n    ChartTooltip,\n    ChartTooltipContent,\n    Select,\n    type ChartConfig\n} from '@/components/ui'\n\nconst desktopData = [\n    { month: 'january', desktop: 186, fill: 'var(--color-january)' },\n    { month: 'february', desktop: 305, fill: 'var(--color-february)' },\n    { month: 'march', desktop: 237, fill: 'var(--color-march)' },\n    { month: 'april', desktop: 173, fill: 'var(--color-april)' },\n    { month: 'may', desktop: 209, fill: 'var(--color-may)' }\n]\n\nconst chartConfig = {\n    visitors: {\n        label: 'Visitors'\n    },\n    desktop: {\n        label: 'Desktop'\n    },\n    mobile: {\n        label: 'Mobile'\n    },\n    january: {\n        label: 'January',\n        color: 'hsl(var(--chart-1))'\n    },\n    february: {\n        label: 'February',\n        color: 'hsl(var(--chart-2))'\n    },\n    march: {\n        label: 'March',\n        color: 'hsl(var(--chart-3))'\n    },\n    april: {\n        label: 'April',\n        color: 'hsl(var(--chart-4))'\n    },\n    may: {\n        label: 'May',\n        color: 'hsl(var(--chart-5))'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartInteractiveDemo() {\n    const id = 'pie-interactive'\n    const [activeMonth, setActiveMonth] = React.useState<string>(desktopData[0].month)\n\n    const activeIndex = React.useMemo(\n        () => desktopData.findIndex((item) => item.month === activeMonth),\n        [activeMonth]\n    )\n    const months = React.useMemo(() => desktopData.map((item) => item.month), [])\n\n    return (\n        <Card data-chart={id} className='flex flex-col'>\n            <ChartStyle id={id} config={chartConfig} />\n            <Card.Header className='flex-row items-start space-y-0 pb-0'>\n                <div className='grid gap-1'>\n                    <Card.Title>Pie Chart - Interactive</Card.Title>\n                    <Card.Description>January - June 2024</Card.Description>\n                </div>\n                <Select\n                    placeholder='Select month'\n                    aria-label='Select a value'\n                    className='ml-auto h-7 w-[130px] rounded-lg pl-2.5'\n                    selectedKey={activeMonth}\n                    onSelectionChange={(key) => setActiveMonth(key as string)}\n                >\n                    {months.map((key) => {\n                        const config = chartConfig[key as keyof typeof chartConfig]\n\n                        if (!config) {\n                            return null\n                        }\n\n                        return (\n                            <Select.Item\n                                key={key}\n                                id={key}\n                                className='rounded-lg [&_span]:flex'\n                            >\n                                <div className='flex items-center gap-2 text-xs'>\n                                    <span\n                                        className='flex h-3 w-3 shrink-0 rounded-sm'\n                                        style={{\n                                            backgroundColor: `var(--color-${key})`\n                                        }}\n                                    />\n                                    {config?.label}\n                                </div>\n                            </Select.Item>\n                        )\n                    })}\n                </Select>\n            </Card.Header>\n            <Card.Content className='flex flex-1 justify-center pb-0'>\n                <ChartContainer\n                    id={id}\n                    config={chartConfig}\n                    className='mx-auto aspect-square w-full max-w-[300px]'\n                >\n                    <PieChart>\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent hideLabel />}\n                        />\n                        <Pie\n                            data={desktopData}\n                            dataKey='desktop'\n                            nameKey='month'\n                            innerRadius={60}\n                            strokeWidth={5}\n                            activeIndex={activeIndex}\n                            activeShape={({\n                                outerRadius = 0,\n                                ...props\n                            }: PieSectorDataItem) => (\n                                <g>\n                                    <Sector {...props} outerRadius={outerRadius + 10} />\n                                    <Sector\n                                        {...props}\n                                        outerRadius={outerRadius + 25}\n                                        innerRadius={outerRadius + 12}\n                                    />\n                                </g>\n                            )}\n                        >\n                            <Label\n                                content={({ viewBox }) => {\n                                    if (viewBox && 'cx' in viewBox && 'cy' in viewBox) {\n                                        return (\n                                            <text\n                                                x={viewBox.cx}\n                                                y={viewBox.cy}\n                                                textAnchor='middle'\n                                                dominantBaseline='middle'\n                                            >\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={viewBox.cy}\n                                                    className='fill-foreground text-3xl font-bold'\n                                                >\n                                                    {desktopData[\n                                                        activeIndex\n                                                    ].desktop.toLocaleString()}\n                                                </tspan>\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) + 24}\n                                                    className='fill-muted-foreground'\n                                                >\n                                                    Visitors\n                                                </tspan>\n                                            </text>\n                                        )\n                                    }\n                                }}\n                            />\n                        </Pie>\n                    </PieChart>\n                </ChartContainer>\n            </Card.Content>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/radar-chart-grid-circle-no-lines-demo": {
    "component": "@/components/docs/charts/radar-chart-grid-circle-no-lines-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186 },\n    { month: 'February', desktop: 305 },\n    { month: 'March', desktop: 237 },\n    { month: 'April', desktop: 203 },\n    { month: 'May', desktop: 209 },\n    { month: 'June', desktop: 214 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartNoLinesDemo() {\n    return (\n        <Card>\n            <Card.Header className='items-center pb-4'>\n                <Card.Title>Radar Chart - Grid Circle - No lines</Card.Title>\n                <Card.Description>\n                    Showing total visitors for the last 6 months\n                </Card.Description>\n            </Card.Header>\n            <Card.Content className='pb-0'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[250px]'\n                >\n                    <RadarChart data={chartData}>\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent hideLabel />}\n                        />\n                        <PolarGrid gridType='circle' radialLines={false} />\n                        <PolarAngleAxis dataKey='month' />\n                        <Radar\n                            dataKey='desktop'\n                            fill='var(--color-desktop)'\n                            fillOpacity={0.6}\n                            dot={{\n                                r: 4,\n                                fillOpacity: 1\n                            }}\n                        />\n                    </RadarChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                    January - June 2024\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/area-chart-stacked-demo": {
    "component": "@/components/docs/charts/area-chart-stacked-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186, mobile: 80 },\n    { month: 'February', desktop: 305, mobile: 200 },\n    { month: 'March', desktop: 237, mobile: 120 },\n    { month: 'April', desktop: 73, mobile: 190 },\n    { month: 'May', desktop: 209, mobile: 130 },\n    { month: 'June', desktop: 214, mobile: 140 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    },\n    mobile: {\n        label: 'Mobile',\n        color: 'hsl(var(--chart-2))'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartStackedDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Area Chart - Stacked</Card.Title>\n                <Card.Description>\n                    Showing total visitors for the last 6 months\n                </Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <ChartContainer config={chartConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent indicator='dot' />}\n                        />\n                        <Area\n                            dataKey='mobile'\n                            type='natural'\n                            fill='var(--color-mobile)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-mobile)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='desktop'\n                            type='natural'\n                            fill='var(--color-desktop)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-desktop)'\n                            stackId='a'\n                        />\n                    </AreaChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer>\n                <div className='flex w-full items-start gap-2 text-sm'>\n                    <div className='grid gap-2'>\n                        <div className='flex items-center gap-2 font-medium leading-none'>\n                            Trending up by 5.2% this month{' '}\n                            <IconTrendingUp className='h-4 w-4' />\n                        </div>\n                        <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                            January - June 2024\n                        </div>\n                    </div>\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/bar-chart-negative-demo": {
    "component": "@/components/docs/charts/bar-chart-negative-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { Bar, BarChart, CartesianGrid, Cell, LabelList } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', visitors: 186 },\n    { month: 'February', visitors: 205 },\n    { month: 'March', visitors: -207 },\n    { month: 'April', visitors: 173 },\n    { month: 'May', visitors: -209 },\n    { month: 'June', visitors: 214 }\n]\n\nconst chartConfig = {\n    visitors: {\n        label: 'Visitors'\n    }\n} satisfies ChartConfig\n\nexport default function BarChartNegativeDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Bar Chart - Negative</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <ChartContainer config={chartConfig}>\n                    <BarChart accessibilityLayer data={chartData}>\n                        <CartesianGrid vertical={false} />\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent hideLabel hideIndicator />}\n                        />\n                        <Bar dataKey='visitors'>\n                            <LabelList position='top' dataKey='month' fillOpacity={1} />\n                            {chartData.map((item) => (\n                                <Cell\n                                    key={item.month}\n                                    fill={\n                                        item.visitors > 0\n                                            ? 'hsl(var(--chart-1))'\n                                            : 'hsl(var(--chart-2))'\n                                    }\n                                />\n                            ))}\n                        </Bar>\n                    </BarChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col items-start gap-2 text-sm'>\n                <div className='flex gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/area-chart-demo": {
    "component": "@/components/docs/charts/area-chart-demo",
    "raw": "'use client'\n\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport {\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186, mobile: 80 },\n    { month: 'February', desktop: 305, mobile: 200 },\n    { month: 'March', desktop: 237, mobile: 120 },\n    { month: 'April', desktop: 73, mobile: 190 },\n    { month: 'May', desktop: 209, mobile: 130 },\n    { month: 'June', desktop: 214, mobile: 140 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--danger))'\n    },\n    mobile: {\n        label: 'Mobile',\n        color: 'hsl(var(--primary))'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartDemo() {\n    return (\n        <ChartContainer config={chartConfig}>\n            <AreaChart accessibilityLayer data={chartData}>\n                <CartesianGrid vertical={false} />\n                <XAxis\n                    dataKey='month'\n                    tickLine={false}\n                    axisLine={false}\n                    tickMargin={8}\n                    tickFormatter={(value) => value.slice(0, 3)}\n                />\n                <ChartTooltip\n                    cursor={false}\n                    content={<ChartTooltipContent indicator='dot' />}\n                />\n                <Area\n                    dataKey='mobile'\n                    type='natural'\n                    fill='var(--color-mobile)'\n                    fillOpacity={0.4}\n                    stroke='var(--color-mobile)'\n                    stackId='a'\n                />\n                <Area\n                    dataKey='desktop'\n                    type='natural'\n                    fill='var(--color-desktop)'\n                    fillOpacity={0.4}\n                    stroke='var(--color-desktop)'\n                    stackId='a'\n                />\n            </AreaChart>\n        </ChartContainer>\n    )\n}\n",
    "type": "docs"
  },
  "charts/radial-chart-stacked-demo": {
    "component": "@/components/docs/charts/radial-chart-stacked-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { Label, PolarRadiusAxis, RadialBar, RadialBarChart } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [{ month: 'january', desktop: 1260, mobile: 570 }]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    },\n    mobile: {\n        label: 'Mobile',\n        color: 'hsl(var(--chart-2))'\n    }\n} satisfies ChartConfig\n\nexport default function RadialChartStackedDemo() {\n    const totalVisitors = chartData[0].desktop + chartData[0].mobile\n\n    return (\n        <Card className='flex flex-col'>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Radial Chart - Stacked</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex flex-1 items-center pb-0'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square w-full max-w-[250px]'\n                >\n                    <RadialBarChart\n                        data={chartData}\n                        endAngle={180}\n                        innerRadius={80}\n                        outerRadius={130}\n                    >\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent hideLabel />}\n                        />\n                        <PolarRadiusAxis tick={false} tickLine={false} axisLine={false}>\n                            <Label\n                                content={({ viewBox }) => {\n                                    if (viewBox && 'cx' in viewBox && 'cy' in viewBox) {\n                                        return (\n                                            <text\n                                                x={viewBox.cx}\n                                                y={viewBox.cy}\n                                                textAnchor='middle'\n                                            >\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) - 16}\n                                                    className='fill-foreground text-2xl font-bold'\n                                                >\n                                                    {totalVisitors.toLocaleString()}\n                                                </tspan>\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) + 4}\n                                                    className='fill-muted-foreground'\n                                                >\n                                                    Visitors\n                                                </tspan>\n                                            </text>\n                                        )\n                                    }\n                                }}\n                            />\n                        </PolarRadiusAxis>\n                        <RadialBar\n                            dataKey='desktop'\n                            stackId='a'\n                            cornerRadius={5}\n                            fill='var(--color-desktop)'\n                            className='stroke-transparent stroke-2'\n                        />\n                        <RadialBar\n                            dataKey='mobile'\n                            fill='var(--color-mobile)'\n                            stackId='a'\n                            cornerRadius={5}\n                            className='stroke-transparent stroke-2'\n                        />\n                    </RadialBarChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/radial-chart-shape-demo": {
    "component": "@/components/docs/charts/radial-chart-shape-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { Label, PolarGrid, PolarRadiusAxis, RadialBar, RadialBarChart } from 'recharts'\n\nimport { Card, ChartContainer, type ChartConfig } from '@/components/ui'\n\nconst chartData = [{ browser: 'safari', visitors: 1260, fill: 'var(--color-safari)' }]\n\nconst chartConfig = {\n    visitors: {\n        label: 'Visitors'\n    },\n    safari: {\n        label: 'Safari',\n        color: 'hsl(var(--chart-2))'\n    }\n} satisfies ChartConfig\n\nexport default function RadialChartShapeDemo() {\n    return (\n        <Card className='flex flex-col'>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Radial Chart - Shape</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[250px]'\n                >\n                    <RadialBarChart\n                        data={chartData}\n                        endAngle={100}\n                        innerRadius={80}\n                        outerRadius={140}\n                    >\n                        <PolarGrid\n                            gridType='circle'\n                            radialLines={false}\n                            stroke='none'\n                            className='first:fill-muted last:fill-background'\n                            polarRadius={[86, 74]}\n                        />\n                        <RadialBar dataKey='visitors' background />\n                        <PolarRadiusAxis tick={false} tickLine={false} axisLine={false}>\n                            <Label\n                                content={({ viewBox }) => {\n                                    if (viewBox && 'cx' in viewBox && 'cy' in viewBox) {\n                                        return (\n                                            <text\n                                                x={viewBox.cx}\n                                                y={viewBox.cy}\n                                                textAnchor='middle'\n                                                dominantBaseline='middle'\n                                            >\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={viewBox.cy}\n                                                    className='fill-foreground text-4xl font-bold'\n                                                >\n                                                    {chartData[0].visitors.toLocaleString()}\n                                                </tspan>\n                                                <tspan\n                                                    x={viewBox.cx}\n                                                    y={(viewBox.cy || 0) + 24}\n                                                    className='fill-muted-foreground'\n                                                >\n                                                    Visitors\n                                                </tspan>\n                                            </text>\n                                        )\n                                    }\n                                }}\n                            />\n                        </PolarRadiusAxis>\n                    </RadialBarChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/area-chart-step-demo": {
    "component": "@/components/docs/charts/area-chart-step-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186 },\n    { month: 'February', desktop: 305 },\n    { month: 'March', desktop: 237 },\n    { month: 'April', desktop: 73 },\n    { month: 'May', desktop: 209 },\n    { month: 'June', desktop: 214 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))',\n        icon: IconTrendingUp\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartStepDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Area Chart - Step</Card.Title>\n                <Card.Description>\n                    Showing total visitors for the last 6 months\n                </Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <ChartContainer config={chartConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent hideLabel />}\n                        />\n                        <Area\n                            dataKey='desktop'\n                            type='step'\n                            fill='var(--color-desktop)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-desktop)'\n                        />\n                    </AreaChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer>\n                <div className='flex w-full items-start gap-2 text-sm'>\n                    <div className='grid gap-2'>\n                        <div className='flex items-center gap-2 font-medium leading-none'>\n                            Trending up by 5.2% this month{' '}\n                            <IconTrendingUp className='h-4 w-4' />\n                        </div>\n                        <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                            January - June 2024\n                        </div>\n                    </div>\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/radial-chart-simple-demo": {
    "component": "@/components/docs/charts/radial-chart-simple-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { RadialBar, RadialBarChart } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { browser: 'chrome', visitors: 275, fill: 'var(--color-chrome)' },\n    { browser: 'safari', visitors: 200, fill: 'var(--color-safari)' },\n    { browser: 'firefox', visitors: 187, fill: 'var(--color-firefox)' },\n    { browser: 'edge', visitors: 173, fill: 'var(--color-edge)' },\n    { browser: 'other', visitors: 90, fill: 'var(--color-other)' }\n]\n\nconst chartConfig = {\n    visitors: {\n        label: 'Visitors'\n    },\n    chrome: {\n        label: 'Chrome',\n        color: 'hsl(var(--chart-1))'\n    },\n    safari: {\n        label: 'Safari',\n        color: 'hsl(var(--chart-2))'\n    },\n    firefox: {\n        label: 'Firefox',\n        color: 'hsl(var(--chart-3))'\n    },\n    edge: {\n        label: 'Edge',\n        color: 'hsl(var(--chart-4))'\n    },\n    other: {\n        label: 'Other',\n        color: 'hsl(var(--chart-5))'\n    }\n} satisfies ChartConfig\n\nexport default function RadialChartSimpleDemo() {\n    return (\n        <Card className='flex flex-col'>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Radial Chart</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[250px]'\n                >\n                    <RadialBarChart data={chartData} innerRadius={30} outerRadius={110}>\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent hideLabel nameKey='browser' />}\n                        />\n                        <RadialBar dataKey='visitors' background />\n                    </RadialBarChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/area-chart-icons-demo": {
    "component": "@/components/docs/charts/area-chart-icons-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { IconDeviceDesktop, IconDeviceMobile } from 'cleon-icons'\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartLegend,\n    ChartLegendContent,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186, mobile: 80 },\n    { month: 'February', desktop: 305, mobile: 200 },\n    { month: 'March', desktop: 237, mobile: 120 },\n    { month: 'April', desktop: 73, mobile: 190 },\n    { month: 'May', desktop: 209, mobile: 130 },\n    { month: 'June', desktop: 214, mobile: 140 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))',\n        icon: IconDeviceDesktop\n    },\n    mobile: {\n        label: 'Mobile',\n        color: 'hsl(var(--chart-2))',\n        icon: IconDeviceMobile\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartIconsDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Area Chart - Icons</Card.Title>\n                <Card.Description>\n                    Showing total visitors for the last 6 months\n                </Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <ChartContainer config={chartConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent indicator='line' />}\n                        />\n                        <Area\n                            dataKey='mobile'\n                            type='natural'\n                            fill='var(--color-mobile)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-mobile)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='desktop'\n                            type='natural'\n                            fill='var(--color-desktop)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-desktop)'\n                            stackId='a'\n                        />\n                        <ChartLegend content={<ChartLegendContent />} />\n                    </AreaChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer>\n                <div className='flex w-full items-start gap-2 text-sm'>\n                    <div className='grid gap-2'>\n                        <div className='flex items-center gap-2 font-medium leading-none'>\n                            Trending up by 5.2% this month{' '}\n                            <IconTrendingUp className='size-4' />\n                        </div>\n                        <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                            January - June 2024\n                        </div>\n                    </div>\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/line-chart-simple-demo": {
    "component": "@/components/docs/charts/line-chart-simple-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { CartesianGrid, Line, LineChart, XAxis } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186 },\n    { month: 'February', desktop: 305 },\n    { month: 'March', desktop: 237 },\n    { month: 'April', desktop: 73 },\n    { month: 'May', desktop: 209 },\n    { month: 'June', desktop: 214 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartSimpleDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Line Chart</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <ChartContainer config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent hideLabel />}\n                        />\n                        <Line\n                            dataKey='desktop'\n                            type='natural'\n                            stroke='var(--color-desktop)'\n                            strokeWidth={2}\n                            dot={false}\n                        />\n                    </LineChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col items-start gap-2 text-sm'>\n                <div className='flex gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/pie-chart-legend-demo": {
    "component": "@/components/docs/charts/pie-chart-legend-demo",
    "raw": "'use client'\n\nimport { Pie, PieChart } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartLegend,\n    ChartLegendContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { browser: 'chrome', visitors: 275, fill: 'var(--color-chrome)' },\n    { browser: 'safari', visitors: 200, fill: 'var(--color-safari)' },\n    { browser: 'firefox', visitors: 187, fill: 'var(--color-firefox)' },\n    { browser: 'edge', visitors: 173, fill: 'var(--color-edge)' },\n    { browser: 'other', visitors: 90, fill: 'var(--color-other)' }\n]\n\nconst chartConfig = {\n    visitors: {\n        label: 'Visitors'\n    },\n    chrome: {\n        label: 'Chrome',\n        color: 'hsl(var(--chart-1))'\n    },\n    safari: {\n        label: 'Safari',\n        color: 'hsl(var(--chart-2))'\n    },\n    firefox: {\n        label: 'Firefox',\n        color: 'hsl(var(--chart-3))'\n    },\n    edge: {\n        label: 'Edge',\n        color: 'hsl(var(--chart-4))'\n    },\n    other: {\n        label: 'Other',\n        color: 'hsl(var(--chart-5))'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartLegendDemo() {\n    return (\n        <Card className='flex flex-col'>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Pie Chart - Legend</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[300px]'\n                >\n                    <PieChart>\n                        <Pie data={chartData} dataKey='visitors' />\n                        <ChartLegend\n                            content={<ChartLegendContent nameKey='browser' />}\n                            className='-translate-y-2 flex-wrap gap-2 [&>*]:basis-1/4 [&>*]:justify-center'\n                        />\n                    </PieChart>\n                </ChartContainer>\n            </Card.Content>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/area-chart-axes-demo": {
    "component": "@/components/docs/charts/area-chart-axes-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { Area, AreaChart, CartesianGrid, XAxis, YAxis } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186, mobile: 80 },\n    { month: 'February', desktop: 305, mobile: 200 },\n    { month: 'March', desktop: 237, mobile: 120 },\n    { month: 'April', desktop: 73, mobile: 190 },\n    { month: 'May', desktop: 209, mobile: 130 },\n    { month: 'June', desktop: 214, mobile: 140 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    },\n    mobile: {\n        label: 'Mobile',\n        color: 'hsl(var(--chart-2))'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartAxesDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Area Chart - Axes</Card.Title>\n                <Card.Description>\n                    Showing total visitors for the last 6 months\n                </Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <ChartContainer config={chartConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: -20,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <YAxis\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickCount={3}\n                        />\n                        <ChartTooltip cursor={false} content={<ChartTooltipContent />} />\n                        <Area\n                            dataKey='mobile'\n                            type='natural'\n                            fill='var(--color-mobile)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-mobile)'\n                            stackId='a'\n                        />\n                        <Area\n                            dataKey='desktop'\n                            type='natural'\n                            fill='var(--color-desktop)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-desktop)'\n                            stackId='a'\n                        />\n                    </AreaChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer>\n                <div className='flex w-full items-start gap-2 text-sm'>\n                    <div className='grid gap-2'>\n                        <div className='flex items-center gap-2 font-medium leading-none'>\n                            Trending up by 5.2% this month{' '}\n                            <IconTrendingUp className='h-4 w-4' />\n                        </div>\n                        <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                            January - June 2024\n                        </div>\n                    </div>\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/radar-chart-grid-none-demo": {
    "component": "@/components/docs/charts/radar-chart-grid-none-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { PolarAngleAxis, Radar, RadarChart } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186 },\n    { month: 'February', desktop: 305 },\n    { month: 'March', desktop: 237 },\n    { month: 'April', desktop: 273 },\n    { month: 'May', desktop: 209 },\n    { month: 'June', desktop: 214 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    }\n} satisfies ChartConfig\n\nexport default function RadarChartGridNoneDemo() {\n    return (\n        <Card>\n            <Card.Header className='items-center pb-4'>\n                <Card.Title>Radar Chart - Grid None</Card.Title>\n                <Card.Description>\n                    Showing total visitors for the last 6 months\n                </Card.Description>\n            </Card.Header>\n            <Card.Content className='pb-0'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[250px]'\n                >\n                    <RadarChart data={chartData}>\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent hideLabel />}\n                        />\n                        <PolarAngleAxis dataKey='month' />\n                        <Radar\n                            dataKey='desktop'\n                            fill='var(--color-desktop)'\n                            fillOpacity={0.6}\n                            dot={{\n                                r: 4,\n                                fillOpacity: 1\n                            }}\n                        />\n                    </RadarChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                    January - June 2024\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/area-chart-simple-demo": {
    "component": "@/components/docs/charts/area-chart-simple-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186 },\n    { month: 'February', desktop: 305 },\n    { month: 'March', desktop: 237 },\n    { month: 'April', desktop: 73 },\n    { month: 'May', desktop: 209 },\n    { month: 'June', desktop: 214 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartSimpleDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Area Chart</Card.Title>\n                <Card.Description>\n                    Showing total visitors for the last 6 months\n                </Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <ChartContainer config={chartConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent indicator='line' />}\n                        />\n                        <Area\n                            dataKey='desktop'\n                            type='natural'\n                            fill='var(--color-desktop)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-desktop)'\n                        />\n                    </AreaChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer>\n                <div className='flex w-full items-start gap-2 text-sm'>\n                    <div className='grid gap-2'>\n                        <div className='flex items-center gap-2 font-medium leading-none'>\n                            Trending up by 5.2% this month{' '}\n                            <IconTrendingUp className='h-4 w-4' />\n                        </div>\n                        <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                            January - June 2024\n                        </div>\n                    </div>\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/radial-chart-label-demo": {
    "component": "@/components/docs/charts/radial-chart-label-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { LabelList, RadialBar, RadialBarChart } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { browser: 'chrome', visitors: 275, fill: 'var(--color-chrome)' },\n    { browser: 'safari', visitors: 200, fill: 'var(--color-safari)' },\n    { browser: 'firefox', visitors: 187, fill: 'var(--color-firefox)' },\n    { browser: 'edge', visitors: 173, fill: 'var(--color-edge)' },\n    { browser: 'other', visitors: 90, fill: 'var(--color-other)' }\n]\n\nconst chartConfig = {\n    visitors: {\n        label: 'Visitors'\n    },\n    chrome: {\n        label: 'Chrome',\n        color: 'hsl(var(--chart-1))'\n    },\n    safari: {\n        label: 'Safari',\n        color: 'hsl(var(--chart-2))'\n    },\n    firefox: {\n        label: 'Firefox',\n        color: 'hsl(var(--chart-3))'\n    },\n    edge: {\n        label: 'Edge',\n        color: 'hsl(var(--chart-4))'\n    },\n    other: {\n        label: 'Other',\n        color: 'hsl(var(--chart-5))'\n    }\n} satisfies ChartConfig\n\nexport default function RadialChartLabelDemo() {\n    return (\n        <Card className='flex flex-col'>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Radial Chart - Label</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[250px]'\n                >\n                    <RadialBarChart\n                        data={chartData}\n                        startAngle={-90}\n                        endAngle={380}\n                        innerRadius={30}\n                        outerRadius={110}\n                    >\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent hideLabel nameKey='browser' />}\n                        />\n                        <RadialBar dataKey='visitors' background>\n                            <LabelList\n                                position='insideStart'\n                                dataKey='browser'\n                                className='fill-white capitalize mix-blend-luminosity'\n                                fontSize={11}\n                            />\n                        </RadialBar>\n                    </RadialBarChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/pie-chart-donut-active-demo": {
    "component": "@/components/docs/charts/pie-chart-donut-active-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { Pie, PieChart, Sector } from 'recharts'\nimport type { PieSectorDataItem } from 'recharts/types/polar/Pie'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { browser: 'chrome', visitors: 275, fill: 'var(--color-chrome)' },\n    { browser: 'safari', visitors: 200, fill: 'var(--color-safari)' },\n    { browser: 'firefox', visitors: 187, fill: 'var(--color-firefox)' },\n    { browser: 'edge', visitors: 173, fill: 'var(--color-edge)' },\n    { browser: 'other', visitors: 90, fill: 'var(--color-other)' }\n]\n\nconst chartConfig = {\n    visitors: {\n        label: 'Visitors'\n    },\n    chrome: {\n        label: 'Chrome',\n        color: 'hsl(var(--chart-1))'\n    },\n    safari: {\n        label: 'Safari',\n        color: 'hsl(var(--chart-2))'\n    },\n    firefox: {\n        label: 'Firefox',\n        color: 'hsl(var(--chart-3))'\n    },\n    edge: {\n        label: 'Edge',\n        color: 'hsl(var(--chart-4))'\n    },\n    other: {\n        label: 'Other',\n        color: 'hsl(var(--chart-5))'\n    }\n} satisfies ChartConfig\n\nexport default function PieChartDonutActiveDemo() {\n    return (\n        <Card className='flex flex-col'>\n            <Card.Header className='items-center pb-0'>\n                <Card.Title>Pie Chart - Donut Active</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content className='flex-1 pb-0'>\n                <ChartContainer\n                    config={chartConfig}\n                    className='mx-auto aspect-square max-h-[250px]'\n                >\n                    <PieChart>\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent hideLabel />}\n                        />\n                        <Pie\n                            data={chartData}\n                            dataKey='visitors'\n                            nameKey='browser'\n                            innerRadius={60}\n                            strokeWidth={5}\n                            activeIndex={0}\n                            activeShape={({\n                                outerRadius = 0,\n                                ...props\n                            }: PieSectorDataItem) => (\n                                <Sector {...props} outerRadius={outerRadius + 10} />\n                            )}\n                        />\n                    </PieChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col gap-2 text-sm'>\n                <div className='flex items-center gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/area-chart-linear-demo": {
    "component": "@/components/docs/charts/area-chart-linear-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { month: 'January', desktop: 186 },\n    { month: 'February', desktop: 305 },\n    { month: 'March', desktop: 237 },\n    { month: 'April', desktop: 73 },\n    { month: 'May', desktop: 209 },\n    { month: 'June', desktop: 214 }\n]\n\nconst chartConfig = {\n    desktop: {\n        label: 'Desktop',\n        color: 'hsl(var(--chart-1))'\n    }\n} satisfies ChartConfig\n\nexport default function AreaChartLinearDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Area Chart - Linear</Card.Title>\n                <Card.Description>\n                    Showing total visitors for the last 6 months\n                </Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <ChartContainer config={chartConfig}>\n                    <AreaChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            left: 12,\n                            right: 12\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                            dataKey='month'\n                            tickLine={false}\n                            axisLine={false}\n                            tickMargin={8}\n                            tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <ChartTooltip\n                            cursor={false}\n                            content={<ChartTooltipContent indicator='dot' hideLabel />}\n                        />\n                        <Area\n                            dataKey='desktop'\n                            type='linear'\n                            fill='var(--color-desktop)'\n                            fillOpacity={0.4}\n                            stroke='var(--color-desktop)'\n                        />\n                    </AreaChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer>\n                <div className='flex w-full items-start gap-2 text-sm'>\n                    <div className='grid gap-2'>\n                        <div className='flex items-center gap-2 font-medium leading-none'>\n                            Trending up by 5.2% this month{' '}\n                            <IconTrendingUp className='h-4 w-4' />\n                        </div>\n                        <div className='flex items-center gap-2 leading-none text-muted-foreground'>\n                            January - June 2024\n                        </div>\n                    </div>\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "charts/line-chart-dots-colors-demo": {
    "component": "@/components/docs/charts/line-chart-dots-colors-demo",
    "raw": "'use client'\n\nimport { IconTrendingUp } from 'cleon-icons'\nimport { CartesianGrid, Dot, Line, LineChart } from 'recharts'\n\nimport {\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    type ChartConfig\n} from '@/components/ui'\n\nconst chartData = [\n    { browser: 'chrome', visitors: 275, fill: 'var(--color-chrome)' },\n    { browser: 'safari', visitors: 200, fill: 'var(--color-safari)' },\n    { browser: 'firefox', visitors: 187, fill: 'var(--color-firefox)' },\n    { browser: 'edge', visitors: 173, fill: 'var(--color-edge)' },\n    { browser: 'other', visitors: 90, fill: 'var(--color-other)' }\n]\n\nconst chartConfig = {\n    visitors: {\n        label: 'Visitors',\n        color: 'hsl(var(--chart-2))'\n    },\n    chrome: {\n        label: 'Chrome',\n        color: 'hsl(var(--chart-1))'\n    },\n    safari: {\n        label: 'Safari',\n        color: 'hsl(var(--chart-2))'\n    },\n    firefox: {\n        label: 'Firefox',\n        color: 'hsl(var(--chart-3))'\n    },\n    edge: {\n        label: 'Edge',\n        color: 'hsl(var(--chart-4))'\n    },\n    other: {\n        label: 'Other',\n        color: 'hsl(var(--chart-5))'\n    }\n} satisfies ChartConfig\n\nexport default function LineChartDotsColorsDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Line Chart - Dots Colors</Card.Title>\n                <Card.Description>January - June 2024</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <ChartContainer config={chartConfig}>\n                    <LineChart\n                        accessibilityLayer\n                        data={chartData}\n                        margin={{\n                            top: 24,\n                            left: 24,\n                            right: 24\n                        }}\n                    >\n                        <CartesianGrid vertical={false} />\n                        <ChartTooltip\n                            cursor={false}\n                            content={\n                                <ChartTooltipContent\n                                    indicator='line'\n                                    nameKey='visitors'\n                                    hideLabel\n                                />\n                            }\n                        />\n                        <Line\n                            dataKey='visitors'\n                            type='natural'\n                            stroke='var(--color-visitors)'\n                            strokeWidth={2}\n                            dot={({ payload, ...props }) => {\n                                return (\n                                    <Dot\n                                        key={payload.browser}\n                                        r={5}\n                                        cx={props.cx}\n                                        cy={props.cy}\n                                        fill={payload.fill}\n                                        stroke={payload.fill}\n                                    />\n                                )\n                            }}\n                        />\n                    </LineChart>\n                </ChartContainer>\n            </Card.Content>\n            <Card.Footer className='flex-col items-start gap-2 text-sm'>\n                <div className='flex gap-2 font-medium leading-none'>\n                    Trending up by 5.2% this month <IconTrendingUp className='h-4 w-4' />\n                </div>\n                <div className='leading-none text-muted-foreground'>\n                    Showing total visitors for the last 6 months\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "forms/slider-controlled-demo": {
    "component": "@/components/docs/forms/slider-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, Slider } from '@/components/ui'\n\nexport default function SliderControlledDemo() {\n    const [temperature, setTemperature] = React.useState<number>(31)\n    const [saturation, setSaturation] = React.useState<number[]>([21, 86])\n    return (\n        <div className='space-y-6'>\n            <div>\n                <Slider\n                    value={temperature}\n                    onChange={(v) => setTemperature(v as number)}\n                    label='Temperature'\n                />\n                <Description className='mt-2 block [&>strong]:text-foreground'>\n                    Current temperature: <strong>{temperature ?? '-'}</strong>\n                </Description>\n            </div>\n            <div>\n                <Slider\n                    value={saturation}\n                    onChange={(v) => setSaturation(v as number[])}\n                    label='Saturation'\n                />\n                <Description className='mt-2 block [&>strong]:text-foreground'>\n                    Current saturation: <strong>{saturation ?? '-'}</strong>\n                </Description>\n            </div>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "forms/checkbox-demo": {
    "component": "@/components/docs/forms/checkbox-demo",
    "raw": "'use client'\n\nimport { Checkbox } from '@/components/ui'\n\nexport default function CheckboxDemo() {\n    return <Checkbox>I Agree with the terms and conditions</Checkbox>\n}\n",
    "type": "docs"
  },
  "forms/slider-step-demo": {
    "component": "@/components/docs/forms/slider-step-demo",
    "raw": "'use client'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderStepDemo() {\n    return <Slider step={10} description='Step in 10' label='Order amount' />\n}\n",
    "type": "docs"
  },
  "forms/radio-group-disabled-demo": {
    "component": "@/components/docs/forms/radio-group-disabled-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupDisabledDemo() {\n    return (\n        <RadioGroup isDisabled label='Features'>\n            <Radio value='fs'>Font size: Small, Medium, Large</Radio>\n            <Radio value='dr'>Display resolution: 1080p, 1440p, 4K</Radio>\n            <Radio value='ss'>Sound settings: Mute, Low, Medium, High</Radio>\n            <Radio value='bi'>Background image: Default, Custom</Radio>\n            <Radio value='ks'>Keyboard shortcuts: Enabled, Disabled</Radio>\n        </RadioGroup>\n    )\n}\n",
    "type": "docs"
  },
  "forms/switch-demo": {
    "component": "@/components/docs/forms/switch-demo",
    "raw": "'use client'\n\nimport { useTheme } from 'next-themes'\n\nimport { Switch } from '@/components/ui'\n\nexport default function SwitchDemo() {\n    const { resolvedTheme, setTheme } = useTheme()\n    return (\n        <Switch onChange={() => setTheme(resolvedTheme === 'light' ? 'dark' : 'light')}>\n            Turn on the light\n        </Switch>\n    )\n}\n",
    "type": "docs"
  },
  "forms/choicebox-disabled-demo": {
    "component": "@/components/docs/forms/choicebox-disabled-demo",
    "raw": "'use client'\n\nimport { Choicebox } from '@/components/ui'\n\nexport default function ChoiceboxDisabledDemo() {\n    return (\n        <div className='p-1'>\n            <Choicebox\n                aria-label='Select packages'\n                selectionMode='multiple'\n                items={packages}\n            >\n                {(item) => (\n                    <Choicebox.Item\n                        isDisabled={['sm', 'lg'].includes(item.id)}\n                        {...item}\n                    />\n                )}\n            </Choicebox>\n        </div>\n    )\n}\n\nconst packages = [\n    {\n        id: 'sm',\n        title: 'Small',\n        description: 'Perfect for beginners. Basic resources for light projects.'\n    },\n    {\n        id: 'md',\n        title: 'Medium',\n        description: 'Great for growing sites. More power and storage.'\n    },\n    {\n        id: 'lg',\n        title: 'Large',\n        description: 'Ideal for busy sites. Lots of resources and support.'\n    },\n    {\n        id: 'xl',\n        title: 'Extra Large',\n        description: 'Max power for demanding applications. Top-tier performance.'\n    }\n]\n",
    "type": "docs"
  },
  "forms/text-field-demo": {
    "component": "@/components/docs/forms/text-field-demo",
    "raw": "'use client'\n\nimport { TextField } from '@/components/ui'\n\nexport default function TextFieldDemo() {\n    return <TextField label='Name' />\n}\n",
    "type": "docs"
  },
  "forms/slider-range-demo": {
    "component": "@/components/docs/forms/slider-range-demo",
    "raw": "'use client'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderRangeDemo() {\n    return <Slider defaultValue={[25, 75]} label='Your budget' />\n}\n",
    "type": "docs"
  },
  "forms/checkbox-group-demo": {
    "component": "@/components/docs/forms/checkbox-group-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Checkbox, CheckboxGroup } from '@/components/ui'\n\nexport default function CheckboxGroupDemo() {\n    return (\n        <CheckboxGroup label='Settings'>\n            <React.Fragment key='.0'>\n                <Checkbox value='notifications'>Enable notifications</Checkbox>\n                <Checkbox value='auto_update'>Auto-update applications</Checkbox>\n                <Checkbox value='dark_mode'>Enable dark mode</Checkbox>\n                <Checkbox value='location_access'>Allow location access</Checkbox>\n                <Checkbox value='two_factor_auth'>\n                    Enable two-factor authentication\n                </Checkbox>\n            </React.Fragment>\n        </CheckboxGroup>\n    )\n}\n",
    "type": "docs"
  },
  "forms/textarea-demo": {
    "component": "@/components/docs/forms/textarea-demo",
    "raw": "'use client'\n\nimport { Textarea } from '@/components/ui'\n\nexport default function TextareaDemo() {\n    return <Textarea label='Address' />\n}\n",
    "type": "docs"
  },
  "forms/input-otp-demo": {
    "component": "@/components/docs/forms/input-otp-demo",
    "raw": "import { InputOTP } from '@/components/ui'\n\nexport default function InputOtpDemo() {\n    return (\n        <div>\n            <InputOTP maxLength={6}>\n                <InputOTP.Group>\n                    {[...Array(6)].map((_, index) => (\n                        <InputOTP.Slot key={index} index={index} />\n                    ))}\n                </InputOTP.Group>\n            </InputOTP>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "forms/radio-group-invalid-demo": {
    "component": "@/components/docs/forms/radio-group-invalid-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupInvalidDemo() {\n    return (\n        <RadioGroup isInvalid label='Features'>\n            <Radio value='fs'>Font size: Small, Medium, Large</Radio>\n            <Radio value='dr'>Display resolution: 1080p, 1440p, 4K</Radio>\n            <Radio value='ss'>Sound settings: Mute, Low, Medium, High</Radio>\n            <Radio value='bi'>Background image: Default, Custom</Radio>\n            <Radio value='ks'>Keyboard shortcuts: Enabled, Disabled</Radio>\n        </RadioGroup>\n    )\n}\n",
    "type": "docs"
  },
  "forms/number-field-demo": {
    "component": "@/components/docs/forms/number-field-demo",
    "raw": "'use client'\n\nimport { NumberField } from '@/components/ui'\n\nexport default function NumberFieldDemo() {\n    return <NumberField label='Quantity' />\n}\n",
    "type": "docs"
  },
  "forms/number-field-invalid-demo": {
    "component": "@/components/docs/forms/number-field-invalid-demo",
    "raw": "'use client'\n\nimport { NumberField } from '@/components/ui'\n\nexport default function NumberFieldInvalidDemo() {\n    return <NumberField isInvalid label=\"You can't count on me\" />\n}\n",
    "type": "docs"
  },
  "forms/text-field-prefix-suffix-demo": {
    "component": "@/components/docs/forms/text-field-prefix-suffix-demo",
    "raw": "'use client'\n\nimport { IconBrandX } from 'cleon-icons'\n\nimport { TextField } from '@/components/ui'\n\nexport default function TextFieldDemo() {\n    return (\n        <div className='flex flex-col gap-4'>\n            <TextField label='Twitter' suffix={<IconBrandX className='h-4 w-4' />} />\n            <TextField label='Sites' prefix='https://' suffix='.com' />\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "forms/search-field-controlled-demo": {
    "component": "@/components/docs/forms/search-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, SearchField } from '@/components/ui'\n\nexport default function SearchFieldControlledDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <>\n            <SearchField value={value} onChange={setValue} className='mb-2' />\n            <Description className='mt-2 block [&>strong]:text-foreground'>\n                You have typed: <strong>{value ?? '-'}</strong>\n            </Description>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "forms/checkbox-controlled-demo": {
    "component": "@/components/docs/forms/checkbox-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Checkbox, Description } from '@/components/ui'\n\nexport default function CheckboxControlledDemo() {\n    const [selected, setSelection] = React.useState(false)\n    return (\n        <>\n            <Checkbox isSelected={selected} onChange={setSelection} value='updates'>\n                Receive Updates\n            </Checkbox>\n            <Description className='mt-2 block [&>strong]:text-foreground'>\n                You have <strong>{selected ? 'enabled' : 'disabled'}</strong> the option.\n            </Description>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "forms/text-field-validation-demo": {
    "component": "@/components/docs/forms/text-field-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, TextField } from '@/components/ui'\n\nexport default function TextFieldValidationDemo() {\n    return (\n        <Form>\n            <TextField isRequired label='Name' className='mb-2' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n",
    "type": "docs"
  },
  "forms/radio-group-demo": {
    "component": "@/components/docs/forms/radio-group-demo",
    "raw": "'use client'\n\nimport { Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupDemo() {\n    return (\n        <RadioGroup label='Features'>\n            <Radio value='fs'>Font size: Small, Medium, Large</Radio>\n            <Radio value='dr'>Display resolution: 1080p, 1440p, 4K</Radio>\n            <Radio value='ss'>Sound settings: Mute, Low, Medium, High</Radio>\n            <Radio value='bi'>Background image: Default, Custom</Radio>\n            <Radio value='ks'>Keyboard shortcuts: Enabled, Disabled</Radio>\n        </RadioGroup>\n    )\n}\n",
    "type": "docs"
  },
  "forms/text-field-controlled-demo": {
    "component": "@/components/docs/forms/text-field-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, TextField } from '@/components/ui'\n\nexport default function TextFieldControlledDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <>\n            <TextField value={value} onChange={setValue} label='Name' className='mb-2' />\n            <Description className='mt-2 block [&>strong]:text-foreground'>\n                You have typed: <strong>{value ?? '-'}</strong>\n            </Description>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "forms/switch-controlled-demo": {
    "component": "@/components/docs/forms/switch-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Description, Switch } from '@/components/ui'\n\nexport default function SwitchControlledDemo() {\n    const [darkMode, setDarkMode] = React.useState(false)\n    return (\n        <>\n            <Switch isSelected={darkMode} onChange={setDarkMode} value='dark_mode'>\n                Enable Dark Mode\n            </Switch>\n\n            <Description className='mt-2 block [&>strong]:text-foreground'>\n                Dark Mode is <strong>{darkMode ? 'enabled' : 'disabled'}</strong>\n            </Description>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "forms/form-validation-demo": {
    "component": "@/components/docs/forms/form-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, TextField } from '@/components/ui'\n\nexport default function FormValidationDemo() {\n    return (\n        <Form onSubmit={() => {}}>\n            <TextField label='Name' isRequired className='mb-2' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n",
    "type": "docs"
  },
  "forms/slider-demo": {
    "component": "@/components/docs/forms/slider-demo",
    "raw": "import { Slider } from '@/components/ui'\n\nexport default function SliderDemo() {\n    return <Slider label='Volume' />\n}\n",
    "type": "docs"
  },
  "forms/checkbox-invalid-demo": {
    "component": "@/components/docs/forms/checkbox-invalid-demo",
    "raw": "'use client'\n\nimport { Checkbox } from '@/components/ui'\n\nexport default function CheckboxInvalidDemo() {\n    return <Checkbox isInvalid>There is something wrong</Checkbox>\n}\n",
    "type": "docs"
  },
  "forms/choicebox-demo": {
    "component": "@/components/docs/forms/choicebox-demo",
    "raw": "'use client'\n\nimport { Choicebox } from '@/components/ui'\n\nexport default function ChoiceboxDemo() {\n    return (\n        <Choicebox aria-label='Select items' selectionMode='multiple'>\n            <Choicebox.Item\n                title='Basic'\n                description='Just the essentials to get started.'\n            />\n            <Choicebox.Item\n                title='Standard'\n                description='A step up with more features and support.'\n            />\n            <Choicebox.Item\n                title='Premium'\n                description='Advanced options for growing needs.'\n            />\n            <Choicebox.Item\n                title='Deluxe'\n                description='Top-tier features for maximum performance.'\n            />\n            <Choicebox.Item\n                title='Ultimate'\n                description='All-inclusive plan with every feature available.'\n            />\n            <Choicebox.Item\n                title='Enterprise'\n                description='Custom solutions for large-scale operations.'\n            />\n        </Choicebox>\n    )\n}\n",
    "type": "docs"
  },
  "forms/textarea-validation-demo": {
    "component": "@/components/docs/forms/textarea-validation-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Form, Textarea } from '@/components/ui'\n\nexport default function TextareaControlledDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <Form onSubmit={(e) => e.preventDefault()}>\n            <Textarea\n                value={value}\n                onChange={setValue}\n                label='Address'\n                isRequired\n                className='mb-2'\n            />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n",
    "type": "docs"
  },
  "forms/text-field-loading-demo": {
    "component": "@/components/docs/forms/text-field-loading-demo",
    "raw": "'use client'\n\nimport { TextField } from '@/components/ui'\n\nexport default function TextFieldLoadingDemo() {\n    return <TextField isLoading indicatorPlace='suffix' label='Checking your name' />\n}\n",
    "type": "docs"
  },
  "forms/input-otp-controlled-demo": {
    "component": "@/components/docs/forms/input-otp-controlled-demo",
    "raw": "import React from 'react'\n\nimport { InputOTP } from '@/components/ui'\n\nexport default function InputOtpControlledDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <div className='space-y-2'>\n            <InputOTP maxLength={6} value={value} onChange={setValue}>\n                <InputOTP.Group>\n                    {[...Array(6)].map((_, index) => (\n                        <InputOTP.Slot key={index} index={index} />\n                    ))}\n                </InputOTP.Group>\n            </InputOTP>\n\n            <div className='text-center text-sm'>\n                {value === '' ? <>PIN</> : <>YOUR PIN: {value}</>}\n            </div>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "forms/switch-variant-demo": {
    "component": "@/components/docs/forms/switch-variant-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { OptionPreview } from '@/components/docs/outside/option-preview'\nimport { Select, Switch } from '@/components/ui'\n\nconst items = ['primary', 'secondary', 'success', 'danger', 'warning', 'info'].map(\n    (item) => ({\n        value: item,\n        label: item\n    })\n)\nexport default function SwitchVariantDemo() {\n    const [variant, setVariant] = React.useState('primary')\n\n    return (\n        <>\n            <OptionPreview>\n                <Select\n                    aria-labelledby='Variant'\n                    items={items}\n                    selectedKey={variant}\n                    onSelectionChange={(v) => setVariant(v as any)}\n                >\n                    {(item) => (\n                        <Select.Item id={item.value} textValue={item.value}>\n                            {item.label}\n                        </Select.Item>\n                    )}\n                </Select>\n            </OptionPreview>\n            <Switch defaultSelected variant={variant as any}>\n                Label\n            </Switch>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "forms/input-otp-separator-demo": {
    "component": "@/components/docs/forms/input-otp-separator-demo",
    "raw": "import { InputOTP } from '@/components/ui'\n\nexport default function InputOtpSeparatorDemo() {\n    return (\n        <InputOTP maxLength={6}>\n            <InputOTP.Group>\n                <InputOTP.Slot index={0} />\n                <InputOTP.Slot index={1} />\n                <InputOTP.Slot index={2} />\n            </InputOTP.Group>\n            <InputOTP.Separator />\n            <InputOTP.Group>\n                <InputOTP.Slot index={3} />\n                <InputOTP.Slot index={4} />\n                <InputOTP.Slot index={5} />\n            </InputOTP.Group>\n        </InputOTP>\n    )\n}\n",
    "type": "docs"
  },
  "forms/textarea-disabled-demo": {
    "component": "@/components/docs/forms/textarea-disabled-demo",
    "raw": "'use client'\n\nimport { Textarea } from '@/components/ui'\n\nexport default function TextareaDisabledDemo() {\n    return <Textarea isDisabled label=\"Don't fill this Textarea\" />\n}\n",
    "type": "docs"
  },
  "forms/text-field-disabled-demo": {
    "component": "@/components/docs/forms/text-field-disabled-demo",
    "raw": "'use client'\n\nimport { TextField } from '@/components/ui'\n\nexport default function TextFieldDisabledDemo() {\n    return <TextField isDisabled label='Name' />\n}\n",
    "type": "docs"
  },
  "forms/choicebox-controlled-demo": {
    "component": "@/components/docs/forms/choicebox-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Selection } from 'react-aria-components'\n\nimport { Choicebox, Description } from '@/components/ui'\n\nexport default function ChoiceboxControlledDemo() {\n    const [selectedKeys, setSelectedKeys] = React.useState<Selection>(\n        new Set([packages[0].id])\n    )\n    return (\n        <>\n            <Choicebox\n                aria-label='Select packages'\n                selectionMode='multiple'\n                selectedKeys={selectedKeys}\n                onSelectionChange={setSelectedKeys}\n                items={packages}\n            >\n                {(item) => <Choicebox.Item {...item} />}\n            </Choicebox>\n\n            <Description className='mt-2 block [&>strong]:text-foreground text-muted-foreground'>\n                You have selected: <strong>{Array.from(selectedKeys).join(', ')}</strong>\n            </Description>\n        </>\n    )\n}\n\nconst packages = [\n    {\n        id: 'sm',\n        title: 'Small',\n        description: 'Perfect for beginners. Basic resources for light projects.'\n    },\n    {\n        id: 'md',\n        title: 'Medium',\n        description: 'Great for growing sites. More power and storage.'\n    },\n    {\n        id: 'lg',\n        title: 'Large',\n        description: 'Ideal for busy sites. Lots of resources and support.'\n    },\n    {\n        id: 'xl',\n        title: 'Extra Large',\n        description: 'Max power for demanding applications. Top-tier performance.'\n    }\n]\n",
    "type": "docs"
  },
  "forms/switch-disabled-demo": {
    "component": "@/components/docs/forms/switch-disabled-demo",
    "raw": "'use client'\n\nimport { Switch } from '@/components/ui'\n\nexport default function SwitchDemo() {\n    return <Switch isDisabled>Don't turn the light on</Switch>\n}\n",
    "type": "docs"
  },
  "forms/search-field-validation-demo": {
    "component": "@/components/docs/forms/search-field-validation-demo",
    "raw": "'use client'\n\nimport { Button, Form, SearchField } from '@/components/ui'\n\nexport default function SearchFieldValidationDemo() {\n    return (\n        <Form>\n            <SearchField isRequired label='Name' className='mb-2' />\n            <Button type='submit'>Submit</Button>\n        </Form>\n    )\n}\n",
    "type": "docs"
  },
  "forms/search-field-disabled-demo": {
    "component": "@/components/docs/forms/search-field-disabled-demo",
    "raw": "'use client'\n\nimport { SearchField } from '@/components/ui'\n\nexport default function SearchFieldDisabledDemo() {\n    return <SearchField isDisabled />\n}\n",
    "type": "docs"
  },
  "forms/search-field-with-label-demo": {
    "component": "@/components/docs/forms/search-field-with-label-demo",
    "raw": "'use client'\n\nimport { SearchField } from '@/components/ui'\n\nexport default function SearchFieldWithLabelDemo() {\n    return <SearchField label='Search' />\n}\n",
    "type": "docs"
  },
  "forms/checkbox-disabled-demo": {
    "component": "@/components/docs/forms/checkbox-disabled-demo",
    "raw": "'use client'\n\nimport { Checkbox } from '@/components/ui'\n\nexport default function CheckboxDisabledDemo() {\n    return <Checkbox isDisabled>You can't select me</Checkbox>\n}\n",
    "type": "docs"
  },
  "forms/choicebox-single-selection-demo": {
    "component": "@/components/docs/forms/choicebox-single-selection-demo",
    "raw": "'use client'\n\nimport { Choicebox } from '@/components/ui'\n\nexport default function ChoiceboxSingleSelectionDemo() {\n    return (\n        <Choicebox aria-label='Select packages' selectionMode='single' items={packages}>\n            {(item) => <Choicebox.Item {...item} />}\n        </Choicebox>\n    )\n}\n\nconst packages = [\n    {\n        id: 'sm',\n        title: 'Small',\n        description: 'Perfect for beginners. Basic resources for light projects.'\n    },\n    {\n        id: 'md',\n        title: 'Medium',\n        description: 'Great for growing sites. More power and storage.'\n    },\n    {\n        id: 'lg',\n        title: 'Large',\n        description: 'Ideal for busy sites. Lots of resources and support.'\n    },\n    {\n        id: 'xl',\n        title: 'Extra Large',\n        description: 'Max power for demanding applications. Top-tier performance.'\n    }\n]\n",
    "type": "docs"
  },
  "forms/form-demo": {
    "component": "@/components/docs/forms/form-demo",
    "raw": "'use client'\n\nimport { Button, Form, Heading, TextField } from '@/components/ui'\n\nexport default function FormDemo() {\n    return (\n        <div className='mx-auto max-w-md py-10'>\n            <Heading level={2} className='mb-4'>\n                Register\n            </Heading>\n            <Form onSubmit={() => {}} className='space-y-4'>\n                <TextField isRequired label='Name' placeholder='Enter your name' />\n                <TextField isRequired label='Email' placeholder='Enter your email' />\n                <div className='grid grid-cols-2 gap-4'>\n                    <TextField\n                        isRequired\n                        label='Password'\n                        placeholder='Enter your password'\n                        type='password'\n                    />\n                    <TextField\n                        isRequired\n                        label='Confirm Password'\n                        placeholder='Enter your password again'\n                        type='password'\n                    />\n                </div>\n                <Button type='submit'>Submit</Button>\n            </Form>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "forms/radio-group-controlled-demo": {
    "component": "@/components/docs/forms/radio-group-controlled-demo",
    "raw": "import React from 'react'\n\nimport { Description, Radio, RadioGroup } from '@/components/ui'\n\nexport default function RadioGroupControlledDemo() {\n    const [selected, setSelected] = React.useState('')\n    return (\n        <>\n            <RadioGroup label='Features' value={selected} onChange={setSelected}>\n                <Radio value='theme'>Theme</Radio>\n                <Radio value='language'>Language</Radio>\n                <Radio value='timezone'>Timezone</Radio>\n                <Radio value='notifications'>Notifications</Radio>\n                <Radio value='privacy'>Privacy</Radio>\n            </RadioGroup>\n            <Description className='mt-2 block [&>strong]:text-foreground'>\n                You have selected: <strong>{selected ?? '-'}</strong>\n            </Description>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "forms/textarea-controlled-demo": {
    "component": "@/components/docs/forms/textarea-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Textarea } from '@/components/ui'\n\nexport default function TextareaControlledDemo() {\n    const [value, setValue] = React.useState('')\n    return (\n        <>\n            <Textarea\n                value={value}\n                onChange={setValue}\n                label='Address'\n                className='mb-2'\n            />\n            <p className='mt-2'>You have typed: {value ?? '-'}</p>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "forms/slider-disabled-demo": {
    "component": "@/components/docs/forms/slider-disabled-demo",
    "raw": "'use client'\n\nimport { Slider } from '@/components/ui'\n\nexport default function SliderDisabledDemo() {\n    return <Slider isDisabled label=\"Don't raise the volume\" />\n}\n",
    "type": "docs"
  },
  "forms/choicebox-columns-demo": {
    "component": "@/components/docs/forms/choicebox-columns-demo",
    "raw": "'use client'\n\nimport { Choicebox } from '@/components/ui'\n\nexport default function ChoiceboxColumnsDemo() {\n    return (\n        <div className='p-1'>\n            <Choicebox\n                aria-label='Select prices'\n                gap={2}\n                columns={3}\n                selectionMode='multiple'\n                items={prices}\n            >\n                {(item) => <Choicebox.Item {...item} />}\n            </Choicebox>\n        </div>\n    )\n}\n\nconst prices = [\n    { id: 1, title: 'Basic', description: 'Essentials, get started' },\n    { id: 2, title: 'Standard', description: 'More features, support' },\n    { id: 3, title: 'Premium', description: 'Advanced, growing needs' },\n    { id: 4, title: 'Deluxe', description: 'Top-tier, maximum performance' },\n    { id: 5, title: 'Ultimate', description: 'All-inclusive, every feature' },\n    { id: 6, title: 'Enterprise', description: 'Custom, large-scale operations' }\n]\n",
    "type": "docs"
  },
  "forms/number-field-disabled-demo": {
    "component": "@/components/docs/forms/number-field-disabled-demo",
    "raw": "'use client'\n\nimport { NumberField } from '@/components/ui'\n\nexport default function NumberFieldDisabledDemo() {\n    return <NumberField isDisabled label='Value' />\n}\n",
    "type": "docs"
  },
  "forms/search-field-demo": {
    "component": "@/components/docs/forms/search-field-demo",
    "raw": "import { SearchField } from '@/components/ui'\n\nexport default function SearchFieldDemo() {\n    return <SearchField aria-label='Search' placeholder='Search' />\n}\n",
    "type": "docs"
  },
  "media/carousel-demo": {
    "component": "@/components/docs/media/carousel-demo",
    "raw": "'use client'\n\nimport Image from 'next/image'\n\nimport { Carousel } from '@/components/ui'\n\nexport default function CarouselDemo() {\n    return (\n        <Carousel className='w-full [&_.card]:h-56 [&_.card]:overflow-hidden [&_.card]:flex [&_.card]:flex-col max-w-xs'>\n            <Carousel.Content>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-xl'\n                        src='https://picsum.photos/id/61/512/512'\n                        alt='image 1'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-xl'\n                        src='https://picsum.photos/id/62/512/512'\n                        alt='image 2'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-xl'\n                        src='https://picsum.photos/id/63/512/512'\n                        alt='image 3'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-xl'\n                        src='https://picsum.photos/id/64/512/512'\n                        alt='image 4'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-xl'\n                        src='https://picsum.photos/id/65/512/512'\n                        alt='image 5'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-xl'\n                        src='https://picsum.photos/id/66/512/512'\n                        alt='image 6'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n                <Carousel.Item className='basis-1/2'>\n                    <Image\n                        className='rounded-xl'\n                        src='https://picsum.photos/id/67/512/512'\n                        alt='image 7'\n                        width={400}\n                        height={300}\n                    />\n                </Carousel.Item>\n            </Carousel.Content>\n\n            <Carousel.Handler>\n                <Carousel.Button slot='previous' />\n                <Carousel.Button slot='next' />\n            </Carousel.Handler>\n        </Carousel>\n    )\n}\n",
    "type": "docs"
  },
  "media/avatar-status-demo": {
    "component": "@/components/docs/media/avatar-status-demo",
    "raw": "import { Avatar } from '@/components/ui'\n\nexport default function AvatarStatusDemo() {\n    return (\n        <div className='flex justify-center gap-2'>\n            <Avatar\n                status='primary'\n                initials='DQ'\n                src='https://i.pravatar.cc/150?img=59'\n            />\n            <Avatar\n                status='success'\n                initials='DQ'\n                src='https://i.pravatar.cc/150?img=62'\n            />\n            <Avatar\n                status='danger'\n                initials='DQ'\n                src='https://i.pravatar.cc/150?img=63'\n            />\n            <Avatar status='muted' initials='DQ' src='https://i.pravatar.cc/150?img=64' />\n            <Avatar\n                status='warning'\n                initials='DQ'\n                src='https://i.pravatar.cc/150?img=60'\n            />\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "media/carousel-with-collection-demo": {
    "component": "@/components/docs/media/carousel-with-collection-demo",
    "raw": "'use client'\n\nimport Image from 'next/image'\n\nimport { Card, Carousel } from '@/components/ui'\n\nexport default function CarouselWithCollectionDemo() {\n    return (\n        <Carousel className='w-full [&_.card]:overflow-hidden [&_.card]:flex [&_.card]:flex-col max-w-xs'>\n            <Carousel.Content items={items}>\n                {(item) => (\n                    <Carousel.Item id={item.id}>\n                        <Card className='p-2'>\n                            <Image\n                                className='rounded-md h-40 object-center object-cover'\n                                src={`https://picsum.photos/id/${item.id}/512/512`}\n                                alt='image 5'\n                                width={400}\n                                height={300}\n                            />\n                            <Card.Header>\n                                <Card.Title className='line-clamp-1 sm:text-lg'>\n                                    {item.title}\n                                </Card.Title>\n                                <Card.Description className='line-clamp-2'>\n                                    {item.description}\n                                </Card.Description>\n                            </Card.Header>\n                        </Card>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n\n            <Carousel.Handler>\n                <Carousel.Button slot='previous' />\n                <Carousel.Button slot='next' />\n            </Carousel.Handler>\n        </Carousel>\n    )\n}\n\nconst items = [\n    {\n        id: 1,\n        title: 'Vintage Leather Jacket',\n        description: 'Classic brown leather jacket, perfect for a stylish retro look.'\n    },\n    {\n        id: 2,\n        title: 'Wireless Bluetooth Headphones',\n        description:\n            'Experience high-quality sound with these comfortable, noise-canceling headphones.'\n    },\n    {\n        id: 3,\n        title: 'Organic Cotton T-Shirt',\n        description: 'Soft and eco-friendly t-shirt made from 100% organic cotton.'\n    },\n    {\n        id: 4,\n        title: 'Stainless Steel Water Bottle',\n        description:\n            'Keep your drinks cold or hot with this durable, insulated water bottle.'\n    },\n    {\n        id: 5,\n        title: 'Running Shoes',\n        description: 'Lightweight and comfortable shoes designed for optimal performance.'\n    },\n    {\n        id: 6,\n        title: 'Smartwatch',\n        description: 'Stay connected and track your fitness with this sleek smartwatch.'\n    },\n    {\n        id: 7,\n        title: 'Portable Charger',\n        description: 'Never run out of battery with this high-capacity portable charger.'\n    }\n]\n",
    "type": "docs"
  },
  "media/avatar-shape-demo": {
    "component": "@/components/docs/media/avatar-shape-demo",
    "raw": "import { Avatar } from '@/components/ui'\n\nexport default function AvatarShapeDemo() {\n    return (\n        <div className='flex gap-2'>\n            <Avatar\n                shape='square'\n                initials='DQ'\n                alt='dq-alhq'\n                src='https://github.com/dq-alhq.png'\n            />\n            <Avatar\n                shape='circle'\n                initials='DQ'\n                alt='dq-alhq'\n                src='https://github.com/dq-alhq.png'\n            />\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "media/avatar-fallback-demo": {
    "component": "@/components/docs/media/avatar-fallback-demo",
    "raw": "import { Avatar } from '@/components/ui'\n\nexport default function AvatarFallbackDemo() {\n    return <Avatar initials='DQ' src='https://github.com/dq-nahdliyan.png' />\n}\n",
    "type": "docs"
  },
  "media/carousel-api-demo": {
    "component": "@/components/docs/media/carousel-api-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { Button } from 'react-aria-components'\n\nimport { Card, Carousel, type CarouselApi } from '@/components/ui'\nimport { cn } from '@/lib/utils'\n\nexport default function CarouselDApiDemo() {\n    const [api, setApi] = React.useState<CarouselApi>()\n    const [current, setCurrent] = React.useState(0)\n    const [count, setCount] = React.useState(0)\n\n    React.useEffect(() => {\n        if (!api) {\n            return\n        }\n\n        setCount(api.scrollSnapList().length)\n        setCurrent(api.selectedScrollSnap() + 1)\n        api.on('select', () => {\n            setCurrent(api.selectedScrollSnap() + 1)\n        })\n    }, [api])\n\n    const handleSelect = (index: number) => {\n        if (api) {\n            api.scrollTo(index)\n            setCurrent(index + 1)\n        }\n    }\n\n    return (\n        <Carousel setApi={setApi} className='w-full max-w-sm'>\n            <Carousel.Content\n                items={Array.from({ length: 10 }, (_, id) => ({ id: id + 1 }))}\n            >\n                {({ id }) => (\n                    <Carousel.Item id={id}>\n                        <Card>\n                            <Card.Content className='flex aspect-square items-center justify-center p-6'>\n                                <span className='text-4xl font-semibold'>{id}</span>\n                            </Card.Content>\n                        </Card>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n            <div className='flex justify-between mt-4 items-center'>\n                <div className='py-2 gap-1 flex text-center text-sm text-muted-foreground'>\n                    {Array.from({ length: 10 }).map((_, index) => (\n                        <Button\n                            className={cn(\n                                'focus:outline-none transition rounded-xl',\n                                current === index + 1\n                                    ? 'w-5 h-3 transition-all bg-primary hover:bg-primary/80'\n                                    : 'bg-foreground/10 hover:bg-foreground/15 w-3 h-3'\n                            )}\n                            aria-label={`Slide ${current} of ${count}`}\n                            onPress={() => handleSelect(index)}\n                            key={index}\n                        />\n                    ))}\n                </div>\n\n                <div className='space-x-2'>\n                    <Carousel.Button slot='previous' />\n                    <Carousel.Button slot='next' />\n                </div>\n            </div>\n        </Carousel>\n    )\n}\n",
    "type": "docs"
  },
  "media/avatar-initials-demo": {
    "component": "@/components/docs/media/avatar-initials-demo",
    "raw": "import { Avatar } from '@/components/ui'\n\nexport default function AvatarInitialsDemo() {\n    return <Avatar initials='DQ' />\n}\n",
    "type": "docs"
  },
  "media/carousel-autoplay-demo": {
    "component": "@/components/docs/media/carousel-autoplay-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport Autoplay from 'embla-carousel-autoplay'\n\nimport { Card, Carousel } from '@/components/ui'\n\nexport default function CarouselAutoplayDemo() {\n    const plugin = React.useRef(Autoplay({ delay: 1000, stopOnInteraction: true }))\n\n    return (\n        <Carousel\n            onMouseEnter={plugin.current.stop}\n            onMouseLeave={plugin.current.reset}\n            plugins={[plugin.current as any]}\n            opts={{\n                loop: true,\n                align: 'center'\n            }}\n            className='w-full [&_.card]:h-56 [&_.card]:overflow-hidden [&_.card]:flex [&_.card]:flex-col max-w-xs'\n        >\n            <Carousel.Content items={items}>\n                {(item) => (\n                    <Carousel.Item id={item.id}>\n                        <div className='p-1'>\n                            <Card>\n                                <div className='bg-foreground/5 border-b flex-1 relative' />\n                                <Card.Header>\n                                    <Card.Title className='line-clamp-1 sm:text-lg'>\n                                        {item.title}\n                                    </Card.Title>\n                                    <Card.Description className='line-clamp-2'>\n                                        {item.description}\n                                    </Card.Description>\n                                </Card.Header>\n                            </Card>\n                        </div>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n\n            <Carousel.Handler>\n                <Carousel.Button slot='previous' />\n                <Carousel.Button slot='next' />\n            </Carousel.Handler>\n        </Carousel>\n    )\n}\n\nconst items = [\n    {\n        id: 1,\n        title: 'Vintage Leather Jacket',\n        description: 'Classic brown leather jacket, perfect for a stylish retro look.'\n    },\n    {\n        id: 2,\n        title: 'Wireless Bluetooth Headphones',\n        description:\n            'Experience high-quality sound with these comfortable, noise-canceling headphones.'\n    },\n    {\n        id: 3,\n        title: 'Organic Cotton T-Shirt',\n        description: 'Soft and eco-friendly t-shirt made from 100% organic cotton.'\n    },\n    {\n        id: 4,\n        title: 'Stainless Steel Water Bottle',\n        description:\n            'Keep your drinks cold or hot with this durable, insulated water bottle.'\n    },\n    {\n        id: 5,\n        title: 'Running Shoes',\n        description: 'Lightweight and comfortable shoes designed for optimal performance.'\n    },\n    {\n        id: 6,\n        title: 'Smartwatch',\n        description: 'Stay connected and track your fitness with this sleek smartwatch.'\n    },\n    {\n        id: 7,\n        title: 'Portable Charger',\n        description: 'Never run out of battery with this high-capacity portable charger.'\n    },\n    {\n        id: 8,\n        title: 'Noise-Canceling Earbuds',\n        description: 'Compact and powerful earbuds that block out unwanted noise.'\n    },\n    {\n        id: 9,\n        title: 'Yoga Mat',\n        description: 'Non-slip, cushioned yoga mat for a comfortable workout experience.'\n    },\n    {\n        id: 10,\n        title: 'LED Desk Lamp',\n        description: 'Bright and energy-efficient LED lamp with adjustable brightness.'\n    }\n]\n",
    "type": "docs"
  },
  "media/avatar-group-demo": {
    "component": "@/components/docs/media/avatar-group-demo",
    "raw": "'use client'\n\nimport { Avatar, AvatarGroup } from '@/components/ui'\n\nexport default function AvatarGroupDemo() {\n    return (\n        <AvatarGroup aria-label='avatar-group'>\n            <Avatar\n                role='avatar-1 '\n                alt='image 1'\n                initials='IR'\n                src='https://i.pravatar.cc/150?img=61'\n            />\n            <Avatar\n                role='avatar-2 '\n                alt='image 2'\n                initials='IR'\n                src='https://i.pravatar.cc/150?img=62'\n            />\n            <Avatar\n                role='avatar-3 '\n                alt='image 3'\n                initials='IR'\n                src='https://i.pravatar.cc/150?img=63'\n            />\n            <Avatar\n                role='avatar-4 '\n                alt='image 4'\n                initials='IR'\n                src='https://i.pravatar.cc/150?img=64'\n            />\n            <Avatar\n                role='avatar-5 '\n                alt='image 5'\n                initials='IR'\n                src='https://i.pravatar.cc/150?img=65'\n            />\n        </AvatarGroup>\n    )\n}\n",
    "type": "docs"
  },
  "media/carousel-options-demo": {
    "component": "@/components/docs/media/carousel-options-demo",
    "raw": "import { Card, Carousel } from '@/components/ui'\n\nexport default function CarouselOptionsDemo() {\n    return (\n        <Carousel\n            opts={{\n                align: 'center',\n                loop: true\n            }}\n            className='w-full max-w-2xl'\n        >\n            <Carousel.Content\n                items={Array.from({ length: 16 }, (_, id) => ({ id: id + 1 }))}\n            >\n                {({ id }) => (\n                    <Carousel.Item id={id} className='basis-1/2 lg:basis-1/3'>\n                        <Card className='flex aspect-square items-center justify-center'>\n                            <Card.Title>{id}</Card.Title>\n                        </Card>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n\n            <Carousel.Handler>\n                <Carousel.Button slot='previous' />\n                <Carousel.Button slot='next' />\n            </Carousel.Handler>\n        </Carousel>\n    )\n}\n",
    "type": "docs"
  },
  "media/avatar-size-demo": {
    "component": "@/components/docs/media/avatar-size-demo",
    "raw": "import { Avatar } from '@/components/ui'\n\nexport default function AvatarSizeDemo() {\n    return (\n        <div className='flex gap-4'>\n            <Avatar size='sm' src='https://github.com/dq-alhq.png' />\n            <Avatar size='md' src='https://github.com/dq-alhq.png' />\n            <Avatar size='lg' src='https://github.com/dq-alhq.png' />\n            <Avatar size='xl' src='https://github.com/dq-alhq.png' />\n            <Avatar size='2xl' src='https://github.com/dq-alhq.png' />\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "media/carousel-orientation-demo": {
    "component": "@/components/docs/media/carousel-orientation-demo",
    "raw": "'use client'\n\nimport { Card, Carousel } from '@/components/ui'\n\nexport default function CarouselOrientationDemo() {\n    return (\n        <Carousel orientation='vertical' className='w-full relative max-w-xs'>\n            <Carousel.Content items={items} className='h-64 py-4 snap-y'>\n                {(item) => (\n                    <Carousel.Item className='pt-1 basis-1/2 md:basis-1/3 snap-center'>\n                        <Card>\n                            <Card.Header>\n                                <Card.Title>{item.title}</Card.Title>\n                                <Card.Description>{item.description}</Card.Description>\n                            </Card.Header>\n                        </Card>\n                    </Carousel.Item>\n                )}\n            </Carousel.Content>\n\n            <Carousel.Handler>\n                <Carousel.Button slot='previous' />\n                <Carousel.Button slot='next' />\n            </Carousel.Handler>\n        </Carousel>\n    )\n}\n\nconst items = [\n    {\n        id: 1,\n        title: 'Vintage Leather Jacket',\n        description: 'Classic brown leather jacket, perfect for a stylish retro look.'\n    },\n    {\n        id: 2,\n        title: 'Wireless Bluetooth Headphones',\n        description:\n            'Experience high-quality sound with these comfortable, noise-canceling headphones.'\n    },\n    {\n        id: 3,\n        title: 'Organic Cotton T-Shirt',\n        description: 'Soft and eco-friendly t-shirt made from 100% organic cotton.'\n    },\n    {\n        id: 4,\n        title: 'Stainless Steel Water Bottle',\n        description:\n            'Keep your drinks cold or hot with this durable, insulated water bottle.'\n    },\n    {\n        id: 5,\n        title: 'Running Shoes',\n        description: 'Lightweight and comfortable shoes designed for optimal performance.'\n    },\n    {\n        id: 6,\n        title: 'Smartwatch',\n        description: 'Stay connected and track your fitness with this sleek smartwatch.'\n    },\n    {\n        id: 7,\n        title: 'Portable Charger',\n        description: 'Never run out of battery with this high-capacity portable charger.'\n    },\n    {\n        id: 8,\n        title: 'Noise-Canceling Earbuds',\n        description: 'Compact and powerful earbuds that block out unwanted noise.'\n    },\n    {\n        id: 9,\n        title: 'Yoga Mat',\n        description: 'Non-slip, cushioned yoga mat for a comfortable workout experience.'\n    },\n    {\n        id: 10,\n        title: 'LED Desk Lamp',\n        description: 'Bright and energy-efficient LED lamp with adjustable brightness.'\n    }\n]\n",
    "type": "docs"
  },
  "media/avatar-demo": {
    "component": "@/components/docs/media/avatar-demo",
    "raw": "import { Avatar } from '@/components/ui'\n\nexport default function AvatarDemo() {\n    return <Avatar src='https://github.com/dq-alhq.png' />\n}\n",
    "type": "docs"
  },
  "overlays/tooltip-placement-demo": {
    "component": "@/components/docs/overlays/tooltip-placement-demo",
    "raw": "'use client'\n\nimport { type TooltipProps } from 'react-aria-components'\n\nimport { Button, Tooltip } from '@/components/ui'\n\ntype Placement = Pick<TooltipProps, 'placement'>['placement']\nconst placements: Placement[] = ['bottom', 'top', 'left', 'start', 'right', 'end']\nexport default function TooltipPlacementDemo() {\n    return (\n        <div className='grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-2 w-full'>\n            {placements.map((placement, idx) => (\n                <Tooltip key={idx}>\n                    <Button className='mx-auto' size='sm' variant='outline'>\n                        {placement}\n                    </Button>\n                    <Tooltip.Content placement={placement}>\n                        Tooltip shown at <strong>{placement}</strong>.\n                    </Tooltip.Content>\n                </Tooltip>\n            ))}\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/tooltip-delay-demo": {
    "component": "@/components/docs/overlays/tooltip-delay-demo",
    "raw": "'use client'\n\nimport { IconBrandGithub } from 'cleon-icons'\n\nimport { buttonVariants, Tooltip } from '@/components/ui'\n\nexport default function TooltipDelayDemo() {\n    return (\n        <div className='flex gap-2'>\n            <Tooltip delay={0}>\n                <Tooltip.Trigger\n                    aria-label='Follow My Twitter'\n                    className={buttonVariants({\n                        variant: 'outline',\n                        size: 'icon'\n                    })}\n                >\n                    <IconBrandGithub />\n                </Tooltip.Trigger>\n                <Tooltip.Content>Follow me on Github @dq-alhq</Tooltip.Content>\n            </Tooltip>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/modal-size-demo": {
    "component": "@/components/docs/overlays/modal-size-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { Button, Grid, Modal, type ModalContentProps } from '@/components/ui'\n\ntype Size = Pick<ModalContentProps, 'size'>['size']\nconst sizes: Size[] = ['xs', 'sm', 'md', 'lg', 'xl', '2xl', '3xl', '4xl', '5xl']\n\nexport default function ModalSizeDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    const [modalSize, setModalSize] = React.useState<Size>('md')\n\n    const handlePress = (size: Size, open: boolean) => {\n        setModalSize(size)\n        setIsOpen(open)\n    }\n    return (\n        <>\n            <Grid columns={{ initial: 2, sm: 3, lg: 4 }} gap={2}>\n                {sizes.map((size, idx) => (\n                    <Grid.Item key={idx}>\n                        <Button variant='outline' onPress={() => handlePress(size, true)}>\n                            {size}\n                        </Button>\n                    </Grid.Item>\n                ))}\n            </Grid>\n\n            <Modal.Content isOpen={isOpen} onOpenChange={setIsOpen} size={modalSize}>\n                <Modal.Header>\n                    <Modal.Title>Project Update</Modal.Title>\n                    <Modal.Description>\n                        Dive deep into our project’s latest updates where we've\n                        streamlined workflow and improved user interfaces.\n                    </Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Button variant='outline' onPress={() => setIsOpen(false)}>\n                        Close\n                    </Button>\n                    <Button onPress={() => setIsOpen(false)}>Confirm</Button>\n                </Modal.Footer>\n            </Modal.Content>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/sheet-demo": {
    "component": "@/components/docs/overlays/sheet-demo",
    "raw": "'use client'\n\nimport React, { useState } from 'react'\n\nimport { titleCase } from 'usemods'\n\nimport { OptionPreview } from '@/components/docs/outside/option-preview'\nimport { Button, Sheet, Switch } from '@/components/ui'\n\ntype Side = 'left' | 'right' | 'top' | 'bottom'\nexport default function SheetDemo() {\n    const [sheetSide, setSheetSide] = React.useState<Side>('left')\n    const [isOpen, setIsOpen] = React.useState(false)\n\n    const [settings, setSettings] = useState({\n        closeButton: true,\n        isStack: true\n    })\n\n    const sides: Side[] = ['left', 'right', 'top', 'bottom']\n\n    const pressHandler = (side: Side, open: boolean) => {\n        setSheetSide(side)\n        setIsOpen(open)\n    }\n\n    return (\n        <>\n            <OptionPreview>\n                <Switch\n                    defaultSelected={settings.isStack}\n                    onChange={() =>\n                        setSettings({ ...settings, isStack: !settings.isStack })\n                    }\n                >\n                    Toggle stack\n                </Switch>\n                <Switch\n                    defaultSelected={settings.closeButton}\n                    onChange={() =>\n                        setSettings({ ...settings, closeButton: !settings.closeButton })\n                    }\n                >\n                    With x button\n                </Switch>\n            </OptionPreview>\n            <div className='grid grid-cols-2 gap-2'>\n                {sides.map((side, idx) => (\n                    <Button\n                        variant='outline'\n                        onPress={() => pressHandler(side, true)}\n                        key={idx}\n                    >\n                        {titleCase(side)}\n                    </Button>\n                ))}\n            </div>\n            <Sheet.Content\n                isOpen={isOpen}\n                onOpenChange={setIsOpen}\n                closeButton={settings.closeButton}\n                isStack={settings.isStack}\n                side={sheetSide}\n            >\n                <Sheet.Header>\n                    <Sheet.Title>{titleCase(sheetSide)}</Sheet.Title>\n                    <Sheet.Description>\n                        The sheet will go from {sheetSide} side.\n                    </Sheet.Description>\n                </Sheet.Header>\n            </Sheet.Content>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/drawer-with-footer-demo": {
    "component": "@/components/docs/overlays/drawer-with-footer-demo",
    "raw": "'use client'\n\nimport { buttonVariants, Drawer } from '@/components/ui'\n\nexport default function DrawerBasicDemo() {\n    return (\n        <Drawer>\n            <Drawer.Trigger className={buttonVariants({ variant: 'outline' })}>\n                Open Drawer\n            </Drawer.Trigger>\n            <Drawer.Content>\n                <Drawer.Header>\n                    <Drawer.Title>Next Js</Drawer.Title>\n                </Drawer.Header>\n                <Drawer.Body>\n                    Next.js is an open-source web development framework created by the\n                    private company Vercel providing React-based web applications with\n                    server-side rendering and static website generation. React\n                    documentation mentions Next.js among \"Recommended Toolchains\" advising\n                    it to developers when \"building a server-rendered website with\n                    Node.js\". Where traditional React apps can only render their content\n                    in the client-side browser, Next.js extends this functionality to\n                    include applications rendered on the server-side. The copyright and\n                    trademarks for Next.js are owned by Vercel, which also maintains and\n                    leads its open-source development.\n                </Drawer.Body>\n                <Drawer.Footer>\n                    <Drawer.Close>Close</Drawer.Close>\n                </Drawer.Footer>\n            </Drawer.Content>\n        </Drawer>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/modal-controlled-demo": {
    "component": "@/components/docs/overlays/modal-controlled-demo",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { Button, Modal } from '@/components/ui'\n\nexport default function ModalControlledDemo() {\n    const [open, setOpen] = useState(false)\n    return (\n        <>\n            <Button onPress={() => setOpen(true)} variant='danger'>\n                Delete Again!\n            </Button>\n            <Modal.Content isOpen={open} onOpenChange={setOpen}>\n                <Modal.Header>\n                    <Modal.Title>Delete file</Modal.Title>\n                    <Modal.Description>\n                        This will permanently delete the selected file. Are you absolutely\n                        sure?\n                    </Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Modal.Close>Cancel</Modal.Close>\n                    <Button onPress={() => setOpen(false)} variant='danger'>\n                        Yes, Delete it!\n                    </Button>\n                </Modal.Footer>\n            </Modal.Content>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/popover-custom-close-demo": {
    "component": "@/components/docs/overlays/popover-custom-close-demo",
    "raw": "'use client'\n\nimport {\n    Button,\n    buttonVariants,\n    Checkbox,\n    Form,\n    Link,\n    Popover,\n    TextField\n} from '@/components/ui'\n\nexport default function PopoverCustomCloseDemo() {\n    return (\n        <Popover>\n            <Button>Login</Button>\n            <Popover.Content className='sm:min-w-96'>\n                <Popover.Header className='mb-4'>\n                    <Popover.Title>Login</Popover.Title>\n                    <Popover.Description>\n                        Enter your credentials to sign in.\n                    </Popover.Description>\n                </Popover.Header>\n                <Form onSubmit={() => {}}>\n                    <Popover.Body>\n                        <div className='space-y-4'>\n                            <TextField\n                                isRequired\n                                type='email'\n                                label='Email'\n                                placeholder='Enter your email'\n                            />\n                            <TextField\n                                isRequired\n                                label='Password'\n                                type='password'\n                                placeholder='Enter your password'\n                            />\n                            <div className='flex justify-between items-center'>\n                                <Checkbox name='remember-me'>Remember me</Checkbox>\n                                <Link className={buttonVariants()} href='#'>\n                                    Forgot password?\n                                </Link>\n                            </div>\n                        </div>\n                    </Popover.Body>\n                    <Popover.Footer>\n                        <Popover.Close>Cancel</Popover.Close>\n                        <Button type='submit'>Login</Button>\n                    </Popover.Footer>\n                </Form>\n            </Popover.Content>\n        </Popover>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/sheet-basic-demo": {
    "component": "@/components/docs/overlays/sheet-basic-demo",
    "raw": "'use client'\n\nimport { Button, Sheet } from '@/components/ui'\n\nexport default function SheetBasicDemo() {\n    return (\n        <Sheet>\n            <Button variant='outline'>Open sheet</Button>\n            <Sheet.Content>\n                <Sheet.Header>\n                    <Sheet.Title>Sheet. Title</Sheet.Title>\n                    <Sheet.Description>Sheet. Description</Sheet.Description>\n                </Sheet.Header>\n                Sheet. Body\n                <Sheet.Footer>Sheet. Footer</Sheet.Footer>\n            </Sheet.Content>\n        </Sheet>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/modal-sticky-demo": {
    "component": "@/components/docs/overlays/modal-sticky-demo",
    "raw": "'use client'\n\nimport { Button, Modal } from '@/components/ui'\n\nexport default function ModalStickyDemo() {\n    return (\n        <Modal>\n            <Button>Read</Button>\n            <Modal.Content>\n                <Modal.Header>\n                    <Modal.Title>Terms of Use</Modal.Title>\n                    <Modal.Description>\n                        If you do not agree to these terms, please refrain from using our\n                        services.\n                    </Modal.Description>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className='prose dark:prose-invert prose-zinc'>\n                        <p>\n                            Welcome to our Terms of Use. By accessing or using our\n                            services, you agree to be bound by these terms. If you do not\n                            agree to these terms, please refrain from using our services.\n                        </p>\n                        <h3> User Obligations</h3>\n                        <h4>Account Responsibility</h4>\n                        <p>\n                            When you create an account with us, you are responsible for\n                            maintaining the confidentiality of your account and password.\n                        </p>\n                        <p>\n                            You agree to accept responsibility for all activities that\n                            occur under your account. You must notify us immediately of\n                            any breach of security or unauthorized use of your account.\n                        </p>\n                        <h4>Compliance with Laws</h4>\n                        <p>\n                            You agree to comply with all applicable laws, regulations, and\n                            policies in connection with your use of our services. This\n                            includes adhering to intellectual property laws and refraining\n                            from any unlawful behavior while using our platform.\n                        </p>\n                        <h3> Prohibited Activities</h3>\n                        <p>\n                            You are not permitted to access or attempt to access any of\n                            our services by any means other than through the interface\n                            provided by us. Any form of hacking, bypassing, or\n                            circumventing our security protocols is strictly prohibited.\n                        </p>\n                        <h4>Misuse of Content</h4>\n                        <p>\n                            You agree not to misuse, reproduce, distribute, or modify any\n                            content from our services unless explicitly authorized by us.\n                            This includes engaging in activities such as scraping, data\n                            mining, or using automated systems to extract data.\n                        </p>\n                        <h4>Harassment and Abuse</h4>\n                        <p>\n                            You are prohibited from using our services to harass, abuse,\n                            or harm other users. This includes sending unsolicited\n                            messages, stalking, or engaging in any form of cyberbullying.\n                            We reserve the right to terminate accounts found in violation\n                            of this policy.\n                        </p>\n                        <h4>Ownership of Content</h4>\n                        <p>\n                            All content, trademarks, service marks, logos, and other\n                            intellectual property displayed on our services are the\n                            property of their respective owners. You may not use, copy, or\n                            distribute any content without prior written permission from\n                            the owner.\n                        </p>\n                        <h4>User-Generated Content</h4>\n                        <p>\n                            By submitting content to our services, you grant us a\n                            worldwide, royalty-free, non-exclusive license to use,\n                            distribute, modify, and display that content for the purpose\n                            of providing our services.\n                        </p>\n                        <p>\n                            You retain all ownership rights to your content but agree to\n                            allow us to use it in accordance with these terms.\n                        </p>\n                        <h3> Termination</h3>\n                        <h4>Right to Terminate</h4>\n                        We reserve the right to terminate or suspend your access to our\n                        services at any time, without notice, for any reason, including\n                        but not limited to a breach of these terms. Upon termination, your\n                        right to use our services will immediately cease.\n                        <h4>Effect of Termination</h4>\n                        Upon termination of your account, all provisions of these terms\n                        that, by their nature, should survive termination shall remain in\n                        effect. This includes, but is not limited to, ownership\n                        provisions, warranty disclaimers, and limitations of liability.\n                        <h3> Limitation of Liability</h3>\n                        <h4>Service Availability</h4>\n                        We do not guarantee that our services will be available at all\n                        times or without interruption. We are not liable for any downtime\n                        or technical issues that may prevent access to our services.\n                        <h4>No Warranties</h4>\n                        Our services are provided \"as is\" and \"as available\" without any\n                        warranties of any kind, whether express or implied. We do not\n                        warrant that our services will meet your requirements or that they\n                        will be error-free or secure.\n                        <h4>Limitation of Damages</h4>\n                        In no event shall we be liable for any indirect, incidental,\n                        special, consequential, or punitive damages arising out of or\n                        related to your use of our services. This includes, but is not\n                        limited to, damages for loss of profits, data, or other\n                        intangibles.\n                        <h3> Changes to These Terms</h3>\n                        We reserve the right to modify or replace these terms at any time.\n                        If a revision is material, we will provide at least 30 days'\n                        notice prior to any new terms taking effect. What constitutes a\n                        material change will be determined at our sole discretion.\n                        <h3> Governing Law</h3>\n                        These terms shall be governed and construed in accordance with the\n                        laws of [Your Jurisdiction], without regard to its conflict of law\n                        provisions. Any disputes arising from or relating to these terms\n                        shall be resolved in the courts of [Your Jurisdiction].\n                        <h3> Contact Information</h3>\n                        If you have any questions about these terms, please contact us at\n                        [Your Contact Information].\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Modal.Close>Close</Modal.Close>\n                    <Button>Accept</Button>\n                </Modal.Footer>\n            </Modal.Content>\n        </Modal>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/popover-controlled-demo": {
    "component": "@/components/docs/overlays/popover-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconCircleCheck, IconLoader2, IconTrash } from 'cleon-icons'\n\nimport { Button, Popover } from '@/components/ui'\nimport { wait } from '@/lib/utils'\n\nexport default function PopoverControlledDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    const [loading, setLoading] = React.useState<'idle' | 'loading' | 'success'>('idle')\n    const triggerRef = React.useRef(null)\n\n    const deleteAccount = async () => {\n        setLoading('loading')\n        await wait(3000)\n        setLoading('success')\n\n        await wait(2000)\n        setLoading('idle')\n        setIsOpen(false)\n    }\n    return (\n        <>\n            <Button ref={triggerRef} onPress={() => setIsOpen(true)} variant='danger'>\n                Delete Account\n            </Button>\n            <Popover.Content\n                triggerRef={triggerRef}\n                isOpen={isOpen}\n                onOpenChange={setIsOpen}\n                className='sm:max-w-sm'\n            >\n                <Popover.Header>\n                    <Popover.Title>Confirm Deletion</Popover.Title>\n                    <Popover.Description>\n                        Are you sure you want to delete your account? This action cannot\n                        be undone.\n                    </Popover.Description>\n                </Popover.Header>\n                <Popover.Footer className='flex justify-end'>\n                    <Button\n                        variant='outline'\n                        onPress={() => setIsOpen(false)}\n                        className='mr-2'\n                    >\n                        Cancel\n                    </Button>\n                    <Button\n                        isDisabled={loading === 'loading'}\n                        onPress={deleteAccount}\n                        variant={\n                            ['loading', 'idle'].includes(loading) ? 'danger' : 'success'\n                        }\n                    >\n                        {loading === 'loading' ? (\n                            <>\n                                <IconLoader2 className='animate-spin' />\n                                Deleting...\n                            </>\n                        ) : loading === 'success' ? (\n                            <>\n                                <IconCircleCheck />\n                                Deleted\n                            </>\n                        ) : (\n                            <>\n                                <IconTrash />\n                                Delete\n                            </>\n                        )}\n                    </Button>\n                </Popover.Footer>\n            </Popover.Content>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/popover-demo": {
    "component": "@/components/docs/overlays/popover-demo",
    "raw": "'use client'\n\nimport { Button, Popover } from '@/components/ui'\n\nexport default function PopoverDemo() {\n    return (\n        <Popover>\n            <Button variant='outline'>Forgot Password</Button>\n            <Popover.Content>\n                <Popover.Header>\n                    <Popover.Title>Email</Popover.Title>\n                    <Popover.Description>\n                        We'll send you an email to log in.\n                    </Popover.Description>\n                </Popover.Header>\n                <Popover.Footer>\n                    <Button>Send Login Link</Button>\n                </Popover.Footer>\n            </Popover.Content>\n        </Popover>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/popover-placement-demo": {
    "component": "@/components/docs/overlays/popover-placement-demo",
    "raw": "'use client'\n\nimport { type TooltipProps } from 'react-aria-components'\n\nimport { Button, Popover } from '@/components/ui'\n\ntype Placement = Pick<TooltipProps, 'placement'>['placement']\nconst placements: Placement[] = ['bottom', 'top', 'left', 'start', 'right', 'end']\nexport default function PopoverPlacementDemo() {\n    return (\n        <div className='grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-2 w- full'>\n            {placements.map((placement, idx) => (\n                <Popover key={idx}>\n                    <Button className='mx-auto' size='sm' variant='outline'>\n                        {placement}\n                    </Button>\n                    <Popover.Content placement={placement}>\n                        Popover shown at <strong>{placement}</strong>.\n                    </Popover.Content>\n                </Popover>\n            ))}\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/sheet-controlled-demo": {
    "component": "@/components/docs/overlays/sheet-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Sheet } from '@/components/ui'\n\nexport default function SheetControlledDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    return (\n        <>\n            <Button onPress={() => setIsOpen(true)}>Profile</Button>\n            <Sheet.Content isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Sheet.Header>\n                    <Sheet.Title>User Profile</Sheet.Title>\n                    <Sheet.Description>\n                        Manage your profile settings and preferences.\n                    </Sheet.Description>\n                </Sheet.Header>\n                <div className='overflow-y-auto min-h-[calc(var(--visual-viewport-height)-11.5rem)]'>\n                    This is where you can update your username, email, and other personal\n                    details.\n                </div>\n                <Sheet.Footer>\n                    <Button variant='outline' onPress={() => setIsOpen(false)}>\n                        Close\n                    </Button>\n                    <Button>Save Changes</Button>\n                </Sheet.Footer>\n            </Sheet.Content>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/sheet-stack-demo": {
    "component": "@/components/docs/overlays/sheet-stack-demo",
    "raw": "'use client'\n\nimport { Button, Sheet } from '@/components/ui'\n\nexport default function SheetStackDemo() {\n    return (\n        <Sheet>\n            <Button variant='outline'>Stack</Button>\n            <Sheet.Content isStack={false}></Sheet.Content>\n        </Sheet>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/popover-trigger-demo": {
    "component": "@/components/docs/overlays/popover-trigger-demo",
    "raw": "'use client'\n\nimport { Avatar, Button, Popover } from '@/components/ui'\n\nexport default function PopoverTriggerDemo() {\n    return (\n        <Popover>\n            <Popover.Trigger>\n                <Avatar src='https://github.com/dq-alhq.png' />\n            </Popover.Trigger>\n            <Popover.Content className='min-w-72'>\n                <Popover.Header>\n                    <Popover.Title>Email</Popover.Title>\n                    <Popover.Description>\n                        We'll send you an email to log in.\n                    </Popover.Description>\n                </Popover.Header>\n                <Popover.Footer>\n                    <Button>Send Login Link</Button>\n                </Popover.Footer>\n            </Popover.Content>\n        </Popover>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/alert-dialog-demo": {
    "component": "@/components/docs/overlays/alert-dialog-demo",
    "raw": "'use client'\n\nimport { buttonVariants, Modal } from '@/components/ui'\n\nexport default function AlertDialogDemo() {\n    return (\n        <Modal>\n            <Modal.Trigger className={buttonVariants({ variant: 'danger' })}>\n                Delete\n            </Modal.Trigger>\n            <Modal.Content role='alertdialog'>\n                <Modal.Header>\n                    <Modal.Title>Delete file</Modal.Title>\n                    <Modal.Description>\n                        This will permanently delete the selected file. Continue?\n                    </Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Modal.Close variant='outline'>Cancel</Modal.Close>\n                    <Modal.Close variant='danger'>Continue</Modal.Close>\n                </Modal.Footer>\n            </Modal.Content>\n        </Modal>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/modal-triggered-by-menu-demo": {
    "component": "@/components/docs/overlays/modal-triggered-by-menu-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconDotsVertical, IconLoader } from 'cleon-icons'\n\nimport { Button, buttonVariants, Menu, Modal } from '@/components/ui'\nimport { wait } from '@/lib/utils'\n\nexport default function ModalTriggeredByMenuDemo() {\n    const [state, setState] = React.useState<string | null>(null)\n    const [loading, setLoading] = React.useState<boolean>(false)\n    const closeModal = () => setState(null)\n    const executeAction = (action: string) => {\n        console.log(`${action} is executing`)\n        setLoading(true)\n        wait(200).then(() => {\n            setLoading(false)\n            closeModal()\n        })\n    }\n\n    const actionType = (t: string | null) => {\n        switch (t) {\n            case 'delete':\n                return {\n                    title: 'Delete User',\n                    description: 'Are you sure you want to delete this item?',\n                    confirmText: 'Delete',\n                    action: () => executeAction(t)\n                }\n\n            case 'ban':\n                return {\n                    title: 'Ban User',\n                    description: 'Are you sure you want to ban this user?',\n                    confirmText: 'Ban',\n                    action: () => executeAction(t)\n                }\n\n            case 'restore':\n                return {\n                    title: 'Restore User',\n                    description: 'Are you sure you want to restore this user?',\n                    confirmText: 'Restore',\n                    action: () => executeAction(t)\n                }\n            default:\n                return\n        }\n    }\n    return (\n        <>\n            <Menu>\n                <Menu.Trigger\n                    className={buttonVariants({ variant: 'outline', size: 'icon' })}\n                >\n                    <IconDotsVertical />\n                </Menu.Trigger>\n                <Menu.Content placement='bottom'>\n                    <Menu.Item isDanger onAction={() => setState('delete')}>\n                        Delete\n                    </Menu.Item>\n                    <Menu.Item onAction={() => setState('ban')}>Ban</Menu.Item>\n                    <Menu.Item onAction={() => setState('restore')}>Restore</Menu.Item>\n                </Menu.Content>\n            </Menu>\n\n            <Modal.Content isOpen={state !== null} onOpenChange={closeModal}>\n                <Modal.Header>\n                    <Modal.Title>{actionType(state)?.title}</Modal.Title>\n                    <Modal.Description>\n                        {actionType(state)?.description}\n                    </Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Modal.Close>Cancel</Modal.Close>\n                    <Button\n                        className='min-w-24'\n                        isDisabled={loading}\n                        onPress={actionType(state)?.action}\n                        variant={\n                            actionType(state)?.confirmText === 'Restore'\n                                ? 'primary'\n                                : 'danger'\n                        }\n                    >\n                        {loading ? (\n                            <IconLoader className={'animate-spin'} />\n                        ) : (\n                            actionType(state)?.confirmText\n                        )}\n                    </Button>\n                </Modal.Footer>\n            </Modal.Content>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/tooltip-demo": {
    "component": "@/components/docs/overlays/tooltip-demo",
    "raw": "'use client'\n\nimport { IconBrandFacebook, IconBrandGithub } from 'cleon-icons'\n\nimport { buttonVariants, Tooltip } from '@/components/ui'\n\nexport default function TooltipDemo() {\n    return (\n        <div className='flex gap-2'>\n            <Tooltip>\n                <Tooltip.Trigger\n                    aria-label='Add My Facebook'\n                    className={buttonVariants({\n                        variant: 'outline',\n                        size: 'icon'\n                    })}\n                >\n                    <IconBrandFacebook className='h-4 w-4' />\n                </Tooltip.Trigger>\n                <Tooltip.Content>Add me on Facebook @DiqiNahdliyan</Tooltip.Content>\n            </Tooltip>\n            <Tooltip>\n                <Tooltip.Trigger\n                    aria-label='Follow My Github'\n                    className={buttonVariants({\n                        variant: 'outline',\n                        size: 'icon'\n                    })}\n                >\n                    <IconBrandGithub className='h-4 w-4' />\n                </Tooltip.Trigger>\n                <Tooltip.Content>Follow me on Github @dq-alhq</Tooltip.Content>\n            </Tooltip>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/popover-arrow-demo": {
    "component": "@/components/docs/overlays/popover-arrow-demo",
    "raw": "'use client'\n\nimport { IconBell } from 'cleon-icons'\n\nimport { Button, Popover } from '@/components/ui'\n\nexport default function PopoverArrowDemo() {\n    return (\n        <Popover>\n            <Button variant='outline' size='icon'>\n                <IconBell />\n            </Button>\n            <Popover.Content showArrow={false} className='min-w-72'>\n                You have 3 new notifications.\n            </Popover.Content>\n        </Popover>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/sheet-sticky-demo": {
    "component": "@/components/docs/overlays/sheet-sticky-demo",
    "raw": "'use client'\n\nimport { Button, Sheet } from '@/components/ui'\n\nexport default function SheetStickyDemo() {\n    return (\n        <Sheet>\n            <Button>Read</Button>\n            <Sheet.Content>\n                <Sheet.Header>\n                    <Sheet.Title>Terms of Use</Sheet.Title>\n                    <Sheet.Description>\n                        If you do not agree to these terms, please refrain from using our\n                        services.\n                    </Sheet.Description>\n                </Sheet.Header>\n                <Sheet.Body>\n                    <div className='prose dark:prose-invert prose-zinc'>\n                        <p>\n                            Welcome to our Terms of Use. By accessing or using our\n                            services, you agree to be bound by these terms. If you do not\n                            agree to these terms, please refrain from using our services.\n                        </p>\n                        <h3> User Obligations</h3>\n                        <h4>Account Responsibility</h4>\n                        <p>\n                            When you create an account with us, you are responsible for\n                            maintaining the confidentiality of your account and password.\n                        </p>{' '}\n                        <p>\n                            You agree to accept responsibility for all activities that\n                            occur under your account. You must notify us immediately of\n                            any breach of security or unauthorized use of your account.\n                        </p>\n                        <h4>Compliance with Laws</h4>\n                        <p>\n                            You agree to comply with all applicable laws, regulations, and\n                            policies in connection with your use of our services. This\n                            includes adhering to intellectual property laws and refraining\n                            from any unlawful behavior while using our platform.\n                        </p>\n                        <h3> Prohibited Activities</h3>\n                        <p>\n                            You are not permitted to access or attempt to access any of\n                            our services by any means other than through the interface\n                            provided by us. Any form of hacking, bypassing, or\n                            circumventing our security protocols is strictly prohibited.\n                        </p>\n                        <h4>Misuse of Content</h4>\n                        <p>\n                            You agree not to misuse, reproduce, distribute, or modify any\n                            content from our services unless explicitly authorized by us.\n                            This includes engaging in activities such as scraping, data\n                            mining, or using automated systems to extract data.\n                        </p>\n                        <h4>Harassment and Abuse</h4>\n                        <p>\n                            You are prohibited from using our services to harass, abuse,\n                            or harm other users. This includes sending unsolicited\n                            messages, stalking, or engaging in any form of cyberbullying.\n                            We reserve the right to terminate accounts found in violation\n                            of this policy.\n                        </p>\n                        <h4>Ownership of Content</h4>\n                        <p>\n                            All content, trademarks, service marks, logos, and other\n                            intellectual property displayed on our services are the\n                            property of their respective owners. You may not use, copy, or\n                            distribute any content without prior written permission from\n                            the owner.\n                        </p>\n                        <h4>User-Generated Content</h4>\n                        <p>\n                            By submitting content to our services, you grant us a\n                            worldwide, royalty-free, non-exclusive license to use,\n                            distribute, modify, and display that content for the purpose\n                            of providing our services.\n                        </p>\n                        <p>\n                            You retain all ownership rights to your content but agree to\n                            allow us to use it in accordance with these terms.\n                        </p>\n                        <h3> Termination</h3>\n                        <h4>Right to Terminate</h4>\n                        We reserve the right to terminate or suspend your access to our\n                        services at any time, without notice, for any reason, including\n                        but not limited to a breach of these terms. Upon termination, your\n                        right to use our services will immediately cease.\n                        <h4>Effect of Termination</h4>\n                        Upon termination of your account, all provisions of these terms\n                        that, by their nature, should survive termination shall remain in\n                        effect. This includes, but is not limited to, ownership\n                        provisions, warranty disclaimers, and limitations of liability.\n                        <h3> Limitation of Liability</h3>\n                        <h4>Service Availability</h4>\n                        We do not guarantee that our services will be available at all\n                        times or without interruption. We are not liable for any downtime\n                        or technical issues that may prevent access to our services.\n                        <h4>No Warranties</h4>\n                        Our services are provided \"as is\" and \"as available\" without any\n                        warranties of any kind, whether express or implied. We do not\n                        warrant that our services will meet your requirements or that they\n                        will be error-free or secure.\n                        <h4>Limitation of Damages</h4>\n                        In no event shall we be liable for any indirect, incidental,\n                        special, consequential, or punitive damages arising out of or\n                        related to your use of our services. This includes, but is not\n                        limited to, damages for loss of profits, data, or other\n                        intangibles.\n                        <h3> Changes to These Terms</h3>\n                        We reserve the right to modify or replace these terms at any time.\n                        If a revision is material, we will provide at least 30 days'\n                        notice prior to any new terms taking effect. What constitutes a\n                        material change will be determined at our sole discretion.\n                        <h3> Governing Law</h3>\n                        These terms shall be governed and construed in accordance with the\n                        laws of [Your Jurisdiction], without regard to its conflict of law\n                        provisions. Any disputes arising from or relating to these terms\n                        shall be resolved in the courts of [Your Jurisdiction].\n                        <h3> Contact Information</h3>\n                        If you have any questions about these terms, please contact us at\n                        [Your Contact Information].\n                    </div>\n                </Sheet.Body>\n                <Sheet.Footer>\n                    <Sheet.Close>Close</Sheet.Close>\n                    <Button>Accept</Button>\n                </Sheet.Footer>\n            </Sheet.Content>\n        </Sheet>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/sheet-menu-demo": {
    "component": "@/components/docs/overlays/sheet-menu-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    IconBook,\n    IconBook2,\n    IconBrandGithub,\n    IconBrandGithubCopilot,\n    IconBuilding,\n    IconChartBar,\n    IconCircle,\n    IconCode,\n    IconFilter,\n    IconHeart,\n    IconLogout,\n    IconMessages,\n    IconSettings2,\n    IconStar,\n    IconUser,\n    IconUsers\n} from 'cleon-icons'\nimport { Group, Menu as PrimitiveMenu } from 'react-aria-components'\n\nimport {\n    Avatar,\n    Button,\n    Checkbox,\n    Description,\n    Menu,\n    Modal,\n    Select,\n    Sheet,\n    TextField\n} from '@/components/ui'\n\nexport default function SheetMenuDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n\n    const openModal = () => setIsOpen(true)\n    const closeModal = () => setIsOpen(false)\n    return (\n        <>\n            <Modal isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Modal.Trigger className='sr-only'>Open Modal</Modal.Trigger>\n                <Modal.Content>\n                    <Modal.Header>\n                        <Modal.Title>Edit status</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div className='space-y-4'>\n                            <TextField\n                                prefix={<IconBrandGithub className='size-4' />}\n                                label='Status'\n                                placeholder=\"What's your status?\"\n                            />\n                            <Group>\n                                <Checkbox>Busy</Checkbox>\n                                <Description>\n                                    When others mention you, assign you, or request your\n                                    review, GitHub will let them know that you have\n                                    limited availability.\n                                </Description>\n                            </Group>\n                            <Select label='Clear Status'>\n                                <Select.Item>Never</Select.Item>\n                                <Select.Item>in 30 Minutes</Select.Item>\n                                <Select.Item>in 1 Hour</Select.Item>\n                                <Select.Item>in 8 Hours</Select.Item>\n                                <Select.Item>after Today</Select.Item>\n                                <Select.Item>after a Week</Select.Item>\n                                <Select.Item>after a Month</Select.Item>\n                            </Select>\n                            <Select label='Visible to'>\n                                <Select.Item>Everyone</Select.Item>\n                                <Select.Item>Organization</Select.Item>\n                                <Select.Item>Public</Select.Item>\n                            </Select>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Modal.Close>Clear Status</Modal.Close>\n                        <Button onPress={closeModal}>Set Status</Button>\n                    </Modal.Footer>\n                </Modal.Content>\n            </Modal>\n            <Sheet>\n                <Sheet.Trigger aria-labelledby='open' aria-label='Open menu'>\n                    <Avatar initials='DQ' alt='DQ' src='https://github.com/dq-alhq.png' />\n                </Sheet.Trigger>\n                <Sheet.Content closeButton={false}>\n                    <Sheet.Header className='mb-2 flex flex-row items-center gap-x-3'>\n                        <Avatar\n                            initials='DQ'\n                            alt='DQ'\n                            src='https://github.com/dq-alhq.png'\n                        />\n                        <div>\n                            <Sheet.Title>Diqi Al-Haqqi</Sheet.Title>\n                            <Sheet.Description>@dq-alhq</Sheet.Description>\n                        </div>\n                    </Sheet.Header>\n                    <PrimitiveMenu aria-labelledby='Sheet'>\n                        <Menu.Item onAction={openModal}>\n                            <IconBrandGithub className='size-4' />\n                            Edit Status\n                        </Menu.Item>\n                        <Menu.Separator />\n                        <Menu.Section>\n                            <Menu.Item>\n                                <IconUser />\n                                Your profile\n                            </Menu.Item>\n                            <Menu.Item>\n                                <IconBook /> Your repositories\n                            </Menu.Item>\n                            <Menu.Item>\n                                <IconBrandGithubCopilot /> Your Copilot\n                            </Menu.Item>\n                            <Menu.Item>\n                                <IconChartBar /> Your projects\n                            </Menu.Item>\n                            <Menu.Item>\n                                <IconStar /> Your stars\n                            </Menu.Item>\n                            <Menu.Item>\n                                <IconCode /> Your gists\n                            </Menu.Item>\n                            <Menu.Item>\n                                <IconBuilding /> Your organizations\n                            </Menu.Item>\n                            <Menu.Item>\n                                <IconCircle /> Your enterprises\n                            </Menu.Item>\n                            <Menu.Item>\n                                <IconHeart />\n                                Your sponsors\n                            </Menu.Item>\n                        </Menu.Section>\n                        <Menu.Section>\n                            <Menu.Item>\n                                <IconFilter /> Feature preview\n                            </Menu.Item>\n                            <Menu.Item>\n                                <IconSettings2 />\n                                Settings\n                            </Menu.Item>\n                        </Menu.Section>\n                        <Menu.Section>\n                            <Menu.Item>\n                                <IconBook2 /> GitHub Docs\n                            </Menu.Item>\n                            <Menu.Item>\n                                <IconUsers /> GitHub Support\n                            </Menu.Item>\n                            <Menu.Item>\n                                <IconMessages /> GitHub Community\n                            </Menu.Item>\n                        </Menu.Section>\n                        <Menu.Section>\n                            <Menu.Item>\n                                <IconLogout /> Sign out\n                            </Menu.Item>\n                        </Menu.Section>\n                    </PrimitiveMenu>\n                </Sheet.Content>\n            </Sheet>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/drawer-basic-demo": {
    "component": "@/components/docs/overlays/drawer-basic-demo",
    "raw": "'use client'\n\nimport { buttonVariants, Drawer } from '@/components/ui'\n\nexport default function DrawerBasicDemo() {\n    return (\n        <Drawer>\n            <Drawer.Trigger className={buttonVariants({ variant: 'outline' })}>\n                Click Me!\n            </Drawer.Trigger>\n            <Drawer.Content>\n                <Drawer.Header>\n                    <Drawer.Title>Next Js</Drawer.Title>\n                    <Drawer.Description>\n                        Next.js is an open-source web development framework created by the\n                        private company Vercel providing React-based web applications with\n                        server-side rendering and static website generation. React\n                        documentation mentions Next.js among \"Recommended Toolchains\"\n                        advising it to developers when \"building a server-rendered website\n                        with Node.js\". Where traditional React apps can only render their\n                        content in the client-side browser, Next.js extends this\n                        functionality to include applications rendered on the server-side.\n                        The copyright and trademarks for Next.js are owned by Vercel,\n                        which also maintains and leads its open-source development.\n                    </Drawer.Description>\n                </Drawer.Header>\n            </Drawer.Content>\n        </Drawer>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/sheet-custom-close-demo": {
    "component": "@/components/docs/overlays/sheet-custom-close-demo",
    "raw": "'use client'\n\nimport { Button, Sheet } from '@/components/ui'\n\nexport default function SheetControlledDemo() {\n    return (\n        <Sheet>\n            <Button variant='outline'>Notifications</Button>\n            <Sheet.Content>\n                <Sheet.Footer>\n                    <Sheet.Close>Dismiss</Sheet.Close>\n                    <Button>Save Preferences</Button>\n                </Sheet.Footer>\n            </Sheet.Content>\n        </Sheet>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/modal-nested-demo": {
    "component": "@/components/docs/overlays/modal-nested-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { toast } from 'sonner'\n\nimport { Button, Form, Modal, Textarea } from '@/components/ui'\n\nexport default function ModalNestedDemo() {\n    const [firstModalOpen, setFirstModalOpen] = React.useState(false)\n    const [secondModalOpen, setSecondModalOpen] = React.useState(false)\n    const [isTyping, setIsTyping] = React.useState(false)\n\n    return (\n        <>\n            <Button onPress={() => setFirstModalOpen(true)}>Register</Button>\n\n            <Modal.Content\n                isOpen={firstModalOpen}\n                onOpenChange={() => setFirstModalOpen(false)}\n                aria-label='Confirm Registration'\n            >\n                <Modal.Header>\n                    <Modal.Title>Confirm Registration</Modal.Title>\n                    <Modal.Description>\n                        Please confirm your registration details.\n                    </Modal.Description>\n                </Modal.Header>\n                <Modal.Footer>\n                    <Modal.Close>Cancel</Modal.Close>\n                    <Button\n                        onPress={() => {\n                            setSecondModalOpen(true)\n                        }}\n                    >\n                        Confirm\n                    </Button>\n                </Modal.Footer>\n            </Modal.Content>\n\n            <Modal.Content\n                isOpen={secondModalOpen}\n                onOpenChange={(isOpen) => {\n                    if (!isOpen && isTyping) {\n                        toast('Profile setup incomplete')\n                    }\n                    setSecondModalOpen(isOpen)\n                }}\n                aria-label='Profile Setup'\n            >\n                <Modal.Header>\n                    <Modal.Title>Set Up Your Profile</Modal.Title>\n                    <Modal.Description>\n                        We need a bit more information before you can get started.\n                    </Modal.Description>\n                </Modal.Header>\n                <Form\n                    onSubmit={(e) => {\n                        e.preventDefault()\n                        toast.success('Profile setup complete')\n                        setSecondModalOpen(false)\n                        setFirstModalOpen(false)\n                    }}\n                >\n                    <Modal.Body className='space-y-4'>\n                        <Textarea\n                            isRequired\n                            label='Bio'\n                            placeholder='Tell us something about yourself'\n                            onInput={() => setIsTyping(true)}\n                        />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Modal.Close>Skip for now</Modal.Close>\n                        <Button type='submit'>Complete Setup</Button>\n                    </Modal.Footer>\n                </Form>\n            </Modal.Content>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/modal-demo": {
    "component": "@/components/docs/overlays/modal-demo",
    "raw": "'use client'\n\nimport { Button, Form, Modal, TextField } from '@/components/ui'\n\nexport default function ModalDemo() {\n    return (\n        <Modal>\n            <Button>Turn on 2FA</Button>\n            <Modal.Content>\n                <Modal.Header>\n                    <Modal.Title>Nice! Let's beef up your account.</Modal.Title>\n                    <Modal.Description>\n                        2FA beefs up your account's defense. Pop in your password to keep\n                        going.\n                    </Modal.Description>\n                </Modal.Header>\n                <Form onSubmit={() => {}}>\n                    <TextField\n                        isRequired\n                        label='Password'\n                        type='password'\n                        placeholder='Enter your password'\n                    />\n                    <Modal.Footer className='pt-4'>\n                        <Modal.Close>Cancel</Modal.Close>\n                        <Button type='submit'>Turn on 2FA</Button>\n                    </Modal.Footer>\n                </Form>\n            </Modal.Content>\n        </Modal>\n    )\n}\n",
    "type": "docs"
  },
  "overlays/drawer-controlled-demo": {
    "component": "@/components/docs/overlays/drawer-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { Button, Drawer } from '@/components/ui'\n\nexport default function DrawerBasicDemo() {\n    const [isOpen, setIsOpen] = React.useState(false)\n    return (\n        <>\n            <Button onPress={() => setIsOpen(!isOpen)} variant='outline'>\n                Open Drawer\n            </Button>\n            <Drawer isOpen={isOpen} onOpenChange={setIsOpen}>\n                <Drawer.Content>\n                    <Drawer.Header>\n                        <Drawer.Title>Next Js</Drawer.Title>\n                    </Drawer.Header>\n                    <Drawer.Body>\n                        Next.js is an open-source web development framework created by the\n                        private company Vercel providing React-based web applications with\n                        server-side rendering and static website generation. React\n                        documentation mentions Next.js among \"Recommended Toolchains\"\n                        advising it to developers when \"building a server-rendered website\n                        with Node.js\". Where traditional React apps can only render their\n                        content in the client-side browser, Next.js extends this\n                        functionality to include applications rendered on the server-side.\n                        The copyright and trademarks for Next.js are owned by Vercel,\n                        which also maintains and leads its open-source development.\n                    </Drawer.Body>\n                    <Drawer.Footer>\n                        <Drawer.Close>Close</Drawer.Close>\n                    </Drawer.Footer>\n                </Drawer.Content>\n            </Drawer>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "surfaces/card-demo": {
    "component": "@/components/docs/surfaces/card-demo",
    "raw": "'use client'\n\nimport { Button, Card } from '@/components/ui'\n\nexport default function CardDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Teerakat UI</Card.Title>\n                <Card.Description>UI Library for your react project</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                Make beautiful websites regardless of your design experience.\n            </Card.Content>\n            <Card.Footer>\n                <Button>View Details</Button>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "surfaces/card-login-form-demo": {
    "component": "@/components/docs/surfaces/card-login-form-demo",
    "raw": "'use client'\n\nimport { Button, Card, Checkbox, Form, Link, TextField } from '@/components/ui'\n\nexport default function CardLoginFormDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Login</Card.Title>\n                <Card.Description>Use your email and password to login</Card.Description>\n            </Card.Header>\n            <Form action={() => {}}>\n                <Card.Content className='space-y-6'>\n                    <TextField isRequired label='Email' placeholder='Enter your email' />\n                    <TextField\n                        isRequired\n                        label='Password'\n                        type='password'\n                        placeholder='Enter your password'\n                    />\n                    <div className='flex items-center justify-between'>\n                        <Checkbox>Remember me</Checkbox>\n                        <Link href='#' className='text-sm text-muted-foreground'>\n                            Forgot password?\n                        </Link>\n                    </div>\n                </Card.Content>\n                <Card.Footer>\n                    <Button type='submit'>Login</Button>\n                </Card.Footer>\n            </Form>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "surfaces/card-table-demo": {
    "component": "@/components/docs/surfaces/card-table-demo",
    "raw": "'use client'\n\nimport { IconDotsVertical, IconEye, IconPencil, IconTrash } from 'cleon-icons'\n\nimport { Card, Menu, Pagination, Table } from '@/components/ui'\n\nconst users = [\n    {\n        id: 1,\n        name: 'John Doe',\n        gender: 'Male',\n        age: 30,\n        occupation: 'Software Engineer'\n    },\n    {\n        id: 2,\n        name: 'Jane Smith',\n        gender: 'Female',\n        age: 25,\n        occupation: 'Marketing Manager'\n    },\n    {\n        id: 3,\n        name: 'Bob Johnson',\n        gender: 'Male',\n        age: 40,\n        occupation: 'Doctor'\n    },\n    {\n        id: 4,\n        name: 'Emily Chen',\n        gender: 'Female',\n        age: 28,\n        occupation: 'Teacher'\n    },\n    {\n        id: 5,\n        name: 'Michael Brown',\n        gender: 'Male',\n        age: 35,\n        occupation: 'Lawyer'\n    },\n    {\n        id: 6,\n        name: 'Sarah Lee',\n        gender: 'Female',\n        age: 32,\n        occupation: 'Designer'\n    },\n    {\n        id: 7,\n        name: 'Kevin White',\n        gender: 'Male',\n        age: 45,\n        occupation: 'CEO'\n    },\n    {\n        id: 8,\n        name: 'Lisa Nguyen',\n        gender: 'Female',\n        age: 29,\n        occupation: 'Engineer'\n    },\n    {\n        id: 9,\n        name: 'David Kim',\n        gender: 'Male',\n        age: 38,\n        occupation: 'Consultant'\n    },\n    {\n        id: 10,\n        name: 'Hannah Patel',\n        gender: 'Female',\n        age: 26,\n        occupation: 'Writer'\n    }\n]\n\nexport default function CardTableDemo() {\n    return (\n        <Card>\n            <Card.Header>\n                <Card.Title>Users</Card.Title>\n                <Card.Description>Manage users, groups, and roles.</Card.Description>\n            </Card.Header>\n            <Card.Content>\n                <Table aria-label='users'>\n                    <Table.Header>\n                        <Table.Column>#</Table.Column>\n                        <Table.Column isRowHeader>Name</Table.Column>\n                        <Table.Column>Genre</Table.Column>\n                        <Table.Column>Age</Table.Column>\n                        <Table.Column>Occupation</Table.Column>\n                        <Table.Column />\n                    </Table.Header>\n                    <Table.Body items={users}>\n                        {(item) => (\n                            <Table.Row key={item.id}>\n                                <Table.Cell>{item.id}</Table.Cell>\n                                <Table.Cell>{item.name}</Table.Cell>\n                                <Table.Cell>{item.gender}</Table.Cell>\n                                <Table.Cell>{item.age}</Table.Cell>\n                                <Table.Cell>{item.occupation}</Table.Cell>\n                                <Table.Cell className='flex justify-end'>\n                                    <Menu>\n                                        <Menu.Trigger>\n                                            <IconDotsVertical className='size-4' />\n                                        </Menu.Trigger>\n                                        <Menu.Content showArrow placement='left'>\n                                            <Menu.Item>\n                                                <IconEye /> View\n                                            </Menu.Item>\n                                            <Menu.Item>\n                                                <IconPencil /> Edit\n                                            </Menu.Item>\n                                            <Menu.Separator />\n                                            <Menu.Item isDanger>\n                                                <IconTrash /> Delete\n                                            </Menu.Item>\n                                        </Menu.Content>\n                                    </Menu>\n                                </Table.Cell>\n                            </Table.Row>\n                        )}\n                    </Table.Body>\n                </Table>\n            </Card.Content>\n            <Card.Footer>\n                <Pagination>\n                    <Pagination.List>\n                        <Pagination.Item role='first' href='#' />\n                        <Pagination.Item role='previous' href='#' />\n                        <Pagination.Item href='#'>1</Pagination.Item>\n                        <Pagination.Item href='#' isCurrent>\n                            2\n                        </Pagination.Item>\n                        <Pagination.Item role='ellipsis' />\n                        <Pagination.Item role='next' href='#' />\n                        <Pagination.Item role='last' href='#' />\n                    </Pagination.List>\n                </Pagination>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "docs"
  },
  "surfaces/show-more-orientation-demo": {
    "component": "@/components/docs/surfaces/show-more-orientation-demo",
    "raw": "'use client'\n\nimport { ShowMore } from '@/components/ui'\n\nexport default function ShowMoreOrientationDemo() {\n    return <ShowMore orientation='vertical' as='text' text='Or' className='h-56' />\n}\n",
    "type": "docs"
  },
  "surfaces/show-more-as-text-demo": {
    "component": "@/components/docs/surfaces/show-more-as-text-demo",
    "raw": "'use client'\n\nimport { ShowMore } from '@/components/ui'\n\nexport default function ShowMoreAsTextDemo() {\n    return (\n        <div className='py-6'>\n            <ShowMore as='text' text='Or continue with' />\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "surfaces/grid-responsive-demo": {
    "component": "@/components/docs/surfaces/grid-responsive-demo",
    "raw": "import { Grid } from '@/components/ui'\n\nexport default function GridResponsiveDemo() {\n    return (\n        <Grid\n            columns={{\n                initial: 3,\n                sm: 4,\n                md: 5,\n                xl: 6\n            }}\n            gap={{\n                initial: 2,\n                sm: 3,\n                lg: 4\n            }}\n        >\n            <Grid.Item>\n                <div className='p-4 border h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-32' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-32' />\n            </Grid.Item>\n        </Grid>\n    )\n}\n",
    "type": "docs"
  },
  "surfaces/grid-gap-demo": {
    "component": "@/components/docs/surfaces/grid-gap-demo",
    "raw": "import { Grid } from '@/components/ui'\n\nexport default function GridGapDemo() {\n    return (\n        <Grid\n            columns={{\n                initial: 4,\n                sm: 5,\n                md: 6\n            }}\n            gap={{\n                initial: 2,\n                sm: 4\n            }}\n        >\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n        </Grid>\n    )\n}\n",
    "type": "docs"
  },
  "surfaces/show-more-demo": {
    "component": "@/components/docs/surfaces/show-more-demo",
    "raw": "'use client'\n\nimport { IconChevronDown } from 'cleon-icons'\n\nimport { ShowMore } from '@/components/ui'\nimport { cn } from '@/lib/utils'\n\nexport default function ShowMoreDemo() {\n    return (\n        <div className='py-6'>\n            <ShowMore>\n                {({ isSelected }) => (\n                    <>\n                        Show {isSelected ? 'less' : 'more'}\n                        <IconChevronDown\n                            className={cn(\n                                isSelected ? 'rotate-180' : '',\n                                'size-4 transition-transform duration-200'\n                            )}\n                        />\n                    </>\n                )}\n            </ShowMore>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "surfaces/grid-collections-demo": {
    "component": "@/components/docs/surfaces/grid-collections-demo",
    "raw": "'use client'\n\nimport { Card, Grid } from '@/components/ui'\n\nexport default function GridCollectionDemo() {\n    return (\n        <Grid\n            aria-label='List articles'\n            columns={{ initial: 1, sm: 2, '2xl': 3 }}\n            gap={2}\n        >\n            <Grid.Collection items={articles}>\n                {(item) => (\n                    <Grid.Item>\n                        <Card>\n                            <Card.Header>\n                                <Card.Title>{item.title}</Card.Title>\n                                <Card.Description>{item.description}</Card.Description>\n                            </Card.Header>\n                        </Card>\n                    </Grid.Item>\n                )}\n            </Grid.Collection>\n        </Grid>\n    )\n}\n\nconst articles = [\n    {\n        id: 1,\n        title: 'Understanding React Hooks',\n        description:\n            \"Get the lowdown on React Hooks, how to use 'em, and best practices for those sleek functional components.\"\n    },\n    {\n        id: 2,\n        title: 'Mastering TypeScript',\n        description:\n            'Dive deep into TypeScript, from basic stuff to pro features, for building rock-solid apps.'\n    },\n    {\n        id: 3,\n        title: 'Laravel Eloquent Tips',\n        description:\n            'Check out advanced tricks for using Laravel Eloquent ORM to make your database game strong.'\n    },\n    {\n        id: 4,\n        title: 'Building with Next.js',\n        description:\n            'A full-on tutorial on creating server-rendered React apps with the Next.js framework.'\n    },\n    {\n        id: 5,\n        title: 'Inertia.js for Full-Stack Devs',\n        description:\n            'Learn how Inertia.js smooths out the gap between client-side frameworks and server-side apps.'\n    },\n    {\n        id: 6,\n        title: 'Optimizing Web Performance',\n        description:\n            'Tips and tricks to boost the performance and speed of your web apps.'\n    }\n]\n",
    "type": "docs"
  },
  "surfaces/grid-debug-demo": {
    "component": "@/components/docs/surfaces/grid-debug-demo",
    "raw": "import { Grid } from '@/components/ui'\n\nexport default function GridDebugDemo() {\n    return (\n        <Grid debug columns={3} gap={4}>\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n            <Grid.Item className='w-full h-24' />\n        </Grid>\n    )\n}\n",
    "type": "docs"
  },
  "surfaces/grid-item-demo": {
    "component": "@/components/docs/surfaces/grid-item-demo",
    "raw": "import { Grid } from '@/components/ui'\n\nexport default function GridItemDemo() {\n    return (\n        <Grid debug columns={3} gap={4}>\n            <Grid.Item\n                colSpan={{\n                    initial: 1,\n                    sm: 2\n                }}\n                className='w-full h-24 grid place-content-center'\n            >\n                1\n            </Grid.Item>\n            <Grid.Item className='w-full h-24 grid place-content-center'>2</Grid.Item>\n            <Grid.Item\n                colSpan={{\n                    initial: 1,\n                    sm: 3\n                }}\n                className='w-full h-24 grid place-content-center'\n            >\n                3\n            </Grid.Item>\n        </Grid>\n    )\n}\n",
    "type": "docs"
  },
  "surfaces/show-more-content-reveal-demo": {
    "component": "@/components/docs/surfaces/show-more-content-reveal-demo",
    "raw": "'use client'\n\nimport Image from 'next/image'\n\nimport { ContentReveal } from '@/components/ui'\n\nexport default function ShowMoreContentRevealDemo() {\n    return (\n        <ContentReveal>\n            <Image\n                className='rounded-xl'\n                src='https://picsum.photos/1920/1080'\n                alt='Image'\n                width={1920}\n                height={1080}\n            />\n        </ContentReveal>\n    )\n}\n",
    "type": "docs"
  },
  "surfaces/grid-gap-x-y-demo": {
    "component": "@/components/docs/surfaces/grid-gap-x-y-demo",
    "raw": "import { Grid } from '@/components/ui'\n\nexport default function GridGapXYDemo() {\n    return (\n        <Grid\n            columns={{\n                initial: 3,\n                sm: 4,\n                md: 6\n            }}\n            gapX={{\n                initial: 2,\n                sm: 4\n            }}\n            gapY={{\n                initial: 4,\n                sm: 6\n            }}\n        >\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n            <Grid.Item>\n                <div className='p-4 border h-24' />\n            </Grid.Item>\n        </Grid>\n    )\n}\n",
    "type": "docs"
  },
  "surfaces/show-more-content-reveal-initial-demo": {
    "component": "@/components/docs/surfaces/show-more-content-reveal-initial-demo",
    "raw": "'use client'\n\nimport Image from 'next/image'\n\nimport { ContentReveal } from '@/components/ui'\n\nexport default function ShowMoreContentRevealDemo() {\n    return (\n        <ContentReveal\n            initialHeight={0}\n            initialOpacity={0}\n            showMoreText='Reveal'\n            showLessText='Hide'\n        >\n            <Image\n                className='rounded-xl'\n                src='https://picsum.photos/1920/1080'\n                alt='Image'\n                width={1920}\n                height={1080}\n            />\n        </ContentReveal>\n    )\n}\n",
    "type": "docs"
  },
  "surfaces/show-more-controlled-demo": {
    "component": "@/components/docs/surfaces/show-more-controlled-demo",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconChevronDown } from 'cleon-icons'\n\nimport { ShowMore } from '@/components/ui'\n\nexport default function ShowMoreControlledDemo() {\n    const [isExpanded, setIsExpanded] = React.useState(false)\n    return (\n        <div className='py-6'>\n            <ShowMore onChange={setIsExpanded} isSelected={isExpanded}>\n                {isExpanded ? 'Expand' : 'Collapse'}\n                <IconChevronDown\n                    className={`${isExpanded ? 'rotate-180' : ''} size-4 transition-transform duration-200`}\n                />\n            </ShowMore>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "surfaces/grid-basic-demo": {
    "component": "@/components/docs/surfaces/grid-basic-demo",
    "raw": "import { Grid } from '@/components/ui'\n\nexport default function GridBasicDemo() {\n    return (\n        <div>\n            <Grid columns={6}>\n                <Grid.Item>\n                    <div className='p-4 border-l border-y h-32' />\n                </Grid.Item>\n                <Grid.Item>\n                    <div className='p-4 border-l border-y h-32' />\n                </Grid.Item>\n                <Grid.Item>\n                    <div className='p-4 border-l border-y h-32' />\n                </Grid.Item>\n                <Grid.Item>\n                    <div className='p-4 border-l border-y h-32' />\n                </Grid.Item>\n                <Grid.Item>\n                    <div className='p-4 border-l border-y h-32' />\n                </Grid.Item>\n                <Grid.Item>\n                    <div className='p-4 border-l border-y h-32 border-r' />\n                </Grid.Item>\n            </Grid>\n        </div>\n    )\n}\n",
    "type": "docs"
  },
  "pickers/multi-select-controlled-demo": {
    "component": "@/components/docs/pickers/multi-select-controlled-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport { Description, MultiSelect, Tag, type SelectedKey } from '@/components/ui'\n\nconst tags = [\n    { id: 1, textValue: 'Travel' },\n    { id: 2, textValue: 'Food' },\n    { id: 3, textValue: 'Fashion' },\n    { id: 4, textValue: 'Music' },\n    { id: 5, textValue: 'Photography' }\n]\n\nexport default function MultiSelectControlledDemo() {\n    const selectedList = useListData<SelectedKey>({\n        initialItems: []\n    })\n\n    return (\n        <>\n            <MultiSelect\n                className='max-w-xs'\n                onItemAdd={(key) => console.log('onItemAdd', key)}\n                onItemRemove={(key) => console.log('onItemRemove', key)}\n                label='Select tags'\n                selectedList={selectedList}\n                items={tags}\n                tag={(item) => <Tag textValue={item.textValue}>{item.textValue}</Tag>}\n            >\n                {(item) => {\n                    return (\n                        <MultiSelect.Item id={item.id} textValue={item.textValue}>\n                            {item.textValue}\n                        </MultiSelect.Item>\n                    )\n                }}\n            </MultiSelect>\n            {selectedList.items.length > 0 && (\n                <Description className='mt-2 max-w-xs block [&>strong]:text-fg text-muted-fg'>\n                    You have selected:{' '}\n                    <strong>\n                        {selectedList.items.map((item) => item.textValue).join(', ')}\n                    </strong>\n                </Description>\n            )}\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "pickers/multi-select-min-max-demo": {
    "component": "@/components/docs/pickers/multi-select-min-max-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport { MultiSelect, Tag, type SelectedKey } from '@/components/ui'\n\nconst tags = [\n    { id: 1, textValue: 'Cooking' },\n    { id: 2, textValue: 'Gardening' },\n    { id: 3, textValue: 'Meditation' },\n    { id: 4, textValue: 'Parenting' },\n    { id: 5, textValue: 'DIY Projects' },\n    { id: 6, textValue: 'Mindfulness' },\n    { id: 7, textValue: 'Travel Tips' },\n    { id: 8, textValue: 'Pet Care' },\n    { id: 9, textValue: 'Home Decor' },\n    { id: 10, textValue: 'Sustainable Living' }\n]\n\nexport default function MultipleSelectMinMaxDemo() {\n    const selectedList = useListData<SelectedKey>({\n        initialItems: [tags[0]]\n    })\n    return (\n        <MultiSelect\n            className='max-w-xs'\n            label='Select tags'\n            description='You can select up to 4 tags'\n            max={4}\n            selectedList={selectedList}\n            items={tags}\n            tag={(item) => <Tag textValue={item.textValue}>{item.textValue}</Tag>}\n        >\n            {(item) => {\n                return (\n                    <MultiSelect.Item textValue={item.textValue}>\n                        {item.textValue}\n                    </MultiSelect.Item>\n                )\n            }}\n        </MultiSelect>\n    )\n}\n",
    "type": "docs"
  },
  "pickers/select-item-details-demo": {
    "component": "@/components/docs/pickers/select-item-details-demo",
    "raw": "'use client'\n\nimport { Select } from '@/components/ui'\n\nexport default function SelectItemDetailsDemo() {\n    return (\n        <Select label='Roles' placeholder='Select a role' items={roles}>\n            {(item) => (\n                <Select.Item id={item.id} textValue={item.name}>\n                    <Select.ItemDetails\n                        label={item.name}\n                        description={item.description}\n                    />\n                </Select.Item>\n            )}\n        </Select>\n    )\n}\n\nconst roles = [\n    { id: 1, name: 'Admin', description: 'Has full access to all resources' },\n    {\n        id: 2,\n        name: 'Editor',\n        description: 'Can edit content but has limited access to settings'\n    },\n    { id: 3, name: 'Viewer', description: 'Can view content but cannot make changes' },\n    { id: 4, name: 'Contributor', description: 'Can contribute content for review' },\n    { id: 5, name: 'Guest', description: 'Limited access, mostly for viewing purposes' }\n]\n",
    "type": "docs"
  },
  "pickers/multi-select-demo": {
    "component": "@/components/docs/pickers/multi-select-demo",
    "raw": "'use client'\n\nimport { useListData } from 'react-stately'\n\nimport { MultiSelect, Tag, type SelectedKey } from '@/components/ui'\n\nexport default function MultiSelectDemo() {\n    const selectedList = useListData<SelectedKey>({\n        initialItems: [fruits[0]]\n    })\n    return (\n        <MultiSelect\n            className='max-w-xs'\n            label='Fruits'\n            selectedList={selectedList}\n            items={fruits}\n            tag={(item) => <Tag textValue={item.textValue}>{item.textValue}</Tag>}\n        >\n            {(item) => {\n                return (\n                    <MultiSelect.Item textValue={item.textValue}>\n                        {item.textValue}\n                    </MultiSelect.Item>\n                )\n            }}\n        </MultiSelect>\n    )\n}\n\nconst fruits: SelectedKey[] = [\n    { id: 1, textValue: 'Apple' },\n    { id: 2, textValue: 'Banana' },\n    { id: 3, textValue: 'Cherry' },\n    { id: 4, textValue: 'Date' },\n    { id: 5, textValue: 'Elderberry' },\n    { id: 6, textValue: 'Fig' },\n    { id: 7, textValue: 'Grape' },\n    { id: 8, textValue: 'Honeydew' },\n    { id: 9, textValue: 'Kiwi' },\n    { id: 10, textValue: 'Lemon' },\n    { id: 11, textValue: 'Mango' },\n    { id: 12, textValue: 'Nectarine' },\n    { id: 13, textValue: 'Orange' },\n    { id: 14, textValue: 'Papaya' },\n    { id: 15, textValue: 'Quince' },\n    { id: 16, textValue: 'Raspberry' },\n    { id: 17, textValue: 'Strawberry' },\n    { id: 18, textValue: 'Tangerine' },\n    { id: 19, textValue: 'Ugli Fruit' },\n    { id: 20, textValue: 'Watermelon' }\n]\n",
    "type": "docs"
  },
  "pickers/combo-box-section-demo": {
    "component": "@/components/docs/pickers/combo-box-section-demo",
    "raw": "'use client'\n\nimport { ComboBox } from '@/components/ui'\n\nexport default function ComboBoxSectionDemo() {\n    return (\n        <ComboBox placeholder='Select a author' label='Authors' items={authors}>\n            {(author) => (\n                <ComboBox.Section title={author.name} items={author.books}>\n                    {(book) => (\n                        <ComboBox.Item textValue={book.name}>{book.name}</ComboBox.Item>\n                    )}\n                </ComboBox.Section>\n            )}\n        </ComboBox>\n    )\n}\n\nconst authors = [\n    {\n        id: 1,\n        name: 'J.K. Rowling',\n        books: [\n            {\n                id: 101,\n                name: \"Harry Potter and the Sorcerer's Stone\"\n            },\n            {\n                id: 102,\n                name: 'Harry Potter and the Chamber of Secrets'\n            },\n            {\n                id: 103,\n                name: 'Harry Potter and the Prisoner of Azkaban'\n            },\n            {\n                id: 104,\n                name: 'Harry Potter and the Goblet of Fire'\n            }\n        ]\n    },\n    {\n        id: 2,\n        name: 'J.R.R. Tolkien',\n        books: [\n            {\n                id: 201,\n                name: 'The Hobbit'\n            },\n            {\n                id: 202,\n                name: 'The Fellowship of the Ring'\n            },\n            {\n                id: 203,\n                name: 'The Two Towers'\n            },\n            {\n                id: 204,\n                name: 'The Return of the King'\n            }\n        ]\n    },\n    {\n        id: 3,\n        name: 'George R.R. Martin',\n        books: [\n            {\n                id: 301,\n                name: 'A Game of Thrones'\n            },\n            {\n                id: 302,\n                name: 'A Clash of Kings'\n            },\n            {\n                id: 303,\n                name: 'A Storm of Swords'\n            },\n            {\n                id: 304,\n                name: 'A Feast for Crows'\n            },\n            {\n                id: 305,\n                name: 'A Dance with Dragons'\n            }\n        ]\n    },\n    {\n        id: 4,\n        name: 'Isaac Asimov',\n        books: [\n            {\n                id: 401,\n                name: 'Foundation'\n            },\n            {\n                id: 402,\n                name: 'Foundation and Empire'\n            },\n            {\n                id: 403,\n                name: 'Second Foundation'\n            }\n        ]\n    },\n    {\n        id: 5,\n        name: 'Agatha Christie',\n        books: [\n            {\n                id: 501,\n                name: 'Murder on the Orient Express'\n            },\n            {\n                id: 502,\n                name: 'And Then There Were None'\n            },\n            {\n                id: 503,\n                name: 'The Murder of Roger Ackroyd'\n            },\n            {\n                id: 504,\n                name: 'The A.B.C. Murders'\n            },\n            {\n                id: 505,\n                name: 'Death on the Nile'\n            },\n            {\n                id: 506,\n                name: 'The Mysterious Affair at Styles'\n            }\n        ]\n    },\n    {\n        id: 6,\n        name: 'Stephen King',\n        books: [\n            {\n                id: 601,\n                name: 'The Shining'\n            },\n            {\n                id: 602,\n                name: 'It'\n            },\n            {\n                id: 603,\n                name: 'The Dark Tower: The Gunslinger'\n            },\n            {\n                id: 604,\n                name: 'Carrie'\n            }\n        ]\n    },\n    {\n        id: 7,\n        name: 'Jane Austen',\n        books: [\n            {\n                id: 701,\n                name: 'Pride and Prejudice'\n            },\n            {\n                id: 702,\n                name: 'Sense and Sensibility'\n            },\n            {\n                id: 703,\n                name: 'Emma'\n            },\n            {\n                id: 704,\n                name: 'Mansfield Park'\n            }\n        ]\n    },\n    {\n        id: 8,\n        name: 'Mark Twain',\n        books: [\n            {\n                id: 801,\n                name: 'The Adventures of Tom Sawyer'\n            },\n            {\n                id: 802,\n                name: 'Adventures of Huckleberry Finn'\n            },\n            {\n                id: 803,\n                name: 'The Prince and the Pauper'\n            }\n        ]\n    },\n    {\n        id: 9,\n        name: 'Charles Dickens',\n        books: [\n            {\n                id: 901,\n                name: 'A Tale of Two Cities'\n            },\n            {\n                id: 902,\n                name: 'Great Expectations'\n            },\n            {\n                id: 903,\n                name: 'Oliver Twist'\n            },\n            {\n                id: 904,\n                name: 'David Copperfield'\n            }\n        ]\n    },\n    {\n        id: 10,\n        name: 'Ernest Hemingway',\n        books: [\n            {\n                id: 1001,\n                name: 'The Old Man and the Sea'\n            },\n            {\n                id: 1002,\n                name: 'A Farewell to Arms'\n            },\n            {\n                id: 1003,\n                name: 'For Whom the Bell Tolls'\n            }\n        ]\n    }\n]\n",
    "type": "docs"
  },
  "pickers/select-invalid-demo": {
    "component": "@/components/docs/pickers/select-invalid-demo",
    "raw": "'use client'\n\nimport { Select } from '@/components/ui'\n\nconst software = [\n    { id: 1, name: 'Adobe Photoshop' }\n    //...\n]\n\nexport default function SelectInvalidDemo() {\n    return (\n        <Select\n            label='Design software'\n            isInvalid\n            placeholder='Select a software'\n            items={software}\n        >\n            {(item) => (\n                <Select.Item id={item.id} textValue={item.name}>\n                    {item.name}\n                </Select.Item>\n            )}\n        </Select>\n    )\n}\n",
    "type": "docs"
  },
  "pickers/combo-box-demo": {
    "component": "@/components/docs/pickers/combo-box-demo",
    "raw": "'use client'\n\nimport { ComboBox } from '@/components/ui'\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n    { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n    { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n    {\n        id: 4,\n        name: 'Ms. Ettie Abshire DVM',\n        image_url: 'https://i.pravatar.cc/150?img=4'\n    },\n    { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n    { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' },\n    {\n        id: 7,\n        name: 'Miss Jacinthe Gerlach DVM',\n        image_url: 'https://i.pravatar.cc/150?img=7'\n    },\n    {\n        id: 8,\n        name: 'Miss Stephania Schaefer Sr.',\n        image_url: 'https://i.pravatar.cc/150?img=8'\n    },\n    { id: 9, name: 'Kevon Hackett MD', image_url: 'https://i.pravatar.cc/150?img=9' },\n    { id: 10, name: 'Tom Ledner', image_url: 'https://i.pravatar.cc/150?img=10' }\n]\n\nexport default function ComboBoxDemo() {\n    return (\n        <ComboBox placeholder='Select a user' label='Users' isRequired items={users}>\n            {(item) => (\n                <ComboBox.Item key={item.id} id={item.id} textValue={item.name}>\n                    {item.name}\n                </ComboBox.Item>\n            )}\n        </ComboBox>\n    )\n}\n",
    "type": "docs"
  },
  "pickers/select-demo": {
    "component": "@/components/docs/pickers/select-demo",
    "raw": "'use client'\n\nimport { Select } from '@/components/ui'\n\nexport const distros = [\n    { id: 1, name: 'Debian' },\n    { id: 2, name: 'Ubuntu' },\n    { id: 3, name: 'Fedora' },\n    { id: 4, name: 'Arch' },\n    { id: 5, name: 'OpenSUSE' },\n    { id: 6, name: 'Red Hat' }\n]\nexport default function SelectDemo() {\n    return (\n        <Select label='Linux Distros' placeholder='Select a linux distro' items={distros}>\n            {(item) => (\n                <Select.Item key={item.id} id={item.id} textValue={item.name}>\n                    {item.name}\n                </Select.Item>\n            )}\n        </Select>\n    )\n}\n",
    "type": "docs"
  },
  "pickers/combo-box-avatar-demo": {
    "component": "@/components/docs/pickers/combo-box-avatar-demo",
    "raw": "'use client'\n\nimport { Avatar, ComboBox } from '@/components/ui'\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' },\n    { id: 2, name: 'Rosemarie Koch', image_url: 'https://i.pravatar.cc/150?img=2' },\n    { id: 3, name: 'Mrs. Reva Heaney Jr.', image_url: 'https://i.pravatar.cc/150?img=3' },\n    {\n        id: 4,\n        name: 'Ms. Ettie Abshire DVM',\n        image_url: 'https://i.pravatar.cc/150?img=4'\n    },\n    { id: 5, name: 'Bria Ziemann', image_url: 'https://i.pravatar.cc/150?img=5' },\n    { id: 6, name: 'Heloise Borer Sr.', image_url: 'https://i.pravatar.cc/150?img=6' },\n    {\n        id: 7,\n        name: 'Miss Jacinthe Gerlach DVM',\n        image_url: 'https://i.pravatar.cc/150?img=7'\n    },\n    {\n        id: 8,\n        name: 'Miss Stephania Schaefer Sr.',\n        image_url: 'https://i.pravatar.cc/150?img=8'\n    },\n    { id: 9, name: 'Kevon Hackett MD', image_url: 'https://i.pravatar.cc/150?img=9' },\n    { id: 10, name: 'Tom Ledner', image_url: 'https://i.pravatar.cc/150?img=10' }\n]\n\nexport default function ComboBoxAvatarDemo() {\n    return (\n        <ComboBox placeholder='Select a user' label='Users' isRequired items={users}>\n            {(item) => (\n                <ComboBox.Item key={item.id} id={item.id} textValue={item.name}>\n                    <Avatar src={item.image_url} />\n                    {item.name}\n                </ComboBox.Item>\n            )}\n        </ComboBox>\n    )\n}\n",
    "type": "docs"
  },
  "pickers/select-disabled-demo": {
    "component": "@/components/docs/pickers/select-disabled-demo",
    "raw": "'use client'\n\nimport { Select } from '@/components/ui'\n\nconst software = [\n    { id: 1, name: 'Adobe Photoshop' }\n    //...\n]\n\nexport default function SelectDisabledDemo() {\n    return (\n        <Select\n            label='Design software'\n            isDisabled\n            placeholder='Select a software'\n            items={software}\n        >\n            {(item) => (\n                <Select.Item id={item.id} textValue={item.name}>\n                    {item.name}\n                </Select.Item>\n            )}\n        </Select>\n    )\n}\n",
    "type": "docs"
  },
  "pickers/combo-box-invalid-demo": {
    "component": "@/components/docs/pickers/combo-box-invalid-demo",
    "raw": "'use client'\n\nimport { Avatar, ComboBox } from '@/components/ui'\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' }\n    //...\n]\nexport default function ComboBoxInvalidDemo() {\n    return (\n        <ComboBox\n            placeholder='Select a user'\n            isInvalid\n            label='Users'\n            isRequired\n            items={users}\n        >\n            {(item) => (\n                <ComboBox.Item key={item.id} id={item.id} textValue={item.name}>\n                    <Avatar src={item.image_url} />\n                    {item.name}\n                </ComboBox.Item>\n            )}\n        </ComboBox>\n    )\n}\n",
    "type": "docs"
  },
  "pickers/select-section-demo": {
    "component": "@/components/docs/pickers/select-section-demo",
    "raw": "'use client'\n\nimport { Select } from '@/components/ui'\n\nexport default function SelectSectionDemo() {\n    return (\n        <Select label='Countries' placeholder='Select a country' items={countries}>\n            {(country) => (\n                <Select.Section title={country.name} items={country.cities}>\n                    {(city) => (\n                        <Select.Item textValue={city.name}>{city.name}</Select.Item>\n                    )}\n                </Select.Section>\n            )}\n        </Select>\n    )\n}\n\nconst countries = [\n    {\n        id: 1,\n        name: 'Egypt',\n        cities: [\n            {\n                id: 101,\n                name: 'Cairo'\n            },\n            {\n                id: 102,\n                name: 'Alexandria'\n            },\n            {\n                id: 103,\n                name: 'Giza'\n            },\n            {\n                id: 104,\n                name: 'Luxor'\n            }\n        ]\n    },\n    {\n        id: 2,\n        name: 'Indonesia',\n        cities: [\n            {\n                id: 201,\n                name: 'Jakarta'\n            },\n            {\n                id: 202,\n                name: 'Bali'\n            },\n            {\n                id: 203,\n                name: 'Surabaya'\n            },\n            {\n                id: 204,\n                name: 'Bandung'\n            },\n            {\n                id: 205,\n                name: 'Medan'\n            }\n        ]\n    },\n    {\n        id: 3,\n        name: 'United States',\n        cities: [\n            {\n                id: 301,\n                name: 'New York City'\n            },\n            {\n                id: 302,\n                name: 'Los Angeles'\n            },\n            {\n                id: 303,\n                name: 'Chicago'\n            },\n            {\n                id: 304,\n                name: 'Houston'\n            }\n        ]\n    },\n    {\n        id: 4,\n        name: 'Canada',\n        cities: [\n            {\n                id: 401,\n                name: 'Toronto'\n            },\n            {\n                id: 402,\n                name: 'Vancouver'\n            },\n            {\n                id: 403,\n                name: 'Montreal'\n            }\n        ]\n    },\n    {\n        id: 5,\n        name: 'Australia',\n        cities: [\n            {\n                id: 501,\n                name: 'Sydney'\n            },\n            {\n                id: 502,\n                name: 'Melbourne'\n            },\n            {\n                id: 503,\n                name: 'Brisbane'\n            }\n        ]\n    },\n    {\n        id: 6,\n        name: 'Germany',\n        cities: [\n            {\n                id: 601,\n                name: 'Berlin'\n            },\n            {\n                id: 602,\n                name: 'Munich'\n            },\n            {\n                id: 603,\n                name: 'Frankfurt'\n            },\n            {\n                id: 604,\n                name: 'Hamburg'\n            }\n        ]\n    },\n    {\n        id: 7,\n        name: 'Japan',\n        cities: [\n            {\n                id: 701,\n                name: 'Tokyo'\n            },\n            {\n                id: 702,\n                name: 'Osaka'\n            },\n            {\n                id: 703,\n                name: 'Kyoto'\n            }\n        ]\n    }\n]\n",
    "type": "docs"
  },
  "pickers/combo-box-readonly-demo": {
    "component": "@/components/docs/pickers/combo-box-readonly-demo",
    "raw": "'use client'\n\nimport { Avatar, ComboBox } from '@/components/ui'\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' }\n    //...\n]\nexport default function ComboBoxReadonlyDemo() {\n    return (\n        <ComboBox placeholder='Select a user' label='Users' isReadOnly items={users}>\n            {(item) => (\n                <ComboBox.Item key={item.id} id={item.id} textValue={item.name}>\n                    <Avatar src={item.image_url} />\n                    {item.name}\n                </ComboBox.Item>\n            )}\n        </ComboBox>\n    )\n}\n",
    "type": "docs"
  },
  "pickers/combo-box-disabled-demo": {
    "component": "@/components/docs/pickers/combo-box-disabled-demo",
    "raw": "'use client'\n\nimport { Avatar, ComboBox } from '@/components/ui'\n\nconst users = [\n    { id: 1, name: 'Barbara Kirlin Sr.', image_url: 'https://i.pravatar.cc/150?img=1' }\n    //...\n]\nexport default function ComboBoxDisabledDemo() {\n    return (\n        <ComboBox\n            placeholder='Select a user'\n            isDisabled\n            label='Users'\n            isRequired\n            items={users}\n        >\n            {(item) => (\n                <ComboBox.Item key={item.id} id={item.id} textValue={item.name}>\n                    <Avatar src={item.image_url} />\n                    {item.name}\n                </ComboBox.Item>\n            )}\n        </ComboBox>\n    )\n}\n",
    "type": "docs"
  },
  "pickers/select-controlled-demo": {
    "component": "@/components/docs/pickers/select-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport type { Key } from 'react-aria-components'\n\nimport { Description, Select } from '@/components/ui'\n\nexport const movies = [\n    { id: 1, title: 'Inception' },\n    { id: 2, title: 'The Dark Knight' },\n    { id: 3, title: 'Interstellar' },\n    { id: 4, title: 'The Matrix' },\n    { id: 5, title: 'Pulp Fiction' }\n]\n\nexport default function SelectControlledDemo() {\n    const [movie, setMovie] = React.useState<Key>('')\n    return (\n        <>\n            <Select\n                selectedKey={movie}\n                onSelectionChange={setMovie}\n                label='Movies'\n                placeholder='Select a movie'\n                items={movies}\n            >\n                {(item) => (\n                    <Select.Item id={item.id} textValue={item.title}>\n                        {item.title}\n                    </Select.Item>\n                )}\n            </Select>\n            <Description className='mt-2 block [&>strong]:text-foreground text-muted-foreground'>\n                You have selected: <strong>{movie}</strong>\n            </Description>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "pickers/combo-box-controlled-demo": {
    "component": "@/components/docs/pickers/combo-box-controlled-demo",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { ComboBox, Description } from '@/components/ui'\n\nconst sports = [\n    { id: 1, name: 'Football' },\n    { id: 2, name: 'Basketball' },\n    { id: 3, name: 'Baseball' },\n    { id: 4, name: 'Soccer' },\n    { id: 5, name: 'Tennis' },\n    { id: 6, name: 'Cricket' },\n    { id: 7, name: 'Hockey' },\n    { id: 8, name: 'Rugby' },\n    { id: 9, name: 'Golf' }\n]\n\nexport default function ComboBoxControlledDemo() {\n    const [sport, setSport] = React.useState('')\n    return (\n        <>\n            <ComboBox\n                onInputChange={setSport}\n                inputValue={sport}\n                placeholder='Select a sports'\n                label='Sports'\n                items={sports}\n            >\n                {(item) => (\n                    <ComboBox.Item key={item.id} id={item.id} textValue={item.name}>\n                        {item.name}\n                    </ComboBox.Item>\n                )}\n            </ComboBox>\n            <Description className='mt-2 block [&>strong]:text-foreground text-muted-foreground'>\n                You have selected: <strong>{sport}</strong>\n            </Description>\n        </>\n    )\n}\n",
    "type": "docs"
  },
  "tag-group": {
    "component": "@/components/ui/tag-group",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    Button,\n    composeRenderProps,\n    TagGroup as TagGroupPrimitive,\n    TagList as TagListPrimitive,\n    Tag as TagPrimitive,\n    type TagGroupProps as TagGroupPrimitiveProps,\n    type TagListProps,\n    type TagProps as TagPrimitiveProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\n\nimport { badgeShapes, badgeStyles, badgeVariants } from './badge'\nimport { Description, Label } from './field'\n\nconst variants = {\n    primary: {\n        base: [\n            badgeVariants.primary,\n            '[&_[slot=remove]:hover]:bg-primary [&_[slot=remove]:hover]:text-primary-foreground'\n        ],\n        selected: [\n            'bg-primaryhover:bg-primary ring-primary ring-inset text-primary-foreground hover:text-primary-foreground',\n            '[&_[slot=remove]:hover]:bg-primary-foreground/80 [&_[slot=remove]:hover]:text-primary'\n        ]\n    },\n    secondary: {\n        base: [\n            badgeVariants.secondary,\n            '[&_[slot=remove]:hover]:bg-foreground [&_[slot=remove]:hover]:text-background'\n        ],\n        selected: [\n            'bg-foreground ring-foreground/50 text-background  ring-inset',\n            '[&_[slot=remove]:hover]:bg-background [&_[slot=remove]:hover]:text-secondary-foreground'\n        ]\n    },\n    success: {\n        base: [\n            badgeVariants.success,\n            '[&_[slot=remove]:hover]:bg-success [&_[slot=remove]:hover]:text-success-foreground'\n        ],\n        selected: [\n            'bg-success ring-success ring-inset hover:bg-success text-success-foreground hover:text-success-foreground',\n            '[&_[slot=remove]:hover]:bg-success-foreground/80 [&_[slot=remove]:hover]:text-success'\n        ]\n    },\n    info: {\n        base: [\n            badgeVariants.info,\n            '[&_[slot=remove]:hover]:bg-info [&_[slot=remove]:hover]:text-background'\n        ],\n        selected: [\n            'bg-info hover:bg-info',\n            '[&_[slot=remove]:hover]:bg-background/80 [&_[slot=remove]:hover]:text-info'\n        ]\n    },\n    warning: {\n        base: badgeVariants.warning,\n        selected:\n            'bg-warning hover:bg-warning text-warning-foreground hover:text-warning-foreground'\n    },\n    danger: {\n        base: badgeVariants.danger,\n        selected:\n            'bg-danger hover:bg-danger text-danger-foreground hover:text-danger-foreground'\n    },\n    dark: {\n        base: [\n            badgeVariants.dark,\n            '[&_[slot=remove]:hover]:bg-foreground [&_[slot=remove]:hover]:text-background'\n        ],\n        selected: [\n            'bg-dark hover:bg-dark text-dark-foreground hover:text-dark-foreground',\n            '[&_[slot=remove]:hover]:bg-foreground [&_[slot=remove]:hover]:text-background'\n        ]\n    }\n}\n\ntype Variant = keyof typeof badgeVariants\n\ntype Shape = keyof typeof badgeShapes\n\ntype TagGroupContextValue = {\n    variant: Variant\n    shape: Shape\n}\n\nconst TagGroupContext = React.createContext<TagGroupContextValue>({\n    variant: 'primary',\n    shape: 'square'\n})\n\nexport interface TagGroupProps extends TagGroupPrimitiveProps {\n    variant?: Variant\n    shape?: 'square' | 'circle'\n    errorMessage?: string\n    label?: string\n    description?: string\n}\n\nconst TagGroup = ({ children, ...props }: TagGroupProps) => {\n    return (\n        <TagGroupPrimitive\n            {...props}\n            className={cn('flex flex-wrap flex-col gap-1', props.className)}\n        >\n            <TagGroupContext.Provider\n                value={{\n                    variant: props.variant || 'primary',\n                    shape: props.shape || 'square'\n                }}\n            >\n                {props.label && <Label>{props.label}</Label>}\n                {children}\n                {props.description && <Description>{props.description}</Description>}\n            </TagGroupContext.Provider>\n        </TagGroupPrimitive>\n    )\n}\n\nconst TagList = <T extends object>(props: TagListProps<T>) => {\n    return (\n        <TagListPrimitive\n            {...props}\n            className={cn('flex flex-wrap gap-2', props.className)}\n        />\n    )\n}\n\nconst tagStyles = tv({\n    base: [badgeStyles.base, 'cursor-pointer'],\n    variants: {\n        isFocused: { true: 'ring-2' },\n        isDisabled: { true: 'opacity-50 cursor-default' },\n        allowsRemoving: { true: 'pr-1' }\n    }\n})\n\ninterface TagProps extends TagPrimitiveProps {\n    variant?: Variant\n    shape?: Shape\n}\n\nconst Tag = ({ children, variant, shape, ...props }: TagProps) => {\n    const textValue = typeof children === 'string' ? children : undefined\n    const groupContext = React.useContext(TagGroupContext)\n\n    return (\n        <TagPrimitive\n            textValue={textValue}\n            {...props}\n            className={composeRenderProps(props.className, (className, renderProps) => {\n                const finalVariant = variant || groupContext.variant\n                const finalShape = shape || groupContext.shape\n\n                return tagStyles({\n                    ...renderProps,\n                    className: cn([\n                        variants[finalVariant].base,\n                        renderProps.isSelected\n                            ? variants[finalVariant].selected\n                            : undefined,\n                        badgeShapes[finalShape]\n                    ])\n                })\n            })}\n        >\n            {({ allowsRemoving }) => {\n                return (\n                    <>\n                        {children}\n                        {allowsRemoving && (\n                            <Button\n                                slot='remove'\n                                className={composeRenderProps(\n                                    '',\n                                    (className, renderProps) => {\n                                        return cn(\n                                            'rounded focus:outline-none size-3.5 grid place-content-center -mr-0.5 focus-visible:ring-1 focus-visible:ring-primary',\n                                            className\n                                        )\n                                    }\n                                )}\n                            >\n                                <span className='rotate-45 text-base/4 -mr-px'>+</span>\n                            </Button>\n                        )}\n                    </>\n                )\n            }}\n        </TagPrimitive>\n    )\n}\n\nexport { Tag, TagGroup, TagList }\n",
    "type": "ui"
  },
  "date-range-picker": {
    "component": "@/components/ui/date-range-picker",
    "raw": "'use client'\n\nimport {\n    DateRangePicker as DateRangePickerPrimitive,\n    type DateRangePickerProps as DateRangePickerPrimitiveProps,\n    type DateValue,\n    type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\n\nimport { DateInput } from './date-field'\nimport { DatePicker } from './date-picker'\nimport { Description, FieldError, FieldGroup, Label } from './field'\n\nconst dateRangePickerStyles = tv({\n    slots: {\n        base: 'group flex flex-col gap-1',\n        dateRangePickerInputStart: 'px-2 lg:text-sm font-mono uppercase text-base',\n        dateRangePickerInputEnd:\n            'flex-1 px-2 py-1.5 font-mono uppercase text-base lg:text-sm',\n        dateRangePickerDash:\n            'text-zinc-800 group-disabled:text-zinc-200 dark:text-zinc-200 group-disabled:dark:text-zinc-600 forced-colors:text-[ButtonText] group-disabled:forced-colors:text-[GrayText]'\n    }\n})\nconst { base, dateRangePickerInputStart, dateRangePickerInputEnd, dateRangePickerDash } =\n    dateRangePickerStyles()\n\ninterface DateRangePickerProps<T extends DateValue>\n    extends DateRangePickerPrimitiveProps<T> {\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst DateRangePicker = <T extends DateValue>({\n    label,\n    className,\n    description,\n    errorMessage,\n    ...props\n}: DateRangePickerProps<T>) => {\n    return (\n        <DateRangePickerPrimitive {...props} className={cn(base(), className)}>\n            {label && <Label>{label}</Label>}\n            <FieldGroup className='w-auto min-w-40'>\n                <DateInput slot='start' className={dateRangePickerInputStart()} />\n                <span aria-hidden='true' className={dateRangePickerDash()}>\n                    –\n                </span>\n                <DateInput slot='end' className={dateRangePickerInputEnd()} />\n                <DatePicker.Icon />\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n            <DatePicker.Overlay range />\n        </DateRangePickerPrimitive>\n    )\n}\n\nexport { DateRangePicker, type DateRangePickerProps }\n",
    "type": "ui"
  },
  "tabs": {
    "component": "@/components/ui/tabs",
    "raw": "'use client'\n\nimport { useId } from 'react'\n\nimport { LayoutGroup, motion } from 'framer-motion'\nimport {\n    composeRenderProps,\n    TabList as TabListPrimitive,\n    type TabListProps,\n    TabPanel as TabPanelPrimitive,\n    type TabPanelProps,\n    Tab as TabPrimitive,\n    type TabProps,\n    Tabs as TabsPrimitive,\n    type TabsProps\n} from 'react-aria-components'\nimport { twJoin } from 'tailwind-merge'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\n\nconst tabsStyles = tv({\n    base: 'group flex gap-4',\n    variants: {\n        orientation: {\n            horizontal: 'flex-col',\n            vertical: 'w-[800px] flex-row'\n        }\n    }\n})\n\nconst Tabs = (props: TabsProps) => {\n    return (\n        <TabsPrimitive\n            {...props}\n            className={composeRenderProps(props.className, (className, renderProps) =>\n                tabsStyles({\n                    ...renderProps,\n                    className\n                })\n            )}\n        />\n    )\n}\n\nconst tabListStyles = tv({\n    base: 'flex',\n    variants: {\n        orientation: {\n            horizontal: 'flex-row gap-x-5 border-b',\n            vertical: 'flex-col items-start gap-y-4 border-l'\n        }\n    }\n})\n\nconst TabList = <T extends object>(props: TabListProps<T>) => {\n    const id = useId()\n    return (\n        <LayoutGroup id={id}>\n            <TabListPrimitive\n                {...props}\n                className={composeRenderProps(props.className, (className, renderProps) =>\n                    tabListStyles({ ...renderProps, className })\n                )}\n            />\n        </LayoutGroup>\n    )\n}\n\nconst tabStyles = tv({\n    base: [\n        'relative flex whitespace-nowrap cursor-default items-center rounded-full text-sm font-medium outline-none transition forced-color-adjust-none hover:text-foreground [&>[data-slot=icon]]:size-4 [&>[data-slot=icon]]:mr-2',\n        // hor\n        'group-orientation-vertical:w-full group-orientation-vertical:py-0 group-orientation-vertical:pl-4 group-orientation-vertical:pr-2',\n        // ver\n        'group-orientation-horizontal:pb-3'\n    ],\n    variants: {\n        isSelected: {\n            false: 'text-muted-foreground',\n            true: 'text-foreground forced-colors:bg-[Highlight] forced-colors:text-[HighlightText]'\n        },\n        isFocused: { false: 'ring-0', true: 'text-foreground' },\n        isDisabled: {\n            true: 'text-muted-foreground/50 forced-colors:text-[GrayText] forced-colors:selected:bg-[GrayText] forced-colors:selected:text-[HighlightText]'\n        }\n    }\n})\n\nconst Tab = ({ children, ...props }: TabProps) => {\n    return (\n        <TabPrimitive\n            {...props}\n            className={composeRenderProps(props.className, (_className, renderProps) =>\n                tabStyles({\n                    ...renderProps,\n                    className: twJoin('href' in props && 'cursor-pointer', _className)\n                })\n            )}\n        >\n            {({ isSelected }) => (\n                <>\n                    {children}\n                    {isSelected && (\n                        <motion.span\n                            className={cn(\n                                'absolute rounded bg-foreground',\n                                // horizontal\n                                'group-orientation-horizontal:inset-x-0 group-orientation-horizontal:-bottom-px group-orientation-horizontal:h-0.5 group-orientation-horizontal:w-full',\n                                // vertical\n                                'group-orientation-vertical:left-0 group-orientation-vertical:h-[calc(100%-10%)] group-orientation-vertical:w-0.5 group-orientation-vertical:transform'\n                            )}\n                            layoutId='current-selected'\n                            transition={{ type: 'spring', stiffness: 500, damping: 40 }}\n                        />\n                    )}\n                </>\n            )}\n        </TabPrimitive>\n    )\n}\n\nconst tabPanelStyles = tv({\n    base: 'flex-1 text-sm text-foreground',\n    variants: {\n        isFocusVisible: {\n            true: 'outline-none'\n        }\n    }\n})\n\nconst TabPanel = (props: TabPanelProps) => {\n    return (\n        <TabPanelPrimitive\n            {...props}\n            className={composeRenderProps(props.className, (className, renderProps) =>\n                tabPanelStyles({ ...renderProps, className })\n            )}\n        />\n    )\n}\n\nTabs.Content = TabPanel\nTabs.Label = Tab\nTabs.List = TabList\n\nexport { Tab, TabList, TabPanel, Tabs }\n",
    "type": "ui"
  },
  "slider": {
    "component": "@/components/ui/slider",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n    composeRenderProps,\n    type LabelProps,\n    SliderOutput as SliderOutputPrimitive,\n    type SliderOutputProps as SliderOutputPrimitiveProps,\n    Slider as SliderPrimitive,\n    type SliderProps as SliderPrimitiveProps,\n    SliderStateContext as SliderStateContextPrimitive,\n    SliderThumb as SliderThumbPrimitive,\n    type SliderThumbProps as SliderThumbPrimitiveProps,\n    SliderTrack as SliderTrackPrimitive,\n    type SliderTrackProps as SliderTrackPrimitiveProps,\n    TextContext as TextContextPrimitive,\n    type TextProps\n} from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { useSlotId } from '@react-aria/utils'\n\nimport { Description, Label } from './field'\n\nconst sliderStyles = tv({\n    slots: {\n        root: 'flex disabled:opacity-50 flex-col gap-2 orientation-horizontal:w-full orientation-vertical:h-56 orientation-vertical:items-center',\n        track: [\n            'relative group/track rounded-full bg-zinc-200 dark:bg-zinc-800 cursor-pointer disabled:cursor-default disabled:bg-bg-disabled',\n            'grow orientation-vertical:flex-1 orientation-vertical:w-1.5 orientation-horizontal:w-full orientation-horizontal:h-1.5'\n        ],\n        filler: [\n            'rounded-full bg-primary group-disabled/track:bg-bg-disabled',\n            'pointer-events-none absolute group-orientation-horizontal/top-0 group-orientation-vertical/track:w-full group-orientation-vertical/track:bottom-0 group-orientation-horizontal/track:h-full'\n        ],\n        thumb: [\n            'outline-none dragging:cursor-grabbing focus:ring-4 border border-zinc-200 focus:ring-primary/20 focus:border-primary focus:outline-none forced-colors:outline-[Highlight]',\n            'rounded-full bg-white transition-[width,height]',\n            'absolute left-[50%] top-[50%] block !-translate-x-1/2 !-translate-y-1/2',\n            'disabled:bg-bg-disabled disabled:border disabled:border-bg',\n            'orientation-vertical:w-2 orientation-horizontal:h-2',\n            'size-[1.15rem] dragging:size-[1.30rem] dragging:border-primary'\n        ],\n        valueLabel: 'text-muted-foreground text-sm'\n    }\n})\n\nconst { track, filler, thumb, root, valueLabel } = sliderStyles()\n\ninterface SliderProps extends SliderRootProps, VariantProps<typeof sliderStyles> {\n    label?: LabelProps['children']\n    description?: TextProps['children']\n    showValue?: boolean | ((value: number[]) => string)\n}\n\nconst Slider = ({ label, description, showValue = true, ...props }: SliderProps) => (\n    <SliderRoot {...props}>\n        <div className='flex items-center justify-between gap-2'>\n            {label && <Label>{label}</Label>}\n            {(showValue || typeof showValue === 'function') && (\n                <SliderValueLabel>\n                    {({ state }) =>\n                        typeof showValue === 'function'\n                            ? showValue(state.values)\n                            : undefined\n                    }\n                </SliderValueLabel>\n            )}\n        </div>\n        <SliderControls />\n        {description && <Description>{description}</Description>}\n    </SliderRoot>\n)\n\ninterface SliderRootProps extends SliderPrimitiveProps {}\n\nconst SliderRoot = (props: SliderRootProps) => {\n    const descriptionId = useSlotId()\n    return (\n        <TextContextPrimitive.Provider\n            value={{ slots: { description: { id: descriptionId } } }}\n        >\n            <SliderPrimitive\n                data-slot='root'\n                aria-describedby={descriptionId}\n                {...props}\n                className={composeRenderProps(props.className, (className) =>\n                    root({ className })\n                )}\n            />\n        </TextContextPrimitive.Provider>\n    )\n}\n\ninterface SliderControlsProps\n    extends SliderTrackProps,\n        VariantProps<typeof sliderStyles> {}\n\nconst SliderControls = (props: SliderControlsProps) => {\n    const { values } = React.useContext(SliderStateContextPrimitive)\n    return (\n        <SliderTrack {...props}>\n            <SliderFiller />\n            {values.map((_, i) => (\n                <SliderThumb key={i} index={i} />\n            ))}\n        </SliderTrack>\n    )\n}\n\ninterface SliderTrackProps\n    extends SliderTrackPrimitiveProps,\n        VariantProps<typeof sliderStyles> {}\n\nconst SliderTrack = (props: SliderTrackProps) => {\n    return (\n        <SliderTrackPrimitive\n            {...props}\n            className={composeRenderProps(props.className, (className) =>\n                track({ className })\n            )}\n        />\n    )\n}\n\ninterface SliderFillerProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst SliderFiller = (props: SliderFillerProps) => {\n    const { orientation, getThumbPercent, values } = React.useContext(\n        SliderStateContextPrimitive\n    )\n    return (\n        <div\n            {...props}\n            style={\n                values.length === 1\n                    ? orientation === 'horizontal'\n                        ? { width: `${getThumbPercent(0) * 100}%` }\n                        : { height: `${getThumbPercent(0) * 100}%` }\n                    : orientation === 'horizontal'\n                      ? {\n                            left: `${getThumbPercent(0) * 100}%`,\n                            width: `${Math.abs(getThumbPercent(0) - getThumbPercent(1)) * 100}%`\n                        }\n                      : {\n                            bottom: `${getThumbPercent(0) * 100}%`,\n                            height: `${Math.abs(getThumbPercent(0) - getThumbPercent(1)) * 100}%`\n                        }\n            }\n            className={filler({ className: props.className })}\n        />\n    )\n}\n\ninterface SliderThumbProps\n    extends SliderThumbPrimitiveProps,\n        VariantProps<typeof sliderStyles> {}\n\nconst SliderThumb = ({ className, ...props }: SliderThumbProps) => {\n    return (\n        <SliderThumbPrimitive\n            {...props}\n            className={composeRenderProps(className, (className) => thumb({ className }))}\n        />\n    )\n}\n\ninterface SliderValueLabelProps extends SliderOutputPrimitiveProps {}\n\nconst SliderValueLabel = ({ className, ...props }: SliderValueLabelProps) => {\n    return (\n        <SliderOutputPrimitive\n            {...props}\n            className={composeRenderProps(className, (className) =>\n                valueLabel({ className })\n            )}\n        >\n            {composeRenderProps(\n                props.children,\n                (children, { state }) =>\n                    children ??\n                    state.values.map((_, i) => state.getThumbValueLabel(i)).join(' - ')\n            )}\n        </SliderOutputPrimitive>\n    )\n}\n\nSlider.Controls = SliderControls\nSlider.Filler = SliderFiller\nSlider.Thumb = SliderThumb\nSlider.Root = SliderRoot\nSlider.Track = SliderTrack\nSlider.ValueLabel = SliderValueLabel\n\nexport { Slider }\n",
    "type": "ui"
  },
  "skeleton": {
    "component": "@/components/ui/skeleton",
    "raw": "import React from 'react'\n\nimport { tv } from 'tailwind-variants'\n\nconst skeletonStyles = tv({\n    base: 'animate-pulse shrink-0',\n    variants: {\n        color: {\n            muted: 'bg-muted/50',\n            lighter: 'bg-secondary'\n        },\n        shape: {\n            circle: 'rounded-full',\n            square: 'rounded-lg'\n        }\n    },\n    defaultVariants: {\n        color: 'muted',\n        shape: 'square'\n    }\n})\n\ninterface SkeletonProps extends React.HTMLAttributes<HTMLDivElement> {\n    color?: 'muted' | 'lighter'\n    shape?: 'circle' | 'square'\n}\nconst Skeleton = ({ shape, color, className, ...props }: SkeletonProps) => {\n    return <div className={skeletonStyles({ shape, color, className })} {...props} />\n}\n\nexport { Skeleton }\n",
    "type": "ui"
  },
  "drop-zone": {
    "component": "@/components/ui/drop-zone",
    "raw": "'use client'\n\nimport {\n    composeRenderProps,\n    DropZone as DropPrimitiveZone,\n    type DropZoneProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nconst dropZoneStyles = tv({\n    base: 'group has-[slot=description]:text-center flex max-h-[200px] p-6 max-w-xl flex-col items-center justify-center gap-2 rounded-md border border-dashed text-sm',\n    variants: {\n        isDropTarget: {\n            true: 'bg-primary/10 ring-4 ring-primary/20 [&_.text-muted-foreground]:text-primary-foreground border-solid border-primary'\n        }\n    }\n})\n\nconst DropZone = ({ className, ...props }: DropZoneProps) => (\n    <DropPrimitiveZone\n        className={composeRenderProps(className, (className, renderProps) =>\n            dropZoneStyles({ ...renderProps, className })\n        )}\n        {...props}\n    />\n)\nexport { DropZone }\n",
    "type": "ui"
  },
  "input-otp": {
    "component": "@/components/ui/input-otp",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconPoint } from 'cleon-icons'\nimport { OTPInput, OTPInputContext } from 'input-otp'\n\nimport { cn } from '@/lib/utils'\n\ninterface InputOTPSubComponents {\n    Group: typeof InputOTPGroup\n    Slot: typeof InputOTPSlot\n    Separator: typeof InputOTPSeparator\n}\n\ntype InputOTPProps = React.ComponentPropsWithoutRef<typeof OTPInput>\ntype InputOTPComponent = React.ForwardRefExoticComponent<InputOTPProps> &\n    InputOTPSubComponents\n\nconst InputOTP: InputOTPComponent = React.forwardRef<\n    React.ElementRef<typeof OTPInput>,\n    React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n    <OTPInput\n        data-1p-ignore\n        ref={ref}\n        containerClassName={cn(\n            'flex items-center gap-2 has-[:disabled]:opacity-70',\n            containerClassName\n        )}\n        className={cn('disabled:cursor-not-allowed', className)}\n        {...props}\n    />\n)) as InputOTPComponent\nInputOTP.displayName = 'InputOTP'\n\nconst InputOTPGroup = React.forwardRef<\n    React.ElementRef<'div'>,\n    React.ComponentPropsWithoutRef<'div'>\n>(({ className, ...props }, ref) => (\n    <div ref={ref} className={cn('flex items-center gap-x-1.5', className)} {...props} />\n))\nInputOTPGroup.displayName = 'InputOTPGroup'\n\nconst InputOTPSlot = React.forwardRef<\n    React.ElementRef<'div'>,\n    React.ComponentPropsWithoutRef<'div'> & { index: number }\n>(({ index, className, ...props }, ref) => {\n    const inputOTPContext = React.useContext(OTPInputContext)\n    const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n    return (\n        <div\n            ref={ref}\n            className={cn(\n                'relative flex size-10 items-center justify-center rounded-md border border-input text-sm transition-all',\n                isActive && 'z-10 border-primary ring-4 ring-primary/20',\n                className\n            )}\n            {...props}\n        >\n            {char}\n            {hasFakeCaret && (\n                <div className='pointer-events-none absolute inset-0 flex items-center justify-center'>\n                    <div className='animate-caret-blink h-4 w-px bg-foreground duration-1000' />\n                </div>\n            )}\n        </div>\n    )\n})\nInputOTPSlot.displayName = 'InputOTPSlot'\n\nconst InputOTPSeparator = React.forwardRef<\n    React.ElementRef<'div'>,\n    React.ComponentPropsWithoutRef<'div'>\n>(({ ...props }, ref) => (\n    <div ref={ref} role='separator' {...props}>\n        <IconPoint className='size-2 fill-inherit' />\n    </div>\n))\nInputOTPSeparator.displayName = 'InputOTPSeparator'\n\nInputOTP.Group = InputOTPGroup\nInputOTP.Slot = InputOTPSlot\nInputOTP.Separator = InputOTPSeparator\n\nexport { InputOTP }\n",
    "type": "ui"
  },
  "pagination": {
    "component": "@/components/ui/pagination",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n    IconChevronLeft,\n    IconChevronRight,\n    IconChevronsLeft,\n    IconChevronsRight,\n    IconDotsHorizontal\n} from 'cleon-icons'\nimport {\n    ListBox,\n    ListBoxItem,\n    Section,\n    Separator,\n    type ListBoxItemProps,\n    type ListBoxProps,\n    type SectionProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { buttonVariants } from './button'\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<'nav'>) => (\n    <nav\n        role='navigation'\n        aria-label='pagination'\n        className={cn('mx-auto flex w-full justify-center gap-1', className)}\n        {...props}\n    />\n)\n\nconst PaginationSection = <T extends object>({\n    className,\n    ...props\n}: SectionProps<T>) => (\n    <Section {...props} className={cn('flex h-9 sm:h-10 gap-1', className)} />\n)\n\nconst PaginationList = <T extends object>({ className, ...props }: ListBoxProps<T>) => {\n    const ariaLabel = props['aria-label'] || 'Pagination'\n    return (\n        <ListBox\n            orientation='horizontal'\n            aria-label={ariaLabel}\n            layout='grid'\n            className={cn('flex flex-row items-center gap-1', className)}\n            {...props}\n        />\n    )\n}\n\nconst renderListItem = (\n    props: ListBoxItemProps & {\n        textValue?: string\n        ariaCurrent?: string | undefined\n        isDisabled?: boolean\n        className?: string\n    },\n    children: React.ReactNode\n) => <ListBoxItem {...props}>{children}</ListBoxItem>\n\ninterface PaginationItemProps extends ListBoxItemProps {\n    children?: React.ReactNode\n    className?: string\n    variant?:\n        | 'primary'\n        | 'secondary'\n        | 'danger'\n        | 'warning'\n        | 'info'\n        | 'dark'\n        | 'success'\n        | 'outline'\n        | 'ghost'\n    size?: 'xs' | 'sm' | 'md' | 'lg' | 'icon'\n    shape?: 'square' | 'circle'\n    isCurrent?: boolean\n    role?:\n        | 'label'\n        | 'separator'\n        | 'ellipsis'\n        | 'default'\n        | 'last'\n        | 'first'\n        | 'previous'\n        | 'next'\n}\n\nconst PaginationItem = ({\n    role = 'default',\n    size = 'icon',\n    shape = 'square',\n    variant = 'outline',\n    className,\n    isCurrent,\n    children,\n    ...props\n}: PaginationItemProps) => {\n    const textValue =\n        typeof children === 'string'\n            ? children\n            : typeof children === 'number'\n              ? children.toString()\n              : undefined\n\n    const renderPaginationIndicator = (indicator: React.ReactNode) =>\n        renderListItem(\n            {\n                textValue: role,\n                ariaCurrent: isCurrent ? 'page' : undefined,\n                isDisabled: isCurrent,\n                className: cn(\n                    buttonVariants({\n                        variant: 'outline',\n                        size: 'icon',\n                        className:\n                            'focus-visible:border-primary focus-visible:bg-primary/10 focus-visible:text-foreground [&>[data-slot=icon]]:text-primary focus-visible:ring-4 focus-visible:ring-primary/20'\n                    }),\n                    className\n                ),\n                ...props\n            },\n            indicator\n        )\n\n    switch (role) {\n        case 'label':\n            return renderListItem(\n                {\n                    textValue: textValue,\n                    className: cn(\n                        'h-9 sm:h-10 px-3.5 grid place-content-center',\n                        className\n                    ),\n                    ...props\n                },\n                children\n            )\n        case 'separator':\n            return renderListItem(\n                {\n                    textValue: 'Separator',\n                    className: 'h-9 sm:h-10 grid place-content-center',\n                    ...props\n                },\n                <Separator\n                    orientation='vertical'\n                    className='h-5 w-[1.5px] bg-border rotate-[14deg] shrink-0'\n                />\n            )\n        case 'ellipsis':\n            return renderListItem(\n                {\n                    textValue: 'More pages',\n                    className: cn(\n                        'flex items-center justify-center focus-visible:border-primary rounded-lg border border-transparent focus:outline-none size-9 sm:size-10 focus-visible:bg-primary/10 focus-visible:text-foreground [&>[data-slot=icon]]:text-primary focus-visible:ring-4 focus-visible:ring-primary/20',\n                        className\n                    ),\n                    ...props\n                },\n                <span\n                    aria-hidden\n                    className={cn(\n                        'flex size-9 sm:size-10 items-center justify-center',\n                        className\n                    )}\n                >\n                    <IconDotsHorizontal className='size-5 text-muted-foreground' />\n                </span>\n            )\n        case 'previous':\n            return renderPaginationIndicator(<IconChevronLeft />)\n        case 'next':\n            return renderPaginationIndicator(<IconChevronRight />)\n        case 'first':\n            return renderPaginationIndicator(<IconChevronsLeft />)\n        case 'last':\n            return renderPaginationIndicator(<IconChevronsRight />)\n        default:\n            return renderListItem(\n                {\n                    textValue: textValue,\n                    ariaCurrent: isCurrent ? 'page' : undefined,\n                    isDisabled: isCurrent,\n                    className: cn(\n                        buttonVariants({\n                            variant: isCurrent ? 'primary' : variant,\n                            size,\n                            className:\n                                'focus-visible:border-primary cursor-pointer focus-visible:bg-primary/10 focus-visible:text-foreground [&>[data-slot=icon]]:text-primary focus-visible:ring-4 focus-visible:ring-primary/20 disabled:opacity-80'\n                        }),\n                        className\n                    ),\n                    ...props\n                },\n                children\n            )\n    }\n}\n\nPagination.Item = PaginationItem\nPagination.List = PaginationList\nPagination.Section = PaginationSection\n\nexport { Pagination }\n",
    "type": "ui"
  },
  "menu": {
    "component": "@/components/ui/menu",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconCheck, IconChevronRight, IconPoint } from 'cleon-icons'\nimport {\n    Button,\n    composeRenderProps,\n    Header,\n    MenuItem,\n    Menu as MenuPrimitive,\n    MenuTrigger as MenuTriggerPrimitive,\n    Separator,\n    SubmenuTrigger as SubmenuTriggerPrimitive,\n    type ButtonProps,\n    type MenuItemProps as MenuItemPrimitiveProps,\n    type MenuProps as MenuPrimitiveProps,\n    type MenuTriggerProps as MenuTriggerPrimitiveProps,\n    type PopoverProps,\n    type SeparatorProps\n} from 'react-aria-components'\nimport type { VariantProps } from 'tailwind-variants'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\n\nimport { DropdownItemDetails, dropdownItemStyles, DropdownSection } from './dropdown'\nimport { Keyboard } from './keyboard'\nimport { Popover } from './popover'\n\ninterface MenuContextProps {\n    respectScreen: boolean\n}\n\nconst MenuContext = React.createContext<MenuContextProps>({ respectScreen: true })\n\ninterface MenuProps extends MenuTriggerPrimitiveProps {\n    respectScreen?: boolean\n}\n\nconst Menu = ({ respectScreen = true, ...props }: MenuProps) => {\n    return (\n        <MenuContext.Provider value={{ respectScreen }}>\n            <MenuTriggerPrimitive {...props}>\n                <>{props.children}</>\n            </MenuTriggerPrimitive>\n        </MenuContext.Provider>\n    )\n}\n\nconst SubMenu = ({ delay = 0, ...props }) => (\n    <SubmenuTriggerPrimitive {...props} delay={delay}>\n        {props.children}\n    </SubmenuTriggerPrimitive>\n)\n\nconst menuStyles = tv({\n    slots: {\n        menu: 'max-h-[calc(var(--visual-viewport-height)-10rem)] sm:max-h-[inherit] overflow-auto rounded-xl p-1 outline outline-0 [clip-path:inset(0_0_0_0_round_calc(var(--radius)-2px))]',\n        popover: 'z-50 min-w-40 p-0 outline-none shadow-sm',\n        trigger: [\n            'inline text-left focus:outline-none focus-visible:ring-1 focus-visible:ring-primary/30 pressed:outline-none'\n        ]\n    }\n})\n\nconst { menu, popover, trigger } = menuStyles()\n\ninterface MenuTriggerProps extends ButtonProps {\n    className?: string\n}\n\nconst Trigger = ({ className, ...props }: MenuTriggerProps) => (\n    <Button className={trigger({ className })} {...props} />\n)\n\ninterface MenuContentProps<T>\n    extends Omit<PopoverProps, 'children' | 'style'>,\n        MenuPrimitiveProps<T> {\n    className?: string\n    popoverClassName?: string\n    showArrow?: boolean\n    respectScreen?: boolean\n}\n\nconst Content = <T extends object>({\n    className,\n    showArrow = false,\n    popoverClassName,\n    offset = 4,\n    ...props\n}: MenuContentProps<T>) => {\n    const { respectScreen } = React.useContext(MenuContext)\n    return (\n        <Popover.Content\n            respectScreen={respectScreen}\n            showArrow={showArrow}\n            className={popover({ className: popoverClassName })}\n            {...props}\n        >\n            <MenuPrimitive className={menu({ className })} {...props} />\n        </Popover.Content>\n    )\n}\n\ninterface MenuItemProps\n    extends Omit<MenuItemPrimitiveProps, 'isDanger'>,\n        VariantProps<typeof dropdownItemStyles> {\n    isDanger?: boolean\n}\n\nconst Item = ({ className, isDanger = false, children, ...props }: MenuItemProps) => {\n    const textValue =\n        props.textValue || (typeof children === 'string' ? children : undefined)\n    return (\n        <MenuItem\n            textValue={textValue}\n            className={composeRenderProps(className, (className, renderProps) =>\n                dropdownItemStyles({\n                    ...renderProps,\n                    className: cn('pl-2.5', className)\n                })\n            )}\n            data-danger={isDanger ? 'true' : undefined}\n            {...props}\n        >\n            {(values) => (\n                <>\n                    {typeof children === 'function' ? children(values) : children}\n                    {values.hasSubmenu && (\n                        <IconChevronRight className='gpfw ml-auto size-3.5' />\n                    )}\n                </>\n            )}\n        </MenuItem>\n    )\n}\n\nexport interface MenuHeaderProps extends React.ComponentProps<typeof Header> {\n    inset?: boolean\n    separator?: boolean\n}\n\nconst MenuHeader = ({\n    className,\n    inset,\n    separator = false,\n    ...props\n}: MenuHeaderProps) => (\n    <Header\n        className={cn(\n            'p-2 text-base font-semibold sm:text-sm',\n            separator && '-mx-1 border-b border-b-border px-3 pb-2',\n            className\n        )}\n        {...props}\n    />\n)\n\nconst MenuSeparator = ({ className, ...props }: SeparatorProps) => (\n    <Separator className={cn('-mx-1 my-1 h-px bg-muted', className)} {...props} />\n)\n\nconst Checkbox = ({ className, children, ...props }: MenuItemProps) => (\n    <Item className={cn('relative pr-8', className)} {...props}>\n        {(values) => (\n            <>\n                {typeof children === 'function' ? children(values) : children}\n                {values.isSelected && (\n                    <span className='absolute right-2 flex size-4 shrink-0 items-center animate-in justify-center'>\n                        <IconCheck />\n                    </span>\n                )}\n            </>\n        )}\n    </Item>\n)\n\nconst Radio = ({ className, children, ...props }: MenuItemProps) => (\n    <Item className={cn('pl-8 relative', className)} {...props}>\n        {(values) => (\n            <>\n                {values.isSelected && (\n                    <span className='absolute left-3 flex size-[0.650rem] items-center animate-in justify-center'>\n                        <IconPoint className='size-[0.650rem]' />\n                    </span>\n                )}\n\n                {typeof children === 'function' ? children(values) : children}\n            </>\n        )}\n    </Item>\n)\n\nMenu.Content = Content\nMenu.Header = MenuHeader\nMenu.Item = Item\nMenu.Content = Content\nMenu.Keyboard = Keyboard\nMenu.Checkbox = Checkbox\nMenu.Radio = Radio\nMenu.Section = DropdownSection\nMenu.Separator = MenuSeparator\nMenu.Trigger = Trigger\nMenu.ItemDetails = DropdownItemDetails\nMenu.Sub = SubMenu\n\nexport { Menu, type MenuContentProps, type MenuItemProps }\n",
    "type": "ui"
  },
  "button": {
    "component": "@/components/ui/button",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n    Button as ButtonPrimitive,\n    type ButtonProps as ButtonPrimitiveProps\n} from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\n\nconst buttonVariants = tv({\n    base: [\n        'btn relative whitespace-nowrap outline-none transition no-underline isolate inline-flex items-center justify-center gap-x-2 font-medium hover:brightness-110 pressed:brightness-90',\n        '[&_svg]:size-4 [&_svg]:shrink-0',\n        'disabled:cursor-default disabled:opacity-50'\n    ],\n    variants: {\n        variant: {\n            primary:\n                'bg-primary text-primary-foreground pressed:ring pressed:ring-primary/40 shadow-sm',\n            secondary:\n                'bg-secondary text-secondary-foreground pressed:ring pressed:ring-secondary/40 shadow-sm',\n            danger: 'bg-danger text-danger-foreground pressed:ring pressed:ring-danger/40 shadow-sm',\n            success:\n                'bg-success text-success-foreground pressed:ring pressed:ring-success/40 shadow-sm',\n            info: 'bg-info text-info-foreground pressed:ring pressed:ring-info/40 shadow-sm',\n            warning:\n                'bg-warning text-warning-foreground pressed:ring pressed:ring-warning/40 shadow-sm',\n            dark: 'bg-dark text-dark-foreground pressed:ring pressed:ring-dark/40 shadow-sm',\n            outline:\n                'border bg-background text-foreground shadow-sm hover:bg-muted-foreground pressed:bg-muted',\n            ghost: 'text-foreground bg-transparent hover:bg-muted pressed:bg-muted-foreground'\n        },\n        size: {\n            xs: 'h-8 px-2 text-xs',\n            sm: 'h-9 px-3 text-sm',\n            md: 'h-10 px-4 py-2 text-sm',\n            lg: 'h-10 sm:h-11 px-6 sm:px-8 text-base',\n            icon: 'size-9 sm:size-10 shrink-0'\n        },\n        shape: {\n            square: 'rounded-lg',\n            circle: 'rounded-full'\n        }\n    },\n    defaultVariants: {\n        variant: 'primary',\n        size: 'md',\n        shape: 'square'\n    }\n})\n\nexport interface ButtonProps\n    extends ButtonPrimitiveProps,\n        VariantProps<typeof buttonVariants> {}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n    ({ className, variant, size, shape, ...props }, ref) => {\n        return (\n            <ButtonPrimitive\n                className={(values) =>\n                    cn(\n                        buttonVariants({\n                            variant,\n                            size,\n                            shape,\n                            className:\n                                typeof className === 'function'\n                                    ? className(values)\n                                    : className\n                        })\n                    )\n                }\n                ref={ref}\n                {...props}\n            />\n        )\n    }\n)\nButton.displayName = 'Button'\n\nexport { Button, buttonVariants }\n",
    "type": "ui"
  },
  "progress": {
    "component": "@/components/ui/progress",
    "raw": "'use client'\n\nimport { motion } from 'framer-motion'\nimport { ProgressBar, type ProgressBarProps } from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { Label } from './field'\n\ninterface ProgressProps extends ProgressBarProps {\n    label?: string\n}\n\nconst Progress = ({ label, ...props }: ProgressProps) => {\n    return (\n        <ProgressBar {...props} className={cn('flex flex-col gap-1', props.className)}>\n            {({ percentage, valueText, isIndeterminate }) => (\n                <>\n                    <div className='flex justify-between gap-2'>\n                        <Label>{label}</Label>\n                        <span className='text-sm text-muted-foreground'>{valueText}</span>\n                    </div>\n                    <div className='relative h-2 min-w-64 overflow-hidden rounded-full bg-secondary outline outline-1 -outline-offset-1 outline-transparent'>\n                        {!isIndeterminate ? (\n                            <motion.div\n                                className='absolute left-0 top-0 h-full rounded-full bg-primary forced-colors:bg-[Highlight]'\n                                initial={{ width: '0%' }}\n                                animate={{ width: `${percentage}%` }}\n                                transition={{ duration: 0.5, ease: 'easeInOut' }}\n                            />\n                        ) : (\n                            <motion.div\n                                className='absolute top-0 h-full rounded-full bg-primary forced-colors:bg-[Highlight]'\n                                initial={{ left: '0%', width: '40%' }}\n                                animate={{ left: ['0%', '100%', '0%'] }}\n                                transition={{\n                                    repeat: Infinity,\n                                    duration: 2,\n                                    ease: 'easeInOut'\n                                }}\n                            />\n                        )}\n                    </div>\n                </>\n            )}\n        </ProgressBar>\n    )\n}\n\nexport { Progress, type ProgressProps }\n",
    "type": "ui"
  },
  "multi-select": {
    "component": "@/components/ui/multi-select",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconChevronDown } from 'cleon-icons'\nimport { useFilter } from 'react-aria'\nimport {\n    ComboBox,\n    Group,\n    type ComboBoxProps as ComboBoxPrimitiveProps,\n    type Key\n} from 'react-aria-components'\nimport { useListData, type ListData } from 'react-stately'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\n\nimport { Button } from './button'\nimport { Description, Input, Label } from './field'\nimport { ListBox } from './list-box'\nimport { Popover } from './popover'\nimport { TagGroup, TagList } from './tag-group'\nimport { VisuallyHidden } from './visually-hidden'\n\nconst multiSelectStyles = tv({\n    slots: {\n        multiSelectField: 'group flex w-full min-w-80 flex-col gap-1',\n        multiSelect: [\n            'relative px-1 flex min-h-10 flex-row flex-wrap items-center rounded-lg shadow-sm border transition duration-200',\n            'has-[input[data-focused=true]]:border-primary',\n            'has-[input[data-invalid=true][data-focused=true]]:border-danger has-[input[data-invalid=true]]:border-danger',\n            'has-[input[data-focused=true]]:ring-4 has-[input[data-focused=true]]:ring-primary/20'\n        ],\n        chevronButton:\n            'size-8 -mr-2 grid place-content-center rounded-sm hover:text-foreground focus:text-foreground text-muted-foreground',\n        input: 'flex-1 py-1 px-0.5 ml-1 shadow-none ring-0',\n        comboBoxChild: 'inline-flex flex-1 flex-wrap items-center px-0',\n        comboBox: 'group peer flex flex-1'\n    }\n})\n\nconst { multiSelectField, multiSelect, chevronButton, input, comboBox, comboBoxChild } =\n    multiSelectStyles()\n\ninterface FieldState {\n    selectedKey: Key | null\n    inputValue: string\n}\n\ninterface SelectedKey {\n    id: Key\n    textValue: string\n}\n\ninterface MultipleSelectProps<T extends object>\n    extends Omit<\n        ComboBoxPrimitiveProps<T>,\n        | 'children'\n        | 'validate'\n        | 'allowsEmptyCollection'\n        | 'selectedKey'\n        | 'inputValue'\n        | 'className'\n        | 'value'\n        | 'onSelectionChange'\n        | 'onInputChange'\n    > {\n    label?: string\n    description?: string\n    items: Array<T>\n    selectedList: ListData<T>\n    className?: string\n    onItemAdd?: (key: Key) => void\n    onItemRemove?: (key: Key) => void\n    renderEmptyState?: (inputValue: string) => React.ReactNode\n    tag: (item: T) => React.ReactNode\n    children: React.ReactNode | ((item: T) => React.ReactNode)\n    max?: number\n    min?: number\n}\n\nconst MultiSelect = <T extends SelectedKey>({\n    children,\n    items,\n    selectedList,\n    onItemRemove,\n    onItemAdd,\n    className,\n    name,\n    renderEmptyState,\n    max,\n    min,\n    ...props\n}: MultipleSelectProps<T>) => {\n    const tagGroupId = React.useId()\n    const triggerRef = React.useRef<HTMLDivElement | null>(null)\n    const [width, setWidth] = React.useState(0)\n\n    const { contains } = useFilter({ sensitivity: 'base' })\n    const selectedKeys = selectedList.items.map((i) => i.id)\n\n    const filter = React.useCallback(\n        (item: T, filterText: string) =>\n            !selectedKeys.includes(item.id) && contains(item.textValue, filterText),\n        [contains, selectedKeys]\n    )\n\n    const accessibleList = useListData({\n        initialItems: items,\n        filter\n    })\n\n    const [fieldState, setFieldState] = React.useState<FieldState>({\n        selectedKey: null,\n        inputValue: ''\n    })\n\n    const onRemove = React.useCallback(\n        (keys: Set<Key>) => {\n            if (min !== undefined && selectedList.items.length <= min) return\n\n            const key = keys.values().next().value\n            selectedList.remove(key as Key)\n            setFieldState({\n                inputValue: '',\n                selectedKey: null\n            })\n            onItemRemove?.(key as Key)\n        },\n        [selectedList, onItemRemove, min]\n    )\n\n    const onSelectionChange = (id: Key | null) => {\n        if (!id) return\n\n        const item = accessibleList.getItem(id)\n\n        if (!item) return\n\n        if (\n            !selectedKeys.includes(id) &&\n            (max === undefined || selectedList.items.length < max)\n        ) {\n            selectedList.append(item)\n            setFieldState({\n                inputValue: '',\n                selectedKey: id\n            })\n            onItemAdd?.(id)\n        }\n\n        accessibleList.setFilterText('')\n    }\n\n    const onInputChange = (v: string) => {\n        setFieldState((prevState) => ({\n            inputValue: v,\n            selectedKey: v === '' ? null : prevState.selectedKey\n        }))\n\n        accessibleList.setFilterText(v)\n    }\n\n    const deleteLast = React.useCallback(() => {\n        if (\n            selectedList.items.length == 0 ||\n            (min !== undefined && selectedList.items.length <= min)\n        ) {\n            return\n        }\n\n        const lastKey = selectedList.items[selectedList.items.length - 1]\n\n        if (lastKey !== null) {\n            selectedList.remove(lastKey.id)\n            onItemRemove?.(lastKey.id)\n        }\n\n        setFieldState({\n            inputValue: '',\n            selectedKey: null\n        })\n    }, [selectedList, onItemRemove, min])\n\n    const onKeyDownCapture = React.useCallback(\n        (e: React.KeyboardEvent<HTMLInputElement>) => {\n            if (e.key === 'Backspace' && fieldState.inputValue === '') {\n                deleteLast()\n            }\n        },\n        [deleteLast, fieldState.inputValue]\n    )\n\n    React.useEffect(() => {\n        const trigger = triggerRef.current\n        if (!trigger) return\n\n        const observer = new ResizeObserver((entries) => {\n            for (const entry of entries) {\n                setWidth(entry.target.clientWidth)\n            }\n        })\n\n        observer.observe(trigger)\n        return () => {\n            observer.unobserve(trigger)\n        }\n    }, [triggerRef])\n\n    const triggerButtonRef = React.useRef<HTMLButtonElement | null>(null)\n\n    return (\n        <Group className={cn(multiSelectField(), className)}>\n            {props.label && <Label>{props.label}</Label>}\n            <div ref={triggerRef} className={multiSelect({ className })}>\n                <TagGroup aria-label='Selected items' id={tagGroupId} onRemove={onRemove}>\n                    <TagList\n                        items={selectedList.items}\n                        className={cn(\n                            selectedList.items.length !== 0 && 'px-1 py-1.5',\n                            '[&_.jdt3lr2x]:rounded-[calc(var(--radius)-2.5px)] last:[&_.jdt3lr2x]:-mr-1 outline-none gap-1.5'\n                        )}\n                    >\n                        {props.tag}\n                    </TagList>\n                </TagGroup>\n                <ComboBox\n                    {...props}\n                    aria-label='Available items'\n                    allowsEmptyCollection\n                    className={comboBox({ className })}\n                    items={accessibleList.items}\n                    selectedKey={fieldState.selectedKey}\n                    inputValue={fieldState.inputValue}\n                    onSelectionChange={onSelectionChange}\n                    onInputChange={onInputChange}\n                >\n                    <div className={comboBoxChild({ className })}>\n                        <Input\n                            className={input()}\n                            onBlur={() => {\n                                setFieldState({\n                                    inputValue: '',\n                                    selectedKey: null\n                                })\n                                accessibleList.setFilterText('')\n                            }}\n                            onKeyDownCapture={onKeyDownCapture}\n                        />\n\n                        <VisuallyHidden>\n                            <Button\n                                slot='remove'\n                                aria-label='Remove'\n                                variant='ghost'\n                                size='icon'\n                                ref={triggerButtonRef}\n                            >\n                                <IconChevronDown />\n                            </Button>\n                        </VisuallyHidden>\n                    </div>\n                    <Popover.Picker\n                        className='max-w-none'\n                        style={{ width: `${width}px` }}\n                        triggerRef={triggerRef}\n                        trigger='ComboBox'\n                    >\n                        <ListBox.Picker\n                            renderEmptyState={() =>\n                                renderEmptyState ? (\n                                    renderEmptyState(fieldState.inputValue)\n                                ) : (\n                                    <Description className='p-3 block'>\n                                        {fieldState.inputValue ? (\n                                            <>\n                                                No results found for:{' '}\n                                                <strong className='font-semibold'>\n                                                    {fieldState.inputValue}\n                                                </strong>\n                                            </>\n                                        ) : (\n                                            `No options`\n                                        )}\n                                    </Description>\n                                )\n                            }\n                            selectionMode='multiple'\n                        >\n                            {children}\n                        </ListBox.Picker>\n                    </Popover.Picker>\n                </ComboBox>\n                <div className='relative px-1 ml-auto flex items-center justify-center peer-data-[open]:[&_button>svg]:rotate-180 [&_button>svg]:transition-transform'>\n                    <button\n                        type='button'\n                        className={chevronButton()}\n                        onClick={() => triggerButtonRef.current?.click()}\n                        tabIndex={-1}\n                    >\n                        <IconChevronDown className='size-4' />\n                    </button>\n                </div>\n            </div>\n\n            {name && <input hidden name={name} value={selectedKeys.join(',')} readOnly />}\n\n            {props.description && <Description>{props.description}</Description>}\n        </Group>\n    )\n}\n\nconst MultiSelectItem = ListBox.Item\n\nMultiSelect.Item = MultiSelectItem\n\nexport { MultiSelect, type SelectedKey }\n",
    "type": "ui"
  },
  "textarea": {
    "component": "@/components/ui/textarea",
    "raw": "'use client'\n\nimport {\n    composeRenderProps,\n    TextArea as TextAreaPrimitive,\n    TextField as TextFieldPrimitive,\n    type TextFieldProps as TextFieldPrimitiveProps,\n    type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\n\nimport { Description, FieldError, Label } from './field'\n\nconst textareaStyles = tv({\n    base: [\n        'w-full min-w-0 rounded-md border border-input bg-background px-2.5 py-2 text-base shadow-sm outline-none transition duration-200 disabled:bg-secondary disabled:opacity-50 sm:text-sm',\n        'focus:ring-4 focus:ring-primary/20 focus:border-primary invalid:border-danger invalid:ring-4 invalid:ring-danger/20'\n    ]\n})\n\ninterface TextareaProps extends TextFieldPrimitiveProps {\n    autoSize?: boolean\n    label?: string\n    placeholder?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    className?: string\n}\n\nconst Textarea = ({\n    className,\n    placeholder,\n    label,\n    description,\n    errorMessage,\n    ...props\n}: TextareaProps) => {\n    return (\n        <TextFieldPrimitive\n            {...props}\n            className={cn('group flex flex-col gap-1', className)}\n        >\n            {label && <Label>{label}</Label>}\n            <TextAreaPrimitive\n                placeholder={placeholder}\n                className={composeRenderProps(className, (className, renderProps) =>\n                    textareaStyles({\n                        ...renderProps,\n                        className\n                    })\n                )}\n            />\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </TextFieldPrimitive>\n    )\n}\n\nexport { Textarea, type TextareaProps }\n",
    "type": "ui"
  },
  "avatar": {
    "component": "@/components/ui/avatar",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { VisuallyHidden } from './visually-hidden'\n\nconst avatarGroupStyles = tv({\n    base: 'flex items-center justify-center -space-x-2 [&_[data-slot=avatar]]:ring-2 [&_[data-slot=avatar]]:ring-background'\n})\n\ninterface AvatarGroupProps\n    extends React.HTMLAttributes<HTMLDivElement>,\n        VariantProps<typeof avatarGroupStyles> {\n    children: React.ReactNode\n}\n\nconst AvatarGroup = ({ className, ...props }: AvatarGroupProps) => {\n    return <div className={avatarGroupStyles({ className })} {...props} />\n}\n\nconst avatarStyles = tv({\n    base: [\n        'inline-grid relative shrink-0 bg-secondary align-middle [--avatar-radius:20%] [--ring-opacity:20%] *:col-start-1 *:row-start-1',\n        'outline outline-1 -outline-offset-1 outline-black/[--ring-opacity] dark:outline-white/[--ring-opacity]'\n    ],\n    variants: {\n        size: {\n            sm: 'size-6',\n            md: 'size-8',\n            lg: 'size-10',\n            xl: 'size-12',\n            '2xl': 'size-16'\n        },\n        shape: {\n            square: 'rounded-[--avatar-radius] *:rounded-[--avatar-radius] [&_[data-slot=badge]]:rounded-full',\n            circle: 'rounded-full *:rounded-full'\n        }\n    },\n\n    defaultVariants: {\n        shape: 'circle',\n        size: 'md'\n    }\n})\n\ntype Status = 'danger' | 'success' | 'muted' | 'warning' | 'primary'\n\ninterface AvatarProps\n    extends React.ComponentPropsWithoutRef<'span'>,\n        VariantProps<typeof avatarStyles> {\n    src?: string | null\n    initials?: string\n    alt?: string\n    status?: Status\n    className?: string\n    role?: string\n}\n\nconst Avatar = ({\n    status,\n    src = null,\n    initials,\n    alt = '',\n    children,\n    className,\n    shape,\n    size,\n    role = 'avatar',\n    ...props\n}: AvatarProps) => {\n    const badgeId = React.useId()\n    const ariaLabelledby = [badgeId, children ? badgeId : ''].join(' ')\n    return (\n        <span\n            aria-labelledby={ariaLabelledby}\n            role={role}\n            data-slot='avatar'\n            {...props}\n            className={avatarStyles({ shape, size, className })}\n        >\n            {initials && (\n                <svg\n                    className='select-none fill-current text-[48px] font-medium uppercase'\n                    viewBox='0 0 100 100'\n                    aria-hidden={alt ? undefined : 'true'}\n                >\n                    {alt && <title>{alt}</title>}\n                    <text\n                        x='50%'\n                        y='50%'\n                        alignmentBaseline='middle'\n                        dominantBaseline='middle'\n                        textAnchor='middle'\n                        dy='.125em'\n                    >\n                        {initials}\n                    </text>\n                </svg>\n            )}\n            {src && <img src={src} alt={alt} />}\n            {status && <AvatarBadge size={size} status={status} aria-label='Available' />}\n        </span>\n    )\n}\n\ntype AvatarBadgeProps = {\n    className?: string\n    status?: Status\n    fillBackground?: boolean\n    'aria-label': string\n    size?: AvatarProps['size']\n}\n\nconst avatarBadgeStyles = tv({\n    base: [\n        'size-3 z-1 absolute bottom-0 right-0 z-10 rounded-full ring-[1.5px] ring-background bg-background'\n    ],\n    variants: {\n        size: {\n            sm: 'size-1.5 translate-x-[0%] translate-y-[0%]',\n            md: 'size-2 translate-x-[5%] translate-y-[5%]',\n            lg: 'size-2.5 translate-x-[5%] translate-y-[5%]',\n            xl: 'size-3 translate-x-[5%] translate-y-[5%]',\n            '2xl': 'size-4 translate-x-[5%] translate-y-[5%]'\n        },\n        status: {\n            danger: 'bg-danger',\n            success: 'bg-success',\n            muted: 'bg-secondary',\n            warning: 'bg-warning',\n            primary: 'bg-primary'\n        }\n    },\n    defaultVariants: {\n        size: 'md',\n        status: 'primary'\n    }\n})\n\nconst AvatarBadge = ({ size, className, status, ...props }: AvatarBadgeProps) => {\n    return (\n        <span\n            data-slot='badge'\n            {...props}\n            aria-hidden\n            className={avatarBadgeStyles({ size, status, className })}\n        >\n            <VisuallyHidden key={status}>{status}</VisuallyHidden>\n        </span>\n    )\n}\n\nexport { Avatar, AvatarGroup }\n",
    "type": "ui"
  },
  "list-box": {
    "component": "@/components/ui/list-box",
    "raw": "'use client'\n\nimport { IconGripVertical } from 'cleon-icons'\nimport {\n    composeRenderProps,\n    ListBoxItem as ListBoxItemPrimitive,\n    ListBox as ListBoxPrimitive,\n    type ListBoxItemProps as ListBoxItemPrimitiveProps,\n    type ListBoxProps as ListBoxPrimitiveProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\n\nimport { DropdownItemDetails, DropdownSection } from './dropdown'\n\nconst listBoxStyles = tv({\n    base: 'flex max-h-96 w-full min-w-72 flex-col overflow-y-auto rounded-xl border p-1 shadow-xl outline-none'\n})\n\ninterface ListBoxProps<T> extends ListBoxPrimitiveProps<T> {\n    className?: string\n}\n\nconst ListBox = <T extends object>({\n    children,\n    className,\n    ...props\n}: ListBoxProps<T>) => (\n    <ListBoxPrimitive {...props} className={listBoxStyles({ className })}>\n        {children}\n    </ListBoxPrimitive>\n)\n\nconst listBoxItemStyles = tv({\n    base: 'my-0.5 cursor-pointer rounded-md p-2 text-base outline-none transition lg:text-sm',\n    variants: {\n        isHovered: { true: 'bg-secondary text-secondary-foreground' },\n        isFocused: {\n            true: '[&_[data-slot=icon]]:text-primary-foreground [&_[data-slot=label]]:text-primary-foreground [&_.text-muted-foreground]:text-primary-foreground/80 bg-primary text-primary-foreground'\n        },\n        isDragging: { true: 'cursor-grabbing bg-secondary text-secondary-foreground' },\n        isSelected: { true: 'bg-primary text-primary-foreground' },\n        isDisabled: {\n            true: 'opacity-70 cursor-default text-muted-foreground'\n        }\n    }\n})\n\ninterface ListBoxItemProps<T extends Object> extends ListBoxItemPrimitiveProps<T> {\n    className?: string\n}\n\nconst ListBoxItem = <T extends object>({\n    children,\n    className,\n    ...props\n}: ListBoxItemProps<T>) => {\n    const textValue = typeof children === 'string' ? children : undefined\n\n    return (\n        <ListBoxItemPrimitive\n            textValue={textValue}\n            {...props}\n            className={composeRenderProps(className, (className, renderProps) =>\n                listBoxItemStyles({\n                    ...renderProps,\n                    className\n                })\n            )}\n        >\n            {(values) => (\n                <div className='flex items-center gap-2'>\n                    <>\n                        {values.allowsDragging && (\n                            <IconGripVertical\n                                className={cn(\n                                    'size-4 shrink-0 text-muted-foreground transition',\n                                    values.isFocused && 'text-foreground',\n                                    values.isDragging && 'text-foreground',\n                                    values.isSelected && 'text-primary-foreground/70'\n                                )}\n                            />\n                        )}\n                        <div className='flex flex-col'>\n                            {typeof children === 'function' ? children(values) : children}\n                        </div>\n                    </>\n                </div>\n            )}\n        </ListBoxItemPrimitive>\n    )\n}\n\nconst ListBoxSection = DropdownSection\nconst ListBoxItemDetails = DropdownItemDetails\n\ninterface ListBoxPickerProps<T> extends ListBoxProps<T> {}\n\nconst ListBoxPicker = <T extends object>({\n    className,\n    ...props\n}: ListBoxPickerProps<T>) => {\n    return (\n        <ListBoxPrimitive\n            className={cn(\n                'max-h-72 no-scrollbar overflow-auto p-1 outline-none',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nListBox.Picker = ListBoxPicker\nListBox.Item = ListBoxItem\nListBox.ItemDetails = ListBoxItemDetails\nListBox.Section = ListBoxSection\n\nexport { ListBox, listBoxStyles }\n",
    "type": "ui"
  },
  "charts": {
    "component": "@/components/ui/charts",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport * as ChartPrimitive from 'recharts'\n\nimport { cn } from '@/lib/utils'\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: '', dark: '.dark' } as const\n\nexport type ChartConfig = {\n    [k in string]: {\n        label?: React.ReactNode\n        icon?: React.ComponentType\n    } & (\n        | { color?: string; theme?: never }\n        | { color?: never; theme: Record<keyof typeof THEMES, string> }\n    )\n}\n\ntype ChartContextProps = {\n    config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n    const context = React.useContext(ChartContext)\n\n    if (!context) {\n        throw new Error('useChart must be used within a <ChartContainer />')\n    }\n\n    return context\n}\n\nconst ChartContainer = React.forwardRef<\n    HTMLDivElement,\n    React.ComponentProps<'div'> & {\n        config: ChartConfig\n        children: React.ComponentProps<\n            typeof ChartPrimitive.ResponsiveContainer\n        >['children']\n    }\n>(({ id, className, children, config, ...props }, ref) => {\n    const uniqueId = React.useId()\n    const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`\n\n    return (\n        <ChartContext.Provider value={{ config }}>\n            <div\n                data-chart={chartId}\n                ref={ref}\n                className={cn(\n                    \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line-line]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n                    className\n                )}\n                {...props}\n            >\n                <ChartStyle id={chartId} config={config} />\n                <ChartPrimitive.ResponsiveContainer>\n                    {children}\n                </ChartPrimitive.ResponsiveContainer>\n            </div>\n        </ChartContext.Provider>\n    )\n})\nChartContainer.displayName = 'Chart'\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n    const colorConfig = Object.entries(config).filter(\n        ([_, config]) => config.theme || config.color\n    )\n\n    if (!colorConfig.length) {\n        return null\n    }\n\n    return (\n        <style\n            dangerouslySetInnerHTML={{\n                __html: Object.entries(THEMES)\n                    .map(\n                        ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n    .map(([key, itemConfig]) => {\n        const color =\n            itemConfig.theme?.[theme as keyof typeof itemConfig.theme] || itemConfig.color\n        return color ? `  --color-${key}: ${color};` : null\n    })\n    .join('\\n')}\n}\n`\n                    )\n                    .join('\\n')\n            }}\n        />\n    )\n}\n\nconst ChartTooltip = ChartPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n    HTMLDivElement,\n    React.ComponentProps<typeof ChartPrimitive.Tooltip> &\n        React.ComponentProps<'div'> & {\n            hideLabel?: boolean\n            hideIndicator?: boolean\n            indicator?: 'line' | 'dot' | 'dashed'\n            nameKey?: string\n            labelKey?: string\n        }\n>(\n    (\n        {\n            active,\n            payload,\n            className,\n            indicator = 'dot',\n            hideLabel = false,\n            hideIndicator = false,\n            label,\n            labelFormatter,\n            labelClassName,\n            formatter,\n            color,\n            nameKey,\n            labelKey\n        },\n        ref\n    ) => {\n        const { config } = useChart()\n\n        const tooltipLabel = React.useMemo(() => {\n            if (hideLabel || !payload?.length) {\n                return null\n            }\n\n            const [item] = payload\n            const key = `${labelKey || item.dataKey || item.name || 'value'}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const value =\n                !labelKey && typeof label === 'string'\n                    ? config[label as keyof typeof config]?.label || label\n                    : itemConfig?.label\n\n            if (labelFormatter) {\n                return (\n                    <div className={cn('font-medium', labelClassName)}>\n                        {labelFormatter(value, payload)}\n                    </div>\n                )\n            }\n\n            if (!value) {\n                return null\n            }\n\n            return <div className={cn('font-medium', labelClassName)}>{value}</div>\n        }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey])\n\n        if (!active || !payload?.length) {\n            return null\n        }\n\n        const nestLabel = payload.length === 1 && indicator !== 'dot'\n\n        return (\n            <div\n                ref={ref}\n                className={cn(\n                    'grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl',\n                    className\n                )}\n            >\n                {!nestLabel ? tooltipLabel : null}\n                <div className='grid gap-1.5'>\n                    {payload.map((item, index) => {\n                        const key = `${nameKey || item.name || item.dataKey || 'value'}`\n                        const itemConfig = getPayloadConfigFromPayload(config, item, key)\n                        const indicatorColor = color || item.payload.fill || item.color\n\n                        return (\n                            <div\n                                key={item.dataKey}\n                                className={cn(\n                                    'flex w-full items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground',\n                                    indicator === 'dot' && 'items-center'\n                                )}\n                            >\n                                {formatter && item?.value !== undefined && item.name ? (\n                                    formatter(\n                                        item.value,\n                                        item.name,\n                                        item,\n                                        index,\n                                        item.payload\n                                    )\n                                ) : (\n                                    <>\n                                        {itemConfig?.icon ? (\n                                            <itemConfig.icon />\n                                        ) : (\n                                            !hideIndicator && (\n                                                <div\n                                                    className={cn(\n                                                        'shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]',\n                                                        {\n                                                            'h-2.5 w-2.5':\n                                                                indicator === 'dot',\n                                                            'w-1': indicator === 'line',\n                                                            'w-0 border-[1.5px] border-dashed bg-transparent':\n                                                                indicator === 'dashed',\n                                                            'my-0.5':\n                                                                nestLabel &&\n                                                                indicator === 'dashed'\n                                                        }\n                                                    )}\n                                                    style={\n                                                        {\n                                                            '--color-bg': indicatorColor,\n                                                            '--color-border':\n                                                                indicatorColor\n                                                        } as React.CSSProperties\n                                                    }\n                                                />\n                                            )\n                                        )}\n                                        <div\n                                            className={cn(\n                                                'flex flex-1 justify-between leading-none',\n                                                nestLabel ? 'items-end' : 'items-center'\n                                            )}\n                                        >\n                                            <div className='grid gap-1.5'>\n                                                {nestLabel ? tooltipLabel : null}\n                                                <span className='text-muted-foreground'>\n                                                    {itemConfig?.label || item.name}\n                                                </span>\n                                            </div>\n                                            {item.value && (\n                                                <span className='font-mono font-medium tabular-nums text-foreground'>\n                                                    {item.value.toLocaleString()}\n                                                </span>\n                                            )}\n                                        </div>\n                                    </>\n                                )}\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n        )\n    }\n)\nChartTooltipContent.displayName = 'ChartTooltip'\n\nconst ChartLegend = ChartPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n    HTMLDivElement,\n    React.ComponentProps<'div'> &\n        Pick<ChartPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {\n            hideIcon?: boolean\n            nameKey?: string\n        }\n>(({ className, hideIcon = false, payload, verticalAlign = 'bottom', nameKey }, ref) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n        return null\n    }\n\n    return (\n        <div\n            ref={ref}\n            className={cn(\n                'flex items-center justify-center gap-4',\n                verticalAlign === 'top' ? 'pb-3' : 'pt-3',\n                className\n            )}\n        >\n            {payload.map((item) => {\n                const key = `${nameKey || item.dataKey || 'value'}`\n                const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n                return (\n                    <div\n                        key={item.value}\n                        className={cn(\n                            'flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground'\n                        )}\n                    >\n                        {itemConfig?.icon && !hideIcon ? (\n                            <itemConfig.icon />\n                        ) : (\n                            <div\n                                className='h-2 w-2 shrink-0 rounded-[2px]'\n                                style={{\n                                    backgroundColor: item.color\n                                }}\n                            />\n                        )}\n                        {itemConfig?.label}\n                    </div>\n                )\n            })}\n        </div>\n    )\n})\nChartLegendContent.displayName = 'ChartLegend'\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(config: ChartConfig, payload: unknown, key: string) {\n    if (typeof payload !== 'object' || payload === null) {\n        return undefined\n    }\n\n    const payloadPayload =\n        'payload' in payload &&\n        typeof payload.payload === 'object' &&\n        payload.payload !== null\n            ? payload.payload\n            : undefined\n\n    let configLabelKey: string = key\n\n    if (key in payload && typeof payload[key as keyof typeof payload] === 'string') {\n        configLabelKey = payload[key as keyof typeof payload] as string\n    } else if (\n        payloadPayload &&\n        key in payloadPayload &&\n        typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'\n    ) {\n        configLabelKey = payloadPayload[key as keyof typeof payloadPayload] as string\n    }\n\n    return configLabelKey in config\n        ? config[configLabelKey]\n        : config[key as keyof typeof config]\n}\n\nexport {\n    ChartContainer,\n    ChartLegend,\n    ChartLegendContent,\n    ChartStyle,\n    ChartTooltip,\n    ChartTooltipContent\n}\n",
    "type": "ui"
  },
  "number-field": {
    "component": "@/components/ui/number-field",
    "raw": "'use client'\n\nimport { IconChevronDown, IconChevronUp, IconMinus, IconPlus } from 'cleon-icons'\nimport {\n    Button,\n    type ButtonProps,\n    NumberField as NumberFieldPrimitive,\n    type NumberFieldProps as NumberFieldPrimitiveProps,\n    type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn, useMediaQuery } from '@/lib/utils'\n\nimport {\n    Description,\n    fieldBorderStyles,\n    FieldError,\n    FieldGroup,\n    Input,\n    Label\n} from './field'\n\nconst numberFieldStyles = tv({\n    slots: {\n        base: 'group flex flex-col gap-1',\n        stepperButton:\n            'h-10 cursor-default px-2 text-muted-foreground pressed:bg-primary pressed:text-primary-foreground group-disabled:bg-secondary forced-colors:group-disabled:text-[GrayText]'\n    }\n})\n\nconst { base, stepperButton } = numberFieldStyles()\n\ninterface NumberFieldProps extends NumberFieldPrimitiveProps {\n    label?: string\n    description?: string\n    placeholder?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst NumberField = ({\n    label,\n    placeholder,\n    description,\n    className,\n    errorMessage,\n    ...props\n}: NumberFieldProps) => {\n    const isMobile = useMediaQuery('(max-width: 768px)')\n    return (\n        <NumberFieldPrimitive {...props} className={cn(base(), className)}>\n            <Label>{label}</Label>\n            <FieldGroup className='group-disabled:bg-secondary'>\n                {(renderProps) => (\n                    <>\n                        {isMobile ? (\n                            <StepperButton slot='decrement' className='border-r' />\n                        ) : null}\n                        <Input placeholder={placeholder} />\n                        <div\n                            className={fieldBorderStyles({\n                                ...renderProps,\n                                className: 'grid h-10 place-content-center border-s'\n                            })}\n                        >\n                            {isMobile ? (\n                                <StepperButton slot='increment' />\n                            ) : (\n                                <div className='flex h-full flex-col'>\n                                    <StepperButton\n                                        slot='increment'\n                                        emblemType='chevron'\n                                        className='h-5 px-1'\n                                    />\n                                    <div\n                                        className={fieldBorderStyles({\n                                            ...renderProps,\n                                            className: 'border-b'\n                                        })}\n                                    />\n                                    <StepperButton\n                                        slot='decrement'\n                                        emblemType='chevron'\n                                        className='h-5 px-1'\n                                    />\n                                </div>\n                            )}\n                        </div>\n                    </>\n                )}\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </NumberFieldPrimitive>\n    )\n}\n\ninterface StepperButtonProps extends ButtonProps {\n    slot: 'increment' | 'decrement'\n    emblemType?: 'chevron' | 'default'\n    className?: string\n}\n\nconst StepperButton = ({\n    slot,\n    className,\n    emblemType = 'default',\n    ...props\n}: StepperButtonProps) => {\n    const icon =\n        emblemType === 'chevron' ? (\n            slot === 'increment' ? (\n                <IconChevronUp className='size-5' />\n            ) : (\n                <IconChevronDown className='size-5' />\n            )\n        ) : slot === 'increment' ? (\n            <IconPlus />\n        ) : (\n            <IconMinus />\n        )\n    return (\n        <Button className={stepperButton({ className })} slot={slot} {...props}>\n            {icon}\n        </Button>\n    )\n}\n\nexport { NumberField, type NumberFieldProps }\n",
    "type": "ui"
  },
  "link": {
    "component": "@/components/ui/link",
    "raw": "'use client'\n\nimport {\n    composeRenderProps,\n    Link as LinkPrimitive,\n    type LinkProps as LinkPrimitiveProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nconst linkStyles = tv({\n    base: 'forced-colors:outline-[Highlight] focus-visible:outline-2 outline outline-offset-2 disabled:focus-visible:outline-0 outline-0 outline-primary rounded disabled:opacity-60 forced-colors:disabled:text-[GrayText] border-transparent transition-colors disabled:cursor-default',\n    variants: {\n        variant: {\n            unstyled: 'text-foreground',\n            primary:\n                'text-primary hover:brightness-90 forced-colors:disabled:text-[GrayText]',\n            danger: 'text-danger hover:brightness-90 forced-colors:disabled:text-[GrayText]',\n            secondary:\n                'text-secondary hover:brightness-90 forced-colors:disabled:text-[GrayText]'\n        }\n    },\n    defaultVariants: {\n        variant: 'unstyled'\n    }\n})\n\ninterface LinkProps extends LinkPrimitiveProps {\n    variant?: 'primary' | 'secondary' | 'danger' | 'unstyled'\n}\n\nconst Link = ({ className, ...props }: LinkProps) => {\n    return (\n        <LinkPrimitive\n            aria-label={props['aria-label'] ?? 'Link'}\n            {...props}\n            className={composeRenderProps(className, (className, ...renderProps) =>\n                linkStyles({ ...renderProps, variant: props.variant, className })\n            )}\n        />\n    )\n}\n\nexport { Link, type LinkProps }\n",
    "type": "ui"
  },
  "grid": {
    "component": "@/components/ui/grid",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { Collection } from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\n\nconst gridStyles = tv(\n    {\n        base: 'grid',\n        variants: {\n            // Columns\n            columns: {\n                1: 'grid-cols-1',\n                2: 'grid-cols-2',\n                3: 'grid-cols-3',\n                4: 'grid-cols-4',\n                5: 'grid-cols-5',\n                6: 'grid-cols-6',\n                7: 'grid-cols-7',\n                8: 'grid-cols-8',\n                9: 'grid-cols-9',\n                10: 'grid-cols-10',\n                11: 'grid-cols-11',\n                12: 'grid-cols-12'\n            },\n\n            // Rows\n            rows: {\n                1: 'grid-rows-1',\n                2: 'grid-rows-2',\n                3: 'grid-rows-3',\n                4: 'grid-rows-4',\n                5: 'grid-rows-5',\n                6: 'grid-rows-6',\n                7: 'grid-rows-7',\n                8: 'grid-rows-8',\n                9: 'grid-rows-9',\n                10: 'grid-rows-10',\n                11: 'grid-rows-11',\n                12: 'grid-rows-12'\n            },\n\n            // Flow\n            flow: {\n                row: 'grid-flow-row',\n                col: 'grid-flow-col',\n                rowDense: 'grid-flow-row-dense',\n                colDense: 'grid-flow-col-dense',\n                dense: 'grid-flow-dense'\n            },\n\n            // Gap\n            gap: {\n                0: 'gap-0',\n                0.5: 'gap-0.5',\n                1: 'gap-1',\n                1.5: 'gap-1.5',\n                2: 'gap-2',\n                2.5: 'gap-2.5',\n                3: 'gap-3',\n                3.5: 'gap-3.5',\n                4: 'gap-4',\n                5: 'gap-5',\n                6: 'gap-6',\n                7: 'gap-7',\n                8: 'gap-8',\n                9: 'gap-9',\n                10: 'gap-10',\n                11: 'gap-11',\n                12: 'gap-12',\n                14: 'gap-14',\n                16: 'gap-16',\n                20: 'gap-20',\n                24: 'gap-24'\n            },\n            gapX: {\n                0: 'gap-x-0',\n                0.5: 'gap-x-0.5',\n                1: 'gap-x-1',\n                1.5: 'gap-x-1.5',\n                2: 'gap-x-2',\n                2.5: 'gap-x-2.5',\n                3: 'gap-x-3',\n                3.5: 'gap-x-3.5',\n                4: 'gap-x-4',\n                5: 'gap-x-5',\n                6: 'gap-x-6',\n                7: 'gap-x-7',\n                8: 'gap-x-8',\n                9: 'gap-x-9',\n                10: 'gap-x-10',\n                11: 'gap-x-11',\n                12: 'gap-x-12',\n                14: 'gap-x-14',\n                16: 'gap-x-16',\n                20: 'gap-x-20',\n                24: 'gap-x-24'\n            },\n            gapY: {\n                0: 'gap-y-0',\n                0.5: 'gap-y-0.5',\n                1: 'gap-y-1',\n                1.5: 'gap-y-1.5',\n                2: 'gap-y-2',\n                2.5: 'gap-y-2.5',\n                3: 'gap-y-3',\n                3.5: 'gap-y-3.5',\n                4: 'gap-y-4',\n                5: 'gap-y-5',\n                6: 'gap-y-6',\n                7: 'gap-y-7',\n                8: 'gap-y-8',\n                9: 'gap-y-9',\n                10: 'gap-y-10',\n                11: 'gap-y-11',\n                12: 'gap-y-12',\n                14: 'gap-y-14',\n                16: 'gap-y-16',\n                20: 'gap-y-20',\n                24: 'gap-y-24'\n            }\n        },\n        defaultVariants: {\n            columns: 1\n        }\n    },\n    {\n        responsiveVariants: true\n    }\n)\n\ninterface GridProps\n    extends React.HTMLAttributes<HTMLDivElement>,\n        VariantProps<typeof gridStyles> {\n    className?: string\n    debug?: boolean\n}\n\nconst Grid = ({\n    className,\n    gap,\n    gapX,\n    gapY,\n    flow,\n    columns,\n    rows,\n    ...props\n}: GridProps) => {\n    return (\n        <div\n            aria-label={props['aria-label'] || 'grid'}\n            className={gridStyles({\n                gap: gap ?? gapX ?? gapY,\n                gapX: gapX ?? gap,\n                gapY: gapY ?? gap,\n                flow: flow ?? 'row',\n                columns: columns ?? 1,\n                rows: rows ?? 1,\n                className:\n                    'debug' in props\n                        ? cn(\n                              '[&>.grid-cell]:border [&>.grid-cell]:border-warning',\n                              className\n                          )\n                        : className\n            })}\n            {...props}\n        >\n            {props.children}\n        </div>\n    )\n}\n\nconst gridItemStyles = tv(\n    {\n        base: 'grid-cell focus:outline-none',\n        variants: {\n            colSpan: {\n                auto: 'col-auto',\n                1: 'col-span-1',\n                2: 'col-span-2',\n                3: 'col-span-3',\n                4: 'col-span-4',\n                5: 'col-span-5',\n                6: 'col-span-6',\n                7: 'col-span-7',\n                8: 'col-span-8',\n                9: 'col-span-9',\n                10: 'col-span-10',\n                11: 'col-span-11',\n                12: 'col-span-12',\n                full: 'col-span-full'\n            },\n            colStart: {\n                1: 'col-start-1',\n                2: 'col-start-2',\n                3: 'col-start-3',\n                4: 'col-start-4',\n                5: 'col-start-5',\n                6: 'col-start-6',\n                7: 'col-start-7',\n                8: 'col-start-8',\n                9: 'col-start-9',\n                10: 'col-start-10',\n                11: 'col-start-11',\n                12: 'col-start-12',\n                13: 'col-start-13',\n                auto: 'col-start-auto'\n            },\n            colEnd: {\n                1: 'col-end-1',\n                2: 'col-end-2',\n                3: 'col-end-3',\n                4: 'col-end-4',\n                5: 'col-end-5',\n                6: 'col-end-6',\n                7: 'col-end-7',\n                8: 'col-end-8',\n                9: 'col-end-9',\n                10: 'col-end-10',\n                11: 'col-end-11',\n                12: 'col-end-12',\n                13: 'col-end-13',\n                auto: 'col-end-auto'\n            },\n            rowSpan: {\n                auto: 'row-auto',\n                1: 'row-span-1',\n                2: 'row-span-2',\n                3: 'row-span-3',\n                4: 'row-span-4',\n                5: 'row-span-5',\n                6: 'row-span-6',\n                7: 'row-span-7',\n                8: 'row-span-8',\n                9: 'row-span-9',\n                10: 'row-span-10',\n                11: 'row-span-11',\n                12: 'row-span-12',\n                full: 'row-span-full'\n            },\n            rowStart: {\n                1: 'row-start-1',\n                2: 'row-start-2',\n                3: 'row-start-3',\n                4: 'row-start-4',\n                5: 'row-start-5',\n                6: 'row-start-6',\n                7: 'row-start-7',\n                8: 'row-start-8',\n                9: 'row-start-9',\n                10: 'row-start-10',\n                11: 'row-start-11',\n                12: 'row-start-12',\n                13: 'row-start-13',\n                auto: 'row-start-auto'\n            },\n            rowEnd: {\n                1: 'row-end-1',\n                2: 'row-end-2',\n                3: 'row-end-3',\n                4: 'row-end-4',\n                5: 'row-end-5',\n                6: 'row-end-6',\n                7: 'row-end-7',\n                8: 'row-end-8',\n                9: 'row-end-9',\n                10: 'row-end-10',\n                11: 'row-end-11',\n                12: 'row-end-12',\n                13: 'row-end-13',\n                auto: 'row-end-auto'\n            }\n        }\n    },\n    {\n        responsiveVariants: ['sm', 'md', 'lg', 'xl', '2xl']\n    }\n)\n\ninterface GridItemProps\n    extends React.HTMLAttributes<HTMLDivElement>,\n        VariantProps<typeof gridItemStyles> {\n    className?: string\n}\n\nconst GridItem = ({\n    children,\n    className,\n    colSpan,\n    rowSpan,\n    colStart,\n    colEnd,\n    rowStart,\n    rowEnd,\n    ...props\n}: GridItemProps) => {\n    return (\n        <div\n            className={gridItemStyles({\n                colSpan,\n                rowSpan,\n                colStart,\n                colEnd,\n                rowStart,\n                rowEnd,\n                className\n            })}\n            {...props}\n        >\n            {children}\n        </div>\n    )\n}\n\nconst GridCollection = Collection\n\nGrid.Collection = GridCollection\nGrid.Item = GridItem\n\nexport { Grid, gridItemStyles, gridStyles }\n",
    "type": "ui"
  },
  "show-more": {
    "component": "@/components/ui/show-more",
    "raw": "'use client'\n\nimport { useState } from 'react'\n\nimport { IconChevronDown } from 'cleon-icons'\nimport { domAnimation, LazyMotion, m } from 'framer-motion'\nimport { Text, ToggleButton } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\n\nimport { buttonVariants } from './button'\n\nconst showMoreStyles = tv({\n    base: 'text-sm leading-6 after:border-muted before:border-muted',\n    variants: {\n        orientation: {\n            vertical: 'mx-1 h-auto self-stretch',\n            horizontal: 'my-0.5 h-px w-full self-stretch'\n        }\n    },\n    compoundVariants: [\n        {\n            orientation: 'vertical',\n            className:\n                'mx-2 flex flex-col items-center before:border-l before:flex-1 before:mb-2 after:border-r after:flex-1 after:mt-2'\n        },\n        {\n            orientation: 'horizontal',\n            className:\n                'self-stretch my-2 flex items-center before:border-t before:flex-1 before:mr-2 after:border-t after:flex-1 after:ml-2'\n        }\n    ],\n    defaultVariants: {\n        orientation: 'horizontal'\n    }\n})\n\ninterface ShowMoreProps extends React.ComponentProps<typeof ToggleButton> {\n    className?: string\n    orientation?: 'horizontal' | 'vertical'\n    as?: 'text' | 'button'\n    text?: string\n}\n\nconst ShowMore = ({\n    as = 'button',\n    orientation = 'horizontal',\n    className,\n    ...props\n}: ShowMoreProps) => {\n    return (\n        <div className={showMoreStyles({ orientation, className })}>\n            {as === 'button' ? (\n                <ToggleButton\n                    {...props}\n                    className={buttonVariants({\n                        variant: 'outline',\n                        size: 'sm'\n                    })}\n                />\n            ) : (\n                <Text slot='description'>{props.text}</Text>\n            )}\n        </div>\n    )\n}\n\ninterface ContentRevealProps {\n    initialHeight?: number\n    initialOpacity?: number\n    showMoreText?: string\n    showLessText?: string\n    gradientTransparency?: boolean\n    children: React.ReactNode\n    className?: string\n}\n\nfunction ContentReveal({\n    children,\n    initialHeight = 128,\n    initialOpacity = 1,\n    showMoreText = 'Show More',\n    showLessText = 'Show Less',\n    gradientTransparency = true,\n    className\n}: ContentRevealProps) {\n    const [isExpanded, setIsExpanded] = useState(false)\n    const animate = {\n        transition: { type: 'tween' },\n        height: isExpanded ? 'auto' : initialHeight,\n        opacity: isExpanded ? 1 : initialOpacity\n    }\n    return (\n        <div className={cn('relative overflow-visible', className)}>\n            <LazyMotion features={domAnimation} strict>\n                <div aria-expanded={isExpanded}>\n                    <m.div\n                        style={{ overflow: 'hidden' }}\n                        initial={{ height: initialHeight, opacity: initialOpacity }}\n                        exit={{ height: initialHeight, opacity: initialOpacity }}\n                        animate={animate}\n                    >\n                        {children}\n                    </m.div>\n                </div>\n            </LazyMotion>\n            {gradientTransparency && (\n                <div\n                    className={cn(\n                        'absolute inset-0 rounded-md bg-gradient-to-b from-transparent via-background to-background',\n                        isExpanded && 'hidden'\n                    )}\n                ></div>\n            )}\n            <ShowMore\n                className={cn('absolute -bottom-2')}\n                isSelected={isExpanded}\n                onChange={setIsExpanded}\n            >\n                {isExpanded ? showLessText : showMoreText}\n                <IconChevronDown\n                    className={cn(\n                        isExpanded ? 'rotate-180' : '',\n                        'size-4 transition duration-400'\n                    )}\n                />\n            </ShowMore>\n        </div>\n    )\n}\n\nexport { ContentReveal, ShowMore }\n",
    "type": "ui"
  },
  "keyboard": {
    "component": "@/components/ui/keyboard",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { Keyboard as KeyboardPrimitive } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nconst keyboardStyles = tv({\n    slots: {\n        base: '-mr-1 ml-auto hidden items-center gap-[0.25rem] px-1 lg:inline-flex',\n        kbd: [\n            'text-center font-sans capitalize text-muted-foreground group-focus:text-foreground forced-colors:group-focus:text-[HighlightText]',\n            'inline-grid min-h-5 min-w-5 place-content-center rounded bg-background font-sans text-[.75rem] uppercase text-foreground ring-1 ring-foreground/10 group-focus:opacity-60'\n        ]\n    }\n})\n\nconst { base, kbd } = keyboardStyles()\n\ninterface KeyboardProps extends React.HTMLAttributes<HTMLElement> {\n    keys: string | string[]\n    classNames?: {\n        base?: string\n        kbd?: string\n    }\n}\n\nconst Keyboard = ({ keys, classNames, className, ...props }: KeyboardProps) => {\n    return (\n        <KeyboardPrimitive\n            className={base({ className: classNames?.base ?? className })}\n            {...props}\n        >\n            {(Array.isArray(keys) ? keys : keys.split('')).map((char, index) => (\n                <kbd\n                    key={index}\n                    className={kbd({\n                        className: index > 0 && char.length > 1 ? 'pl-1' : classNames?.kbd\n                    })}\n                >\n                    {char}\n                </kbd>\n            ))}\n        </KeyboardPrimitive>\n    )\n}\n\nexport { Keyboard, type KeyboardProps }\n",
    "type": "ui"
  },
  "dynamic-overlay": {
    "component": "@/components/ui/dynamic-overlay",
    "raw": "'use client'\n\nimport * as Primitive from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { cn, useMediaQuery } from '@/lib/utils'\n\nimport { Modal } from './modal'\nimport { Popover } from './popover'\n\nconst drawerStyles = tv({\n    base: [\n        'fixed bottom-0 top-auto z-50 w-full max-w-xl place-content-center gap-4 rounded-t-xl border border-b-transparent bg-background shadow-lg outline-none',\n        'entering:animate-in entering:fade-in-0 entering:slide-in-from-bottom-1/2 entering:[transition-timing-function:ease-out',\n        'exiting:animate-out exiting:fade-out-0 exiting:slide-out-to-bottom-1/2 exiting:[transition-timing-function:ease]'\n    ]\n})\n\ninterface OverlayProps\n    extends Omit<Primitive.DialogProps, 'children' | 'className' | 'style'>,\n        Omit<Primitive.PopoverProps, 'children' | 'className' | 'style'>,\n        Omit<VariantProps<typeof drawerStyles>, 'className'> {\n    className?:\n        | string\n        | Primitive.DialogProps['className']\n        | Primitive.PopoverProps['className']\n    children: React.ReactNode\n}\n\nconst DynamicOverlay = ({ className, children, ...props }: OverlayProps) => {\n    const isMobile = useMediaQuery('(max-width: 600px)')\n\n    return isMobile ? (\n        <Primitive.Modal\n            {...props}\n            isDismissable\n            className={cn(drawerStyles(), className)}\n        >\n            {children}\n\n            <div className='pb-4 px-4 max-w-[inherit]'>\n                <Modal.Close className='w-full'>Close</Modal.Close>\n            </div>\n        </Primitive.Modal>\n    ) : (\n        <Popover.Picker {...props} className={cn('', className)}>\n            {children}\n        </Popover.Picker>\n    )\n}\n\nexport { DynamicOverlay }\n",
    "type": "ui"
  },
  "carousel": {
    "component": "@/components/ui/carousel",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconChevronLeft, IconChevronRight } from 'cleon-icons'\nimport useEmblaCarousel, { type UseEmblaCarouselType } from 'embla-carousel-react'\nimport {\n    ListBox,\n    ListBoxItem,\n    Section,\n    type ListBoxItemProps,\n    type SectionProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { Button, type ButtonProps } from './button'\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselContextProps = {\n    carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n    api: ReturnType<typeof useEmblaCarousel>[1]\n    scrollPrev: () => void\n    scrollNext: () => void\n    canScrollPrev: boolean\n    canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nconst useCarousel = () => {\n    const context = React.useContext(CarouselContext)\n\n    if (!context) {\n        throw new Error('useCarousel must be used within a <Carousel />')\n    }\n\n    return context\n}\n\ninterface CarouselProps extends React.HTMLAttributes<HTMLDivElement> {\n    opts?: CarouselOptions\n    plugins?: CarouselPlugin\n    orientation?: 'horizontal' | 'vertical'\n    setApi?: (api: CarouselApi) => void\n}\n\nconst Carousel = ({\n    orientation = 'horizontal',\n    opts,\n    setApi,\n    plugins,\n    className,\n    children,\n    ...props\n}: CarouselProps) => {\n    const [carouselRef, api] = useEmblaCarousel(\n        {\n            ...opts,\n            axis: orientation === 'horizontal' ? 'x' : 'y'\n        },\n        plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n        if (!api) {\n            return\n        }\n\n        setCanScrollPrev(api.canScrollPrev())\n        setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n        api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n        api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n        (event: React.KeyboardEvent<HTMLDivElement>) => {\n            if (event.key === 'ArrowLeft') {\n                event.preventDefault()\n                scrollPrev()\n            } else if (event.key === 'ArrowRight') {\n                event.preventDefault()\n                scrollNext()\n            }\n        },\n        [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n        if (!api || !setApi) {\n            return\n        }\n\n        setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n        if (!api) {\n            return\n        }\n\n        onSelect(api)\n        api.on('reInit', onSelect)\n        api.on('select', onSelect)\n\n        return () => {\n            api?.off('select', onSelect)\n        }\n    }, [api, onSelect])\n\n    return (\n        <CarouselContext.Provider\n            value={{\n                carouselRef,\n                api: api,\n                opts,\n                orientation:\n                    orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),\n                scrollPrev,\n                scrollNext,\n                canScrollPrev,\n                canScrollNext\n            }}\n        >\n            <div\n                onKeyDownCapture={handleKeyDown}\n                className={cn('relative', className)}\n                role='region'\n                aria-roledescription='carousel'\n                {...props}\n            >\n                {children}\n            </div>\n        </CarouselContext.Provider>\n    )\n}\n\nconst CarouselContent = <T extends object>({ className, ...props }: SectionProps<T>) => {\n    const { carouselRef, orientation } = useCarousel()\n\n    return (\n        <ListBox\n            layout={orientation === 'vertical' ? 'stack' : 'grid'}\n            aria-label='Slides'\n            orientation={orientation}\n            ref={carouselRef}\n            className='overflow-hidden'\n        >\n            <Section\n                className={cn(\n                    'flex',\n                    orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',\n                    className\n                )}\n                {...props}\n            />\n        </ListBox>\n    )\n}\n\nconst CarouselItem = ({ className, ...props }: ListBoxItemProps) => {\n    const { orientation } = useCarousel()\n\n    return (\n        <ListBoxItem\n            aria-label={`Slide ${props.id}`}\n            aria-roledescription='slide'\n            className={cn(\n                'min-w-0 shrink-0 focus:outline-none grow-0 basis-full focus-visible:outline-none',\n                orientation === 'horizontal' ? 'pl-4' : 'pt-4',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nconst CarouselHandler = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n    const { orientation } = useCarousel()\n    return (\n        <div\n            ref={ref}\n            className={cn(\n                'mt-6 z-20 relative flex items-center gap-x-2',\n                orientation === 'horizontal' ? 'justify-end' : 'justify-center',\n                className\n            )}\n            {...props}\n        />\n    )\n})\nCarouselHandler.displayName = 'CarouselHandler'\n\nconst CarouselButton = ({\n    slot,\n    className,\n    variant = 'outline',\n    shape = 'circle',\n    size = 'icon',\n    ...props\n}: ButtonProps & { slot: 'previous' | 'next' }) => {\n    const { orientation, scrollPrev, canScrollPrev, scrollNext, canScrollNext } =\n        useCarousel()\n    const isNext = slot === 'next'\n    const canScroll = isNext ? canScrollNext : canScrollPrev\n    const scroll = isNext ? scrollNext : scrollPrev\n    const Icon = isNext ? IconChevronRight : IconChevronLeft\n\n    return (\n        <Button\n            aria-label={isNext ? 'Next slide' : 'Previous slide'}\n            slot={slot}\n            variant={variant}\n            size={size}\n            shape={shape}\n            className={cn(orientation === 'vertical' ? 'rotate-90' : '', className)}\n            isDisabled={!canScroll}\n            onPress={scroll}\n            {...props}\n        >\n            <Icon className='size-4' />\n        </Button>\n    )\n}\n\nCarousel.Button = CarouselButton\nCarousel.Content = CarouselContent\nCarousel.Handler = CarouselHandler\nCarousel.Item = CarouselItem\n\nexport { Carousel, type CarouselApi }\n",
    "type": "ui"
  },
  "dropdown": {
    "component": "@/components/ui/dropdown",
    "raw": "'use client'\n\nimport { IconCheck } from 'cleon-icons'\nimport {\n    Collection,\n    composeRenderProps,\n    Header,\n    ListBoxItem as ListBoxItemPrimitive,\n    Section,\n    Text,\n    type ListBoxItemProps,\n    type SectionProps,\n    type TextProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\n\nconst dropdownItemStyles = tv({\n    base: [\n        'group flex cursor-default select-none items-center gap-x-1.5 rounded-[calc(var(--radius)-1px)] py-2 pl-2.5 relative pr-1.5 text-base outline outline-0 forced-color-adjust-none lg:text-sm',\n        'has-submenu:open:data-[danger=true]:bg-danger/20 has-submenu:open:data-[danger=true]:text-danger',\n        'has-submenu:open:bg-accent has-submenu:open:text-accent-foreground [&[data-has-submenu][data-open]>[data-slot=icon]]:text-accent-foreground',\n        '[&_[data-slot=avatar]]:-mr-0.5 [&_[data-slot=avatar]]:size-6 sm:[&_[data-slot=avatar]]:size-5',\n        '[&>[data-slot=icon]]:size-4 [&>[data-slot=icon]]:shrink-0 [&>[data-slot=icon]]:text-muted-foreground [&[data-hovered]>[data-slot=icon]]:text-accent-foreground [&[data-focused]>[data-slot=icon]]:text-accent-foreground [&[data-danger]>[data-slot=icon]]:text-danger/60',\n        'forced-colors:[&>[data-slot=icon]]:text-[CanvasText] forced-colors:[&>[data-slot=icon]]:group-data-[focus]:text-[Canvas] '\n    ],\n    variants: {\n        isDisabled: {\n            false: 'text-foreground',\n            true: 'text-muted-foreground forced-colors:text-[GrayText]'\n        },\n        isFocused: {\n            false: 'data-[danger=true]:text-danger',\n            true: [\n                'bg-accent text-accent-foreground forced-colors:bg-[Highlight] forced-colors:text-[HighlightText]',\n                'data-[danger=true]:bg-danger data-[danger=true]:text-danger-foreground',\n                '[&_.text-muted-foreground]:text-accent-foreground/80 [&[data-slot=label]]:text-accent-foreground [&[data-slot=description]]:text-accent-foreground'\n            ]\n        }\n    },\n    compoundVariants: [\n        {\n            isFocused: false,\n            isOpen: true,\n            className: 'bg-secondary'\n        }\n    ]\n})\n\ninterface DropdownSectionProps<T> extends SectionProps<T> {\n    title?: string\n}\n\nconst dropdownSectionStyles = tv({\n    slots: {\n        section:\n            \"-mt-[5px] xss3 flex flex-col gap-y-0.5 after:content-[''] after:block after:h-[5px]\",\n        header: 'text-sm font-medium text-muted-foreground bg-background px-4 py-2 truncate min-w-[--trigger-width] sticky -top-[5px] backdrop-blur -mt-px -mb-0.5 -mx-1 z-10 supports-[-moz-appearance:none]:bg-background border-y [&+*]:mt-1'\n    }\n})\n\nconst { section, header } = dropdownSectionStyles()\n\nconst DropdownSection = <T extends object>({\n    className,\n    ...props\n}: DropdownSectionProps<T>) => {\n    return (\n        <Section className={section({ className })}>\n            {'title' in props && <Header className={header()}>{props.title}</Header>}\n            <Collection items={props.items}>{props.children}</Collection>\n        </Section>\n    )\n}\n\nconst DropdownItem = ({ className, ...props }: ListBoxItemProps) => {\n    const textValue =\n        props.textValue ||\n        (typeof props.children === 'string' ? props.children : undefined)\n    return (\n        <ListBoxItemPrimitive\n            textValue={textValue}\n            className={composeRenderProps(className, (className, renderProps) =>\n                dropdownItemStyles({ ...renderProps, className })\n            )}\n            {...props}\n        >\n            {composeRenderProps(props.children, (children, { isSelected }) => (\n                <>\n                    <span className='flex flex-1 items-center gap-2 truncate font-normal group-selected:font-medium'>\n                        {children}\n                    </span>\n\n                    {isSelected && (\n                        <span className='absolute right-2 top-3 lg:top-2.5'>\n                            <IconCheck />\n                        </span>\n                    )}\n                </>\n            ))}\n        </ListBoxItemPrimitive>\n    )\n}\n\ninterface DropdownItemSlot extends TextProps {\n    label?: TextProps['children']\n    description?: TextProps['children']\n    classNames?: {\n        label?: TextProps['className']\n        description?: TextProps['className']\n    }\n}\n\nconst DropdownItemDetails = ({\n    label,\n    description,\n    classNames,\n    ...props\n}: DropdownItemSlot) => {\n    const { slot, children, title, ...restProps } = props\n\n    return (\n        <div className='flex flex-col gap-1' {...restProps}>\n            {label && (\n                <Text\n                    slot={slot ?? 'label'}\n                    className={cn('font-medium lg:text-sm', classNames?.label)}\n                    {...restProps}\n                >\n                    {label}\n                </Text>\n            )}\n            {description && (\n                <Text\n                    slot={slot ?? 'description'}\n                    className={cn(\n                        'text-muted-foreground text-xs',\n                        classNames?.description\n                    )}\n                    {...restProps}\n                >\n                    {description}\n                </Text>\n            )}\n            {!title && children}\n        </div>\n    )\n}\n\n// Note: This is not exposed component, but it's used in other components to render dropdowns.\nexport { DropdownItem, DropdownItemDetails, dropdownItemStyles, DropdownSection }\n",
    "type": "ui"
  },
  "emoji-picker": {
    "component": "@/components/ui/emoji-picker",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { getCategoryIcon, unicodeToEmoji } from '@/lib/emoji'\nimport emojis from '@/lib/emoji.json'\nimport { cn } from '@/lib/utils'\n\nimport { Button } from './button'\nimport { Popover } from './popover'\nimport { Tabs } from './tabs'\n\ninterface Emoji {\n    no: number\n    code: string\n    flagged: boolean\n    keywords: string[]\n    types?: string[]\n}\n\ninterface EmojiPickerProps {\n    onPickEmoji: (emoji: string) => void\n    open: boolean\n    setOpen: (open: boolean) => void\n    className?: string\n    placement?: 'top' | 'bottom' | 'left' | 'right'\n}\n\nconst EmojiPicker = ({\n    open,\n    setOpen,\n    onPickEmoji,\n    placement = 'top',\n    className\n}: EmojiPickerProps) => {\n    const categories = Object.keys(emojis)\n\n    const triggerRef = React.useRef(null)\n\n    return (\n        <>\n            <Button\n                className={cn(className)}\n                variant='ghost'\n                size='icon'\n                onPress={() => setOpen(!open)}\n                ref={triggerRef}\n            >\n                <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'>\n                    <path\n                        fill='currentColor'\n                        d='M12 2C6.47 2 2 6.5 2 12a10 10 0 0 0 10 10a10 10 0 0 0 10-10A10 10 0 0 0 12 2m3.5 6A1.5 1.5 0 0 1 17 9.5a1.5 1.5 0 0 1-1.5 1.5A1.5 1.5 0 0 1 14 9.5A1.5 1.5 0 0 1 15.5 8m-7 0A1.5 1.5 0 0 1 10 9.5A1.5 1.5 0 0 1 8.5 11A1.5 1.5 0 0 1 7 9.5A1.5 1.5 0 0 1 8.5 8m3.5 9.5c-2.33 0-4.31-1.46-5.11-3.5h10.22c-.81 2.04-2.78 3.5-5.11 3.5'\n                    ></path>\n                </svg>\n            </Button>\n            <Popover.Content\n                placement={placement}\n                showArrow\n                aria-label='Emoji'\n                isOpen={open}\n                onOpenChange={setOpen}\n                triggerRef={triggerRef}\n            >\n                <Tabs>\n                    <Tabs.List>\n                        {categories?.map((category: string, i: number) => (\n                            <Tabs.Label\n                                className='w-full flex justify-center'\n                                id={category}\n                                key={i}\n                            >\n                                {getCategoryIcon(category)}\n                            </Tabs.Label>\n                        ))}\n                    </Tabs.List>\n                    {categories.map((category: string, i: number) => (\n                        <Tabs.Content\n                            id={category}\n                            key={i}\n                            className='p-0 max-h-48 overflow-auto no-scrollbar'\n                        >\n                            <div className='grid grid-cols-8 w-full'>\n                                {emojis[category as keyof typeof emojis].map(\n                                    (emoji: Emoji, i: number) => (\n                                        <Button\n                                            key={i}\n                                            variant='ghost'\n                                            size='icon'\n                                            className='p-2 size-7 sm:size-7 flex items-center justify-center text-center'\n                                            onPress={() =>\n                                                onPickEmoji(unicodeToEmoji(emoji.code))\n                                            }\n                                        >\n                                            {unicodeToEmoji(emoji.code)}\n                                        </Button>\n                                    )\n                                )}\n                            </div>\n                        </Tabs.Content>\n                    ))}\n                </Tabs>\n            </Popover.Content>\n        </>\n    )\n}\nexport { EmojiPicker, type EmojiPickerProps }\n",
    "type": "ui"
  },
  "text-field": {
    "component": "@/components/ui/text-field",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconLoader } from 'cleon-icons'\nimport {\n    TextField as TextFieldPrimitive,\n    type TextFieldProps as TextFieldPrimitiveProps,\n    type ValidationResult\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport {\n    Description,\n    FieldError,\n    FieldGroup,\n    fieldGroupPrefixStyles,\n    Input,\n    Label\n} from './field'\n\ninterface TextFieldProps extends TextFieldPrimitiveProps {\n    label?: string\n    placeholder?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    prefix?: React.ReactNode\n    suffix?: React.ReactNode\n    isLoading?: boolean\n    indicatorPlace?: 'prefix' | 'suffix'\n}\n\nconst TextField = ({\n    label,\n    description,\n    errorMessage,\n    placeholder,\n    prefix,\n    suffix,\n    isLoading,\n    indicatorPlace,\n    ...props\n}: TextFieldProps) => {\n    return (\n        <TextFieldPrimitive\n            {...props}\n            className={cn('group flex flex-col gap-1', props.className)}\n        >\n            {label && <Label>{label}</Label>}\n            <FieldGroup\n                data-loading={isLoading ? 'true' : undefined}\n                className={fieldGroupPrefixStyles()}\n            >\n                {isLoading && indicatorPlace === 'prefix' ? (\n                    <IconLoader className='animate-spin isPfx' />\n                ) : prefix ? (\n                    <span className='atrs isPfx x2e2'>{prefix}</span>\n                ) : null}\n                <Input className='px-2.5' placeholder={placeholder} />\n                {isLoading && indicatorPlace === 'suffix' ? (\n                    <IconLoader className='animate-spin isSfx' />\n                ) : suffix ? (\n                    <span className='atrs isSfx x2e2'>{suffix}</span>\n                ) : null}\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </TextFieldPrimitive>\n    )\n}\n\nexport { TextField, type TextFieldProps }\n",
    "type": "ui"
  },
  "separator": {
    "component": "@/components/ui/separator",
    "raw": "'use client'\n\nimport {\n    Separator as SeparatorPrimitive,\n    type SeparatorProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nconst separatorStyles = tv({\n    base: 'bg-muted shrink-0 forced-colors:bg-[ButtonBorder]',\n    variants: {\n        orientation: {\n            horizontal: 'h-px w-full',\n            vertical: 'w-px'\n        }\n    },\n    defaultVariants: {\n        orientation: 'horizontal'\n    }\n})\n\nconst Separator = ({ className, ...props }: SeparatorProps) => (\n    <SeparatorPrimitive\n        {...props}\n        className={separatorStyles({\n            orientation: props.orientation,\n            className: className\n        })}\n    />\n)\n\nexport { Separator, type SeparatorProps }\n",
    "type": "ui"
  },
  "loader": {
    "component": "@/components/ui/loader",
    "raw": "import type { SVGProps } from 'react'\nimport React from 'react'\n\nimport { IconLoader, IconLoader2 } from 'cleon-icons'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nconst loaderStyles = tv({\n    base: 'relative',\n    variants: {\n        color: {\n            current: 'text-current',\n            primary: 'text-primary',\n            secondary: 'text-muted-foreground',\n            success: 'text-success',\n            warning: 'text-warning',\n            danger: 'text-danger'\n        },\n        size: {\n            small: 'size-4',\n            medium: 'size-6',\n            large: 'size-8',\n            'extra-large': 'size-10'\n        }\n    },\n    defaultVariants: {\n        color: 'current',\n        size: 'small'\n    }\n})\n\ntype LoaderVariantProps = VariantProps<typeof loaderStyles>\n\nconst Bars = (props: SVGProps<SVGSVGElement>) => (\n    <svg\n        data-slot='icon'\n        viewBox='0 0 135 140'\n        xmlns='http://www.w3.org/2000/svg'\n        fill='currentColor'\n        {...props}\n    >\n        <rect y='10' width='15' height='120' rx='6'>\n            <animate\n                attributeName='height'\n                begin='0.5s'\n                dur='1s'\n                values='120;110;100;90;80;70;60;50;40;140;120'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n            <animate\n                attributeName='y'\n                begin='0.5s'\n                dur='1s'\n                values='10;15;20;25;30;35;40;45;50;0;10'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n        </rect>\n        <rect x='30' y='10' width='15' height='120' rx='6'>\n            <animate\n                attributeName='height'\n                begin='0.25s'\n                dur='1s'\n                values='120;110;100;90;80;70;60;50;40;140;120'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n            <animate\n                attributeName='y'\n                begin='0.25s'\n                dur='1s'\n                values='10;15;20;25;30;35;40;45;50;0;10'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n        </rect>\n        <rect x='60' width='15' height='140' rx='6'>\n            <animate\n                attributeName='height'\n                begin='0s'\n                dur='1s'\n                values='120;110;100;90;80;70;60;50;40;140;120'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n            <animate\n                attributeName='y'\n                begin='0s'\n                dur='1s'\n                values='10;15;20;25;30;35;40;45;50;0;10'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n        </rect>\n        <rect x='90' y='10' width='15' height='120' rx='6'>\n            <animate\n                attributeName='height'\n                begin='0.25s'\n                dur='1s'\n                values='120;110;100;90;80;70;60;50;40;140;120'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n            <animate\n                attributeName='y'\n                begin='0.25s'\n                dur='1s'\n                values='10;15;20;25;30;35;40;45;50;0;10'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n        </rect>\n        <rect x='120' y='10' width='15' height='120' rx='6'>\n            <animate\n                attributeName='height'\n                begin='0.5s'\n                dur='1s'\n                values='120;110;100;90;80;70;60;50;40;140;120'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n            <animate\n                attributeName='y'\n                begin='0.5s'\n                dur='1s'\n                values='10;15;20;25;30;35;40;45;50;0;10'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n        </rect>\n    </svg>\n)\nconst Dots = (props: SVGProps<SVGSVGElement>) => (\n    <svg\n        data-slot='icon'\n        viewBox='0 0 120 30'\n        xmlns='http://www.w3.org/2000/svg'\n        fill='currentColor'\n        {...props}\n    >\n        <circle cx='15' cy='15' r='15'>\n            <animate\n                attributeName='r'\n                from='15'\n                to='15'\n                begin='0s'\n                dur='0.8s'\n                values='15;9;15'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n            <animate\n                attributeName='fill-opacity'\n                from='1'\n                to='1'\n                begin='0s'\n                dur='0.8s'\n                values='1;.5;1'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n        </circle>\n        <circle cx='60' cy='15' r='9' fillOpacity='0.3'>\n            <animate\n                attributeName='r'\n                from='9'\n                to='9'\n                begin='0s'\n                dur='0.8s'\n                values='9;15;9'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n            <animate\n                attributeName='fill-opacity'\n                from='0.5'\n                to='0.5'\n                begin='0s'\n                dur='0.8s'\n                values='.5;1;.5'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n        </circle>\n        <circle cx='105' cy='15' r='15'>\n            <animate\n                attributeName='r'\n                from='15'\n                to='15'\n                begin='0s'\n                dur='0.8s'\n                values='15;9;15'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n            <animate\n                attributeName='fill-opacity'\n                from='1'\n                to='1'\n                begin='0s'\n                dur='0.8s'\n                values='1;.5;1'\n                calcMode='linear'\n                repeatCount='indefinite'\n            />\n        </circle>\n    </svg>\n)\nconst Ring = (props: SVGProps<SVGSVGElement>) => <IconLoader2 {...props} />\nconst Spin = (props: SVGProps<SVGSVGElement>) => <IconLoader {...props} />\n\nconst LOADERS = {\n    bars: Bars,\n    dots: Dots,\n    ring: Ring,\n    spin: Spin\n}\nconst DEFAULT_SPINNER = 'ring'\n\nexport interface LoaderProps\n    extends Omit<React.ComponentPropsWithoutRef<'svg'>, 'display' | 'opacity' | 'color'>,\n        LoaderVariantProps {\n    variant?: keyof typeof LOADERS\n}\n\nconst Loader = (props: LoaderProps, ref: React.ForwardedRef<SVGSVGElement>) => {\n    const { className, variant = DEFAULT_SPINNER, color, size, ...spinnerProps } = props\n    const LoaderPrimitive = LOADERS[variant in LOADERS ? variant : DEFAULT_SPINNER]\n\n    return (\n        <LoaderPrimitive\n            role='presentation'\n            className={loaderStyles({\n                color,\n                size,\n                className: ['spin', 'ring'].includes(variant) ? 'animate-spin' : className\n            })}\n            ref={ref}\n            {...spinnerProps}\n        />\n    )\n}\n\nexport { Loader }\n",
    "type": "ui"
  },
  "heading": {
    "component": "@/components/ui/heading",
    "raw": "'use client'\n\nimport {\n    Heading as HeadingPrimitive,\n    type HeadingProps as HeadingPrimitiveProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { isIOS } from '@react-aria/utils'\n\nconst headingStyles = tv({\n    base: 'font-sans tracking-tight text-foreground',\n    variants: {\n        level: {\n            1: 'font-bold text-lg',\n            2: 'font-semibold text-base/6 sm:text-lg/5',\n            3: 'font-semibold text-base/6 sm:text-base/6',\n            4: 'font-medium text-base/6 sm:text-sm/6'\n        },\n        tracking: {\n            tighter: 'tracking-tighter',\n            tight: 'tracking-tight',\n            normal: 'tracking-normal',\n            wide: 'tracking-wide',\n            wider: 'tracking-wider',\n            widest: 'tracking-widest'\n        }\n    }\n})\n\ninterface HeadingProps extends HeadingPrimitiveProps {\n    level?: 1 | 2 | 3 | 4\n    tracking?: 'tighter' | 'tight' | 'normal' | 'wide' | 'wider' | 'widest'\n    className?: string\n}\n\nconst Heading = ({\n    className,\n    tracking = 'normal',\n    level = 1,\n    ...props\n}: HeadingProps) => {\n    return (\n        <HeadingPrimitive\n            level={level}\n            className={headingStyles({\n                level,\n                tracking,\n                className: isIOS() ? 'font-medium' : className\n            })}\n            {...props}\n        />\n    )\n}\n\nexport { Heading, type HeadingProps }\n",
    "type": "ui"
  },
  "date-field": {
    "component": "@/components/ui/date-field",
    "raw": "'use client'\n\nimport {\n    composeRenderProps,\n    DateField as DateFieldPrimitive,\n    DateInput as DateInputPrimitive,\n    DateSegment,\n    type DateFieldProps as DateFieldPrimitiveProps,\n    type DateInputProps,\n    type DateValue,\n    type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\n\nimport { Description, FieldError, fieldGroupStyles, Label } from './field'\n\ninterface DateFieldProps<T extends DateValue> extends DateFieldPrimitiveProps<T> {\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst DateField = <T extends DateValue>({\n    label,\n    description,\n    errorMessage,\n    ...props\n}: DateFieldProps<T>) => {\n    return (\n        <DateFieldPrimitive\n            {...props}\n            className={cn('flex flex-col gap-1', props.className)}\n        >\n            {label && <Label>{label}</Label>}\n            <DateInput />\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </DateFieldPrimitive>\n    )\n}\n\nconst segmentStyles = tv({\n    base: 'inline shrink-0 rounded p-0.5 tracking-wider text-foreground caret-transparent outline outline-0 forced-color-adjust-none type-literal:px-0 lg:text-sm forced-colors:text-[ButtonText]',\n    variants: {\n        isPlaceholder: {\n            true: 'text-muted-foreground'\n        },\n        isDisabled: {\n            true: 'text-foreground/50 forced-colors:text-[GrayText]'\n        },\n        isFocused: {\n            true: [\n                'bg-primary text-primary-foreground forced-colors:bg-[Highlight] forced-colors:text-[HighlightText]',\n                'invalid:bg-danger invalid:text-danger-foreground'\n            ]\n        }\n    }\n})\n\nconst DateInput = (props: Omit<DateInputProps, 'children'>) => {\n    return (\n        <DateInputPrimitive\n            className={composeRenderProps(props.className, (className, renderProps) =>\n                fieldGroupStyles({\n                    ...renderProps,\n                    className: cn(\n                        'min-w-sm block font-mono disabled:bg-secondary uppercase w-full py-2 px-2.5 text-base lg:text-sm/[1.4rem]',\n                        className\n                    )\n                })\n            )}\n            {...props}\n        >\n            {(segment) => <DateSegment segment={segment} className={segmentStyles} />}\n        </DateInputPrimitive>\n    )\n}\n\nexport { DateField, DateInput, segmentStyles, type DateFieldProps }\n",
    "type": "ui"
  },
  "drawer": {
    "component": "@/components/ui/drawer",
    "raw": "'use client'\n\nimport React, { useContext, useEffect, useLayoutEffect, useRef, useState } from 'react'\n\nimport {\n    animate,\n    AnimatePresence,\n    motion,\n    useMotionTemplate,\n    useMotionValue,\n    useMotionValueEvent,\n    useTransform,\n    type Inertia\n} from 'framer-motion'\nimport {\n    Button,\n    Dialog as DialogPrimitive,\n    Heading,\n    Modal,\n    ModalOverlay,\n    type ButtonProps,\n    type DialogProps,\n    type HeadingProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { Dialog } from './dialog'\n\nconst inertiaTransition: Inertia = {\n    type: 'inertia',\n    bounceStiffness: 300,\n    bounceDamping: 40,\n    timeConstant: 300\n}\nconst staticTransition = {\n    duration: 0.5,\n    ease: [0.32, 0.72, 0, 1]\n}\n\nconst drawerMargin = 34\nconst drawerRadius = 32\n\ninterface DrawerContextType {\n    isOpen: boolean\n    openDrawer: () => void\n    closeDrawer: () => void\n    withNotch?: boolean\n}\n\nconst DrawerContext = React.createContext<DrawerContextType | undefined>(undefined)\n\nconst useDrawerContext = () => {\n    const context = useContext(DrawerContext)\n    if (context === undefined) {\n        throw new Error('useDrawerContext must be used within a Drawer')\n    }\n    return context\n}\n\nconst ModalPrimitive = motion(Modal)\nconst ModalOverlayPrimitive = motion(ModalOverlay)\n\nconst DrawerOverlayPrimitive = (\n    props: React.ComponentProps<typeof ModalOverlayPrimitive>\n) => {\n    const { closeDrawer, withNotch } = useDrawerContext()\n    const [contentHeight, setContentHeight] = useState(0)\n    const dialogRef = useRef<HTMLDivElement>(null)\n\n    useLayoutEffect(() => {\n        if (dialogRef.current) {\n            setContentHeight(dialogRef.current.offsetHeight)\n        }\n    }, [])\n\n    const h = Math.min(contentHeight + drawerMargin, window.innerHeight - drawerMargin)\n    const y = useMotionValue(h)\n    const bgOpacity = useTransform(y, [0, h], [0.4, 0])\n    const bg = useMotionTemplate`rgba(0, 0, 0, ${bgOpacity})`\n    const root = document.getElementsByTagName('main')[0] as HTMLElement\n    const bodyScale = useTransform(\n        y,\n        [0, h],\n        [(window.innerWidth - drawerMargin) / window.innerWidth, 1]\n    )\n    const bodyTranslate = useTransform(y, [0, h], [drawerMargin - drawerRadius, 0])\n    const bodyBorderRadius = useTransform(y, [0, h], [drawerRadius, 0])\n\n    useMotionValueEvent(bodyScale, 'change', (v: any) => (root.style.scale = `${v}`))\n    useMotionValueEvent(\n        bodyTranslate,\n        'change',\n        (v: any) => (root.style.translate = `0 ${v}px`)\n    )\n    useMotionValueEvent(\n        bodyBorderRadius,\n        'change',\n        (v) => (root.style.borderRadius = `${v}px`)\n    )\n\n    return (\n        <>\n            <ModalOverlayPrimitive\n                isOpen\n                onOpenChange={closeDrawer}\n                className='fixed inset-0 z-50'\n                style={{ backgroundColor: bg as any }}\n            >\n                <motion.section\n                    aria-labelledby='overlay'\n                    onTap={closeDrawer}\n                    className='fixed inset-0 backdrop-blur-sm'\n                    initial='collapsed'\n                    animate='open'\n                    exit='collapsed'\n                    variants={{\n                        open: { opacity: 1 },\n                        collapsed: { opacity: 0 }\n                    }}\n                    transition={{ duration: 0.4, ease: [0.04, 0.62, 0.23, 0.98] }}\n                ></motion.section>\n                <ModalPrimitive\n                    className={cn(\n                        'absolute bottom-0 w-full rounded-t-2xl bg-background shadow-lg ring-1 ring-foreground/10',\n                        props.className\n                    )}\n                    initial={{ y: h }}\n                    animate={{ y: 0 }}\n                    exit={{ y: h }}\n                    transition={staticTransition}\n                    style={{\n                        y,\n                        top: 'auto',\n                        height: contentHeight + drawerMargin,\n                        maxHeight: `calc(100% - ${drawerMargin}px)`\n                    }}\n                    drag='y'\n                    dragConstraints={{ top: 0, bottom: h }}\n                    onDragEnd={(_e, { offset, velocity }) => {\n                        if (offset.y > h * 0.5 || velocity.y > 10) {\n                            closeDrawer()\n                        } else {\n                            animate(y, 0, { ...inertiaTransition, min: 0, max: 0 })\n                        }\n                    }}\n                    {...props}\n                >\n                    <div ref={dialogRef}>\n                        {withNotch && (\n                            <div className='notch mx-auto mt-2 h-1.5 w-10 rounded-full bg-foreground/20' />\n                        )}\n                        {props.children as React.ReactNode}\n                    </div>\n                </ModalPrimitive>\n            </ModalOverlayPrimitive>\n        </>\n    )\n}\n\ninterface DrawerContentPrimitiveProps\n    extends Omit<React.ComponentProps<typeof Modal>, 'children'> {\n    children?: DialogProps['children']\n}\n\nconst DrawerContentPrimitive = (props: DrawerContentPrimitiveProps) => {\n    const { isOpen } = useDrawerContext()\n\n    const h = window.innerHeight - drawerMargin\n    const y = useMotionValue(h)\n\n    const bodyScale = useTransform(\n        y,\n        [0, h],\n        [(window.innerWidth - drawerMargin) / window.innerWidth, 1]\n    )\n    const bodyTranslate = useTransform(y, [0, h], [drawerMargin - drawerRadius, 0])\n    const bodyBorderRadius = useTransform(y, [0, h], [drawerRadius, 0])\n    return (\n        <motion.div\n            style={{\n                scale: bodyScale,\n                borderRadius: bodyBorderRadius,\n                y: bodyTranslate,\n                transformOrigin: 'center 0'\n            }}\n        >\n            <AnimatePresence>{isOpen && <>{props.children}</>}</AnimatePresence>\n        </motion.div>\n    )\n}\n\nconst DrawerTrigger = (props: ButtonProps) => {\n    const { openDrawer } = useDrawerContext()\n\n    return <Button onPress={openDrawer} {...props} />\n}\n\ninterface DrawerProps {\n    children: React.ReactNode\n    isOpen?: boolean\n    withNotch?: boolean\n    onOpenChange?: (isOpen: boolean) => void\n}\n\nconst Drawer = ({\n    children,\n    withNotch = true,\n    isOpen: controlledIsOpen,\n    onOpenChange\n}: DrawerProps) => {\n    const [internalIsOpen, setInternalIsOpen] = useState(false)\n\n    const isControlled = controlledIsOpen !== undefined\n    const isOpen = isControlled ? controlledIsOpen : internalIsOpen\n\n    useEffect(() => {\n        if (isControlled && onOpenChange) {\n            onOpenChange(isOpen)\n        }\n    }, [isOpen, isControlled, onOpenChange])\n\n    const openDrawer = () => {\n        if (isControlled && onOpenChange) {\n            onOpenChange(true)\n        } else {\n            setInternalIsOpen(true)\n        }\n    }\n\n    const closeDrawer = () => {\n        if (isControlled && onOpenChange) {\n            onOpenChange(false)\n        } else {\n            setInternalIsOpen(false)\n        }\n    }\n\n    if (typeof window === 'undefined') {\n        return null\n    }\n\n    return (\n        <DrawerContext.Provider value={{ isOpen, openDrawer, closeDrawer, withNotch }}>\n            {children}\n        </DrawerContext.Provider>\n    )\n}\n\ninterface DrawerContentProps extends React.ComponentProps<typeof DrawerContentPrimitive> {\n    children: React.ReactNode | ((values: any) => React.ReactNode)\n}\n\nconst DrawerContent = ({ children, className, ...props }: DrawerContentProps) => {\n    const contentRef = useRef<HTMLDivElement>(null)\n    const [contentHeight, setContentHeight] = useState(0)\n\n    useEffect(() => {\n        if (!contentRef.current) return\n\n        const resizeObserver = new ResizeObserver((entries) => {\n            for (const entry of entries) {\n                const cr = entry.contentRect\n                setContentHeight(cr.height)\n            }\n        })\n\n        resizeObserver.observe(contentRef.current)\n\n        return () => {\n            resizeObserver.disconnect()\n        }\n    }, [])\n\n    const childrenToRender =\n        typeof children === 'function'\n            ? (children as (values: any) => React.ReactNode)(DialogPrimitive)\n            : children\n\n    return (\n        <DrawerContentPrimitive>\n            <DrawerOverlayPrimitive {...props}>\n                <DialogPrimitive\n                    className={cn(\n                        'mx-auto flex max-w-3xl flex-col justify-between overflow-y-auto px-4 mt-4 outline-none',\n                        className\n                    )}\n                    style={{\n                        height: contentHeight > 0 ? `${contentHeight}px` : 'auto',\n                        maxHeight: `calc(var(--visual-viewport-height) - 4.5rem)`\n                    }}\n                >\n                    <div ref={contentRef}>{childrenToRender}</div>\n                </DialogPrimitive>\n            </DrawerOverlayPrimitive>\n        </DrawerContentPrimitive>\n    )\n}\n\ninterface DrawerHeaderProps extends React.HTMLAttributes<HTMLDivElement> {\n    className?: string\n    isSticky?: boolean\n}\n\nconst DrawerHeader = ({ className, isSticky = false, ...props }: DrawerHeaderProps) => (\n    <div\n        className={cn(\n            'flex flex-col gap-y-1 text-center sm:text-left bg-background z-50',\n            isSticky && 'sticky top-0',\n            className\n        )}\n        {...props}\n    />\n)\n\nconst DrawerTitle = ({ className, ...props }: HeadingProps) => (\n    <Heading\n        slot='title'\n        className={cn('text-lg font-semibold leading-none tracking-tight', className)}\n        {...props}\n    />\n)\n\nconst DrawerDescription = Dialog.Description\n\nconst DrawerBody = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n    <div\n        className={cn('flex-1 overflow-y-auto overflow-x-hidden py-4', className)}\n        {...props}\n    />\n)\n\nconst DrawerFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n    <div\n        className={cn(\n            'flex shrink-0 pb-1 flex-col-reverse gap-2 sm:flex-row sm:justify-between [&_button:first-child:nth-last-child(1)]:w-full',\n            className\n        )}\n        {...props}\n    />\n)\n\nconst DrawerClose = (props: React.ComponentProps<typeof Dialog.Close>) => {\n    return <Dialog.Close shape='circle' {...props} />\n}\n\nDrawer.Body = DrawerBody\nDrawer.Close = DrawerClose\nDrawer.Content = DrawerContent\nDrawer.Description = DrawerDescription\nDrawer.Footer = DrawerFooter\nDrawer.Header = DrawerHeader\nDrawer.Title = DrawerTitle\nDrawer.Trigger = DrawerTrigger\n\nexport { Drawer }\n",
    "type": "ui"
  },
  "color": {
    "component": "@/components/ui/color",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n    ColorArea as ColorAreaPrimitive,\n    ColorSlider as ColorSliderPrimitive,\n    ColorSwatchPickerItem as ColorSwatchPickerItemPrimitive,\n    ColorSwatchPicker as ColorSwatchPickerPrimitive,\n    ColorSwatch as ColorSwatchPrimitive,\n    ColorThumb as ColorThumbPrimitive,\n    ColorWheel as ColorWheelPrimitive,\n    ColorWheelTrack as ColorWheelTrackPrimitive,\n    composeRenderProps,\n    SliderOutput,\n    type ColorSliderProps as ColorSliderPrimitiveProps,\n    type ColorSwatchPickerItemProps as ColorSwatchPickerItemPrimitiveProps,\n    type ColorSwatchProps as ColorSwatchPrimitiveProps,\n    type ColorThumbProps as ColorThumbPrimitiveProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\nimport { parseColor } from '@react-stately/color'\n\nimport { Description, Label } from './field'\nimport { Slider } from './slider'\n\nconst colorAreaStyles = tv({\n    base: 'size-48 rounded-md border border-background shrink-0 disabled:opacity-50'\n})\n\ninterface ColorAreaProps extends React.ComponentProps<typeof ColorAreaPrimitive> {}\n\nconst ColorArea = ({ className, ...props }: ColorAreaProps) => {\n    return (\n        <ColorAreaPrimitive\n            aria-label={props['aria-label'] ?? 'Color area'}\n            {...props}\n            className={composeRenderProps(className, (className, renderProps) =>\n                colorAreaStyles({\n                    ...renderProps,\n                    className\n                })\n            )}\n        />\n    )\n}\n\ninterface ColorThumbProps extends ColorThumbPrimitiveProps {}\n\nconst colorThumbStyles = tv({\n    base: 'size-5 shadow rounded-full ring-1 ring-inset ring-offset-2 ring-black/50 border border-black/50',\n    variants: {\n        isFocusVisible: {\n            true: 'size-6'\n        }\n    }\n})\n\nconst ColorThumb = ({ className, ...props }: ColorThumbProps) => {\n    return (\n        <ColorThumbPrimitive\n            className={composeRenderProps(className, (className, renderProps) =>\n                colorThumbStyles({\n                    ...renderProps,\n                    className\n                })\n            )}\n            {...props}\n        />\n    )\n}\n\nconst colorSwatchPickerItemStyles = tv({\n    base: 'size-8 rounded-md disabled:opacity-50'\n})\n\nconst ColorSwatchPickerItem = ({\n    className,\n    ...props\n}: ColorSwatchPickerItemPrimitiveProps) => {\n    return (\n        <ColorSwatchPickerItemPrimitive\n            className={composeRenderProps(className, (className, renderProps) =>\n                colorSwatchPickerItemStyles({\n                    ...renderProps,\n                    className\n                })\n            )}\n            {...props}\n        >\n            <ColorSwatch className='size-[inherit] cocspip' />\n        </ColorSwatchPickerItemPrimitive>\n    )\n}\n\ninterface ColorSwatchProps extends ColorSwatchPrimitiveProps {}\n\nconst ColorSwatch = ({ className, ...props }: ColorSwatchProps) => {\n    const needRing = props.color ? isBrightColor(props.color) : false\n    return (\n        <ColorSwatchPrimitive\n            aria-label={props['aria-label'] ?? 'Color swatch'}\n            className={cn(\n                'size-8 cs rounded-md shrink-0',\n                needRing\n                    ? 'ring-1 ring-inset ring-black/10'\n                    : 'dark:ring-1 dark:ring-inset dark:ring-white/10',\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nconst hexToRgb = (hex: string): { r: number; g: number; b: number } | null => {\n    const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i\n    hex = hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b)\n\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n    return result\n        ? {\n              r: parseInt(result[1], 16),\n              g: parseInt(result[2], 16),\n              b: parseInt(result[3], 16)\n          }\n        : null\n}\n\nconst hsbToRgb = (\n    h: number,\n    s: number,\n    b: number\n): { r: number; g: number; b: number } => {\n    s /= 100\n    b /= 100\n    const k = (n: number) => (n + h / 60) % 6\n    const f = (n: number) => b * (1 - s * Math.max(0, Math.min(k(n), 4 - k(n), 1)))\n    return {\n        r: Math.round(255 * f(5)),\n        g: Math.round(255 * f(3)),\n        b: Math.round(255 * f(1))\n    }\n}\n\nconst luminance = (r: number, g: number, b: number): number => {\n    const a = [r, g, b].map((v) => {\n        v /= 255\n        return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4)\n    })\n    return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722\n}\n\nconst isBrightColor = (color: any): boolean => {\n    let r, g, b\n\n    if (typeof color === 'string') {\n        if (color.startsWith('#')) {\n            const rgb = hexToRgb(color)\n            if (rgb) {\n                r = rgb.r\n                g = rgb.g\n                b = rgb.b\n            } else {\n                return false\n            }\n        } else if (color.startsWith('rgb')) {\n            const rgbValues = color.match(/\\d+/g)\n            if (rgbValues) {\n                r = parseInt(rgbValues[0], 10)\n                g = parseInt(rgbValues[1], 10)\n                b = parseInt(rgbValues[2], 10)\n            } else {\n                return false\n            }\n        } else {\n            const namedColors: Record<string, string> = {\n                white: '#ffffff',\n                black: '#000000'\n            }\n            const hex = namedColors[color.toLowerCase()]\n            if (hex) {\n                const rgb = hexToRgb(hex)\n                if (rgb) {\n                    r = rgb.r\n                    g = rgb.g\n                    b = rgb.b\n                } else {\n                    return false\n                }\n            } else {\n                return false\n            }\n        }\n    } else if (\n        typeof color === 'object' &&\n        'hue' in color &&\n        'saturation' in color &&\n        'brightness' in color\n    ) {\n        const rgb = hsbToRgb(color.hue, color.saturation, color.brightness)\n        r = rgb.r\n        g = rgb.g\n        b = rgb.b\n    } else {\n        return false\n    }\n\n    const lum = luminance(r, g, b)\n    return lum > 0.75\n}\n\nconst defaultColor = parseColor('hsl(216, 98%, 52%)')\ninterface ColorSliderProps extends ColorSliderPrimitiveProps {\n    label?: string\n    description?: string\n    showOutput?: boolean\n}\n\nconst ColorSlider = ({\n    className,\n    showOutput = true,\n    label,\n    description,\n    ...props\n}: ColorSliderProps) => {\n    return (\n        <ColorSliderPrimitive\n            className={cn('flex disabled:opacity-50 w-full flex-col gap-1', className)}\n            {...props}\n        >\n            <div className='flex items-center gap-2'>\n                {label && <Label className='text-sm [grid-area:label]'>{label}</Label>}\n                {showOutput && (\n                    <SliderOutput className='text-sm ml-auto [grid-area:output]' />\n                )}\n            </div>\n            <Slider.Track className='rounded-md orientation-horizontal:h-8'>\n                <ColorThumb className='top-1/2' />\n            </Slider.Track>\n            {description && <Description>{description}</Description>}\n        </ColorSliderPrimitive>\n    )\n}\n\nconst ColorWheel = ColorWheelPrimitive\nconst ColorWheelTrack = ColorWheelTrackPrimitive\nconst ColorSwatchPicker = ColorSwatchPickerPrimitive\n\nexport {\n    ColorArea,\n    ColorSlider,\n    ColorSwatch,\n    ColorSwatchPicker,\n    ColorSwatchPickerItem,\n    ColorThumb,\n    ColorWheel,\n    ColorWheelTrack,\n    defaultColor,\n    isBrightColor\n}\n",
    "type": "ui"
  },
  "combo-box": {
    "component": "@/components/ui/combo-box",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconChevronDown, IconX } from 'cleon-icons'\nimport {\n    Button as ButtonPrimitive,\n    ComboBox as ComboboxPrimitive,\n    ComboBoxStateContext,\n    type ComboBoxProps as ComboboxPrimitiveProps,\n    type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\n\nimport { Button } from './button'\nimport { DropdownItem, DropdownSection } from './dropdown'\nimport { Description, FieldError, FieldGroup, Input, Label } from './field'\nimport { ListBox } from './list-box'\nimport { Popover } from './popover'\n\nconst comboboxStyles = tv({\n    slots: {\n        base: 'group w-full flex flex-col gap-1',\n        chevronButton:\n            'h-7 w-8 rounded outline-offset-0 active:bg-transparent hover:bg-transparent pressed:bg-transparent',\n        chevronIcon:\n            'text-muted-foreground transition duration-200 group-open:rotate-180 group-open:text-foreground',\n        clearButton:\n            'focus:outline-none absolute inset-y-0 right-0 flex items-center pr-2 text-muted-foreground hover:text-foreground'\n    }\n})\n\nconst { base, chevronButton, chevronIcon, clearButton } = comboboxStyles()\n\ninterface ComboBoxProps<T extends object>\n    extends Omit<ComboboxPrimitiveProps<T>, 'children'> {\n    label?: string\n    placeholder?: string\n    description?: string | null\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    children: React.ReactNode | ((item: T) => React.ReactNode)\n}\n\nconst ComboBox = <T extends object>({\n    label,\n    description,\n    errorMessage,\n    children,\n    placeholder,\n    className,\n    items,\n    ...props\n}: ComboBoxProps<T>) => {\n    return (\n        <ComboboxPrimitive\n            menuTrigger='focus'\n            {...props}\n            className={cn(base(), className)}\n        >\n            <Label>{label}</Label>\n            <FieldGroup className='pl-0 relative'>\n                <Input className='pl-2.5' placeholder={placeholder} />\n                <Button size='icon' variant='ghost' className={chevronButton()}>\n                    {!props?.inputValue && (\n                        <IconChevronDown aria-hidden className={chevronIcon()} />\n                    )}\n                </Button>\n                {props?.inputValue && <ComboBoxClearButton />}\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n            <Popover.Picker>\n                <ListBox.Picker items={items}>{children}</ListBox.Picker>\n            </Popover.Picker>\n        </ComboboxPrimitive>\n    )\n}\n\nconst ComboBoxClearButton = () => {\n    const state = React.useContext(ComboBoxStateContext)\n\n    return (\n        <ButtonPrimitive\n            className={clearButton()}\n            slot={null}\n            aria-label='Clear'\n            onPress={() => {\n                state?.setSelectedKey(null)\n                state?.open()\n            }}\n        >\n            <IconX className='size-4' />\n        </ButtonPrimitive>\n    )\n}\n\nconst ComboBoxItem = DropdownItem\nconst ComboBoxSection = DropdownSection\n\nComboBox.Item = ComboBoxItem\nComboBox.Section = ComboBoxSection\n\nexport { ComboBox, type ComboBoxProps }\n",
    "type": "ui"
  },
  "loading-dots": {
    "component": "@/components/ui/loading-dots",
    "raw": "'use client'\n\nimport { cn } from '@/lib/utils'\n\nconst dots = 'mx-[1px] inline-block size-[0.3125rem] animate-blink rounded-md'\n\nexport const LoadingDots = ({ className }: { className: string }) => {\n    return (\n        <span className='mx-2 inline-flex items-center'>\n            <span className={cn(dots, className)} />\n            <span className={cn(dots, 'animation-delay-[200ms]', className)} />\n            <span className={cn(dots, 'animation-delay-[400ms]', className)} />\n        </span>\n    )\n}\n",
    "type": "ui"
  },
  "popover": {
    "component": "@/components/ui/popover",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n    Button,\n    composeRenderProps,\n    Dialog as DialogPrimitive,\n    DialogTrigger,\n    Modal,\n    ModalOverlay,\n    OverlayArrow,\n    PopoverContext,\n    Popover as PopoverPrimitive,\n    useSlottedContext,\n    type DialogProps,\n    type DialogTriggerProps,\n    type ModalOverlayProps,\n    type PopoverProps as PopoverPrimitiveProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn, useMediaQuery } from '@/lib/utils'\n\nimport { Dialog, type DialogTitleProps } from './dialog'\n\ninterface PopoverSubComponents {\n    Content: typeof PopoverContent\n    Trigger: typeof PopoverTrigger\n    Close: typeof PopoverClose\n    Footer: typeof PopoverFooter\n    Header: typeof PopoverHeader\n    Title: typeof PopoverTitle\n    Description: typeof PopoverDescription\n    Body: typeof PopoverBody\n    Picker: typeof PopoverPicker\n}\n\ntype PopoverComponent = React.FC<DialogTriggerProps> & PopoverSubComponents\n\nconst Popover: PopoverComponent = (props) => {\n    return <DialogTrigger {...props} />\n}\n\nconst PopoverTrigger = Button\nconst PopoverClose = Dialog.Close\nconst PopoverDescription = Dialog.Description\n\nconst PopoverTitle = ({ className, ...props }: DialogTitleProps) => (\n    <Dialog.Title className={cn('leading-none', className)} {...props} />\n)\n\nconst PopoverHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n    <Dialog.Header className={cn('p-0', className)} {...props} />\n)\n\nconst PopoverFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n    <Dialog.Footer className={cn('pt-4 pb-0', className)} {...props} />\n)\n\nconst PopoverBody = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n    <Dialog.Body className={cn('p-0', className)} {...props} />\n)\n\nconst popoverContentStyles = tv({\n    base: [\n        'max-w-xs min-w-80 p-4 rounded-lg border bg-background bg-clip-padding dark:backdrop-blur-2xl dark:backdrop-saturate-200 text-foreground shadow-lg lg:text-sm sm:max-w-3xl forced-colors:bg-[Canvas]'\n    ],\n    variants: {\n        isMenu: {\n            true: {\n                true: 'p-0'\n            }\n        },\n        isEntering: {\n            true: [\n                'duration-50 ease-out animate-in fade-in placement-left:slide-in-from-right-1 placement-right:slide-in-from-left-1 placement-top:slide-in-from-bottom-1 placement-bottom:slide-in-from-top-1'\n            ]\n        },\n        isExiting: {\n            true: 'duration-50 ease-in animate-out fade-out placement-left:slide-out-to-right-1 placement-right:slide-out-to-left-1 placement-top:slide-out-to-bottom-1 placement-bottom:slide-out-to-top-1'\n        }\n    }\n})\n\nconst drawerStyles = tv({\n    base: [\n        'fixed max-h-full bottom-0 p-4 top-auto z-50 w-full bg-background max-w-2xl rounded-t-xl border border-b-transparent outline-none'\n    ],\n    variants: {\n        isMenu: {\n            true: 'p-0'\n        },\n        isEntering: {\n            true: 'animate-in fade-in-0 slide-in-from-bottom-1/2 [transition-timing-function:ease-out'\n        },\n        isExiting: {\n            true: 'animate-out fade-out-0 slide-out-to-bottom-1/2 [transition-timing-function:ease]'\n        }\n    }\n})\n\ninterface PopoverProps\n    extends Omit<React.ComponentProps<typeof Modal>, 'children'>,\n        Omit<PopoverPrimitiveProps, 'children' | 'className'>,\n        ModalOverlayProps {\n    children: React.ReactNode\n    className?: string | ((values: any & { defaultClassName?: string }) => string)\n    showArrow?: boolean\n    style?: React.CSSProperties\n    respectScreen?: boolean\n    'aria-label'?: DialogProps['aria-label']\n    'aria-labelledby'?: DialogProps['aria-labelledby']\n}\n\nconst PopoverContent = ({\n    respectScreen = true,\n    children,\n    showArrow,\n    className,\n    ...props\n}: PopoverProps) => {\n    const isMobile = useMediaQuery('(max-width: 600px)')\n    const popoverContext = useSlottedContext(PopoverContext)!\n    const isMenuTrigger = popoverContext?.trigger === 'MenuTrigger'\n    const isSubmenuTrigger = popoverContext?.trigger === 'SubmenuTrigger'\n    const isMenu = isMenuTrigger || isSubmenuTrigger\n    let offset = showArrow ? 12 : 8\n    offset = isSubmenuTrigger ? offset - 6 : offset\n\n    return isMobile && respectScreen ? (\n        <ModalOverlay\n            className={cn(\n                'fixed left-0 top-0 bg-background/10 isolate z-50 h-[--visual-viewport-height] w-full [--visual-viewport-vertical-padding:16px]',\n                isSubmenuTrigger ? 'bg-background/10' : ''\n            )}\n            {...props}\n            isDismissable\n        >\n            <Modal\n                className={composeRenderProps(className, (className, renderProps) =>\n                    drawerStyles({ ...renderProps, isMenu, className })\n                )}\n            >\n                <DialogPrimitive\n                    aria-label={isMenu ? 'Menu' : props['aria-label']}\n                    className='focus:outline-none touch-none'\n                >\n                    {children}\n                </DialogPrimitive>\n            </Modal>\n        </ModalOverlay>\n    ) : (\n        <PopoverPrimitive\n            offset={offset}\n            {...props}\n            className={composeRenderProps(className, (className, renderProps) =>\n                popoverContentStyles({\n                    ...renderProps,\n                    className\n                })\n            )}\n        >\n            {showArrow && (\n                <OverlayArrow className='group'>\n                    <svg\n                        width={12}\n                        height={12}\n                        viewBox='0 0 12 12'\n                        className='block fill-background stroke-border group-placement-left:-rotate-90 group-placement-right:rotate-90 group-placement-bottom:rotate-180 forced-colors:fill-[Canvas] forced-colors:stroke-[ButtonBorder]'\n                    >\n                        <path d='M0 0 L6 6 L12 0' />\n                    </svg>\n                </OverlayArrow>\n            )}\n            {children}\n        </PopoverPrimitive>\n    )\n}\n\nconst PopoverPicker = ({ children, className, ...props }: PopoverProps) => {\n    return (\n        <PopoverPrimitive\n            {...props}\n            className={composeRenderProps(className, (className, renderProps) =>\n                popoverContentStyles({\n                    ...renderProps,\n                    className: cn(\n                        'max-h-72 overflow-y-auto min-w-[--trigger-width] p-0',\n                        className\n                    )\n                })\n            )}\n        >\n            {children}\n        </PopoverPrimitive>\n    )\n}\n\nPopover.Body = PopoverBody\nPopover.Close = PopoverClose\nPopover.Content = PopoverContent\nPopover.Description = PopoverDescription\nPopover.Footer = PopoverFooter\nPopover.Header = PopoverHeader\nPopover.Picker = PopoverPicker\nPopover.Title = PopoverTitle\nPopover.Trigger = PopoverTrigger\n\nexport { drawerStyles, Popover, popoverContentStyles }\n",
    "type": "ui"
  },
  "time-field": {
    "component": "@/components/ui/time-field",
    "raw": "'use client'\n\nimport {\n    TimeField as TimeFieldPrimitive,\n    type TimeFieldProps as TimeFieldPrimitiveProps,\n    type TimeValue,\n    type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\n\nimport { DateInput } from './date-field'\nimport { Description, FieldError, fieldGroupStyles, Label } from './field'\n\nexport interface TimeFieldProps<T extends TimeValue> extends TimeFieldPrimitiveProps<T> {\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst timeFieldStyles = tv({\n    extend: fieldGroupStyles,\n    base: 'flex w-fit font-mono min-w-28 justify-around whitespace-nowrap p-2 lg:text-sm'\n})\n\nconst TimeField = <T extends TimeValue>({\n    label,\n    className,\n    description,\n    errorMessage,\n    ...props\n}: TimeFieldProps<T>) => {\n    return (\n        <TimeFieldPrimitive {...props} className={cn('flex flex-col gap-1', className)}>\n            <Label>{label}</Label>\n            <DateInput className={timeFieldStyles} />\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </TimeFieldPrimitive>\n    )\n}\n\nexport { TimeField }\n",
    "type": "ui"
  },
  "calendar": {
    "component": "@/components/ui/calendar",
    "raw": "'use client'\n\nimport { IconChevronLeft, IconChevronRight } from 'cleon-icons'\nimport {\n    CalendarCell,\n    CalendarGrid,\n    CalendarGridBody,\n    CalendarGridHeader as CalendarGridHeaderPrimitive,\n    CalendarHeaderCell,\n    Calendar as CalendarPrimitive,\n    type CalendarProps as CalendarPrimitiveProps,\n    composeRenderProps,\n    type DateValue,\n    Heading,\n    RangeCalendar as RangeCalendarPrimitive,\n    type RangeCalendarProps as RangeCalendarPrimitiveProps,\n    Text,\n    useLocale\n} from 'react-aria-components'\nimport { twJoin } from 'tailwind-merge'\nimport { tv } from 'tailwind-variants'\n\nimport { Button } from './button'\n\nconst cellStyles = tv({\n    base: 'flex size-9 cursor-default items-center justify-center rounded-md text-sm outline-none focus:outline-none',\n    variants: {\n        isSelected: {\n            false: 'text-foreground hover:bg-primary/20',\n            true: 'bg-primary text-primary-foreground invalid:bg-danger invalid:text-danger-foreground'\n        },\n        isDisabled: {\n            true: 'text-muted-foreground'\n        }\n    }\n})\n\ninterface CalendarProps<T extends DateValue>\n    extends Omit<CalendarPrimitiveProps<T>, 'visibleDuration'> {\n    errorMessage?: string\n    className?: string\n}\n\nconst Calendar = <T extends DateValue>({\n    errorMessage,\n    className,\n    ...props\n}: CalendarProps<T>) => {\n    return (\n        <CalendarPrimitive {...props}>\n            <CalendarHeader />\n            <CalendarGrid className='[&_td]:px-0'>\n                <CalendarGridHeader />\n                <CalendarGridBody>\n                    {(date) => (\n                        <CalendarCell\n                            date={date}\n                            className={composeRenderProps(\n                                className,\n                                (className, renderProps) =>\n                                    cellStyles({\n                                        ...renderProps,\n                                        className\n                                    })\n                            )}\n                        />\n                    )}\n                </CalendarGridBody>\n            </CalendarGrid>\n            {errorMessage && (\n                <Text slot='errorMessage' className='text-sm text-danger'>\n                    {errorMessage}\n                </Text>\n            )}\n        </CalendarPrimitive>\n    )\n}\n\nconst CalendarHeader = () => {\n    const { direction } = useLocale()\n\n    return (\n        <header className='flex w-full justify-center items-center gap-1 px-1 pb-4'>\n            <Button\n                size='icon'\n                className='[&_[data-slot=icon]]:text-foreground'\n                variant='outline'\n                slot='previous'\n            >\n                {direction === 'rtl' ? (\n                    <IconChevronRight />\n                ) : (\n                    <IconChevronLeft aria-hidden />\n                )}\n            </Button>\n            <Heading className='mx-2 flex-1 text-center text-base font-medium text-foreground' />\n            <Button\n                size='icon'\n                className='[&_[data-slot=icon]]:text-foreground'\n                variant='outline'\n                slot='next'\n            >\n                {direction === 'rtl' ? <IconChevronLeft /> : <IconChevronRight />}\n            </Button>\n        </header>\n    )\n}\n\nconst CalendarGridHeader = () => {\n    return (\n        <CalendarGridHeaderPrimitive>\n            {(day) => (\n                <CalendarHeaderCell className='text-sm lg:text-xs font-semibold text-secondary'>\n                    {day}\n                </CalendarHeaderCell>\n            )}\n        </CalendarGridHeaderPrimitive>\n    )\n}\n\ninterface RangeCalendarProps<T extends DateValue>\n    extends Omit<RangeCalendarPrimitiveProps<T>, 'visibleDuration'> {\n    errorMessage?: string\n}\n\nconst cellRangeStyles = tv({\n    base: 'flex h-full w-full items-center justify-center rounded-md',\n    variants: {\n        selectionState: {\n            none: 'group-hover:bg-primary/20 group-pressed:bg-primary group-pressed:text-primary-foreground',\n            middle: [\n                'group-hover:bg-primary/20',\n                'group-invalid:group-hover:bg-danger',\n                'group-pressed:bg-primary group-pressed:text-primary-foreground',\n                'group-invalid:group-pressed:bg-danger group-invalid:group-pressed:text-danger-foreground'\n            ],\n            cap: 'bg-primary text-primary-foreground group-invalid:bg-danger group-invalid:text-danger-foreground'\n        },\n        isDisabled: {\n            true: 'text-muted-foreground'\n        }\n    }\n})\n\nconst RangeCalendar = <T extends DateValue>({\n    errorMessage,\n    ...props\n}: RangeCalendarProps<T>) => {\n    return (\n        <RangeCalendarPrimitive {...props}>\n            <CalendarHeader />\n            <CalendarGrid className='[&_td]:px-0'>\n                <CalendarGridHeader />\n                <CalendarGridBody>\n                    {(date) => (\n                        <CalendarCell\n                            date={date}\n                            className={twJoin([\n                                'group size-10 lg:size-9 cursor-default lg:text-sm outline outline-0 outside-month:text-zinc-300 selection-start:rounded-s-full selection-end:rounded-e-full forced-colors:selected:bg-[Highlight] forced-colors:invalid:selected:bg-[Mark]',\n                                'selected:bg-primary/10 selected:text-primary forced-colors:selected:text-[HighlightText]',\n                                '[td:first-child_&]:rounded-s-full [td:last-child_&]:rounded-e-full',\n                                'invalid:selected:bg-danger/30'\n                            ])}\n                        >\n                            {({\n                                formattedDate,\n                                isSelected,\n                                isSelectionStart,\n                                isSelectionEnd,\n                                ...renderProps\n                            }) => (\n                                <span\n                                    className={cellRangeStyles({\n                                        ...renderProps,\n                                        selectionState:\n                                            isSelected &&\n                                            (isSelectionStart || isSelectionEnd)\n                                                ? 'cap'\n                                                : isSelected\n                                                  ? 'middle'\n                                                  : 'none'\n                                    })}\n                                >\n                                    {formattedDate}\n                                </span>\n                            )}\n                        </CalendarCell>\n                    )}\n                </CalendarGridBody>\n            </CalendarGrid>\n            {errorMessage && (\n                <Text slot='errorMessage' className='text-sm text-danger'>\n                    {errorMessage}\n                </Text>\n            )}\n        </RangeCalendarPrimitive>\n    )\n}\n\nCalendar.GridHeader = CalendarGridHeader\nCalendar.Header = CalendarHeader\nCalendar.RangeCalendar = RangeCalendar\n\nexport { Calendar, type RangeCalendarProps }\n",
    "type": "ui"
  },
  "badge": {
    "component": "@/components/ui/badge",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nconst badgeVariants = {\n    primary:\n        'ring-primary/30 bg-primary/10 dark:bg-primary/15 text-primary hover:bg-primary/15 dark:hover:bg-primary/10',\n    secondary:\n        'bg-secondary/50 dark:bg-secondary/70 ring-secondary-foreground/20 text-secondary-foreground',\n    success:\n        'dark:ring-success/30 ring-success/40 bg-success/10 dark:bg-success/15 text-success hover:bg-success/15 dark:hover:bg-success/10',\n    info: 'dark:ring-info/30 ring-info/80 bg-info/20 dark:bg-info/15 text-info hover:bg-info/15 dark:hover:bg-info/10',\n    warning:\n        'dark:ring-warning/40 ring-warning/50 bg-warning/10 dark:bg-warning/15 text-warning hover:bg-warning/15 dark:hover:bg-warning/10',\n    danger: 'dark:ring-danger/30 ring-danger/40 bg-danger/10 dark:bg-danger/15 text-danger hover:bg-danger/15 dark:hover:bg-danger/10',\n    dark: 'bg-dark hover:bg-dark/90 ring-inset ring-dark/50 text-dark-foreground'\n}\nconst badgeShapes = {\n    square: 'rounded-md px-1.5',\n    circle: 'px-2 rounded-full'\n}\nconst badgeStyles = tv({\n    base: 'inline-flex items-center gap-x-1.5 py-0.5 text-xs/5 font-medium ring-1 ring-white/10 dark:ring-inset forced-colors:outline [&_[data-slot=icon]]:size-3',\n    variants: {\n        variant: { ...badgeVariants },\n        shape: { ...badgeShapes }\n    },\n    defaultVariants: {\n        variant: 'primary',\n        shape: 'square'\n    }\n})\n\ninterface BadgeProps\n    extends React.HTMLAttributes<HTMLDivElement>,\n        VariantProps<typeof badgeStyles> {\n    className?: string\n    children: React.ReactNode\n}\n\nconst Badge = ({ children, variant, shape, className, ...props }: BadgeProps) => {\n    return (\n        <span {...props} className={badgeStyles({ variant, shape, className })}>\n            {children}\n        </span>\n    )\n}\n\nexport { Badge, badgeShapes, badgeStyles, badgeVariants }\n",
    "type": "ui"
  },
  "form": {
    "component": "@/components/ui/form",
    "raw": "'use client'\n\nimport {\n    Form as FormPrimitive,\n    type FormProps as FormPrimitiveProps\n} from 'react-aria-components'\n\ninterface FormProps extends FormPrimitiveProps {}\n\nconst Form = (props: FormProps) => {\n    return <FormPrimitive {...props} />\n}\n\nexport { Form, type FormProps }\n",
    "type": "ui"
  },
  "card": {
    "component": "@/components/ui/card",
    "raw": "import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\ninterface CardSubComponents {\n    Header: typeof CardHeader\n    Title: typeof CardTitle\n    Description: typeof CardDescription\n    Content: typeof CardContent\n    Footer: typeof CardFooter\n}\n\ntype CardComponent = React.ForwardRefExoticComponent<\n    React.HTMLAttributes<HTMLDivElement>\n> &\n    React.RefAttributes<HTMLDivElement> &\n    CardSubComponents\n\nconst Card: CardComponent = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n    <div\n        ref={ref}\n        className={cn(\n            'card rounded-lg border bg-background text-foreground shadow-sm [&_table]:overflow-hidden',\n            className\n        )}\n        {...props}\n    />\n)) as CardComponent\nCard.displayName = 'Card'\n\nconst CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n    ({ className, ...props }, ref) => (\n        <div\n            ref={ref}\n            className={cn('flex flex-col space-y-1.5 px-6 py-5', className)}\n            {...props}\n        />\n    )\n)\nCardHeader.displayName = 'CardHeader'\n\nconst CardTitle = React.forwardRef<\n    HTMLParagraphElement,\n    React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n    <h3\n        ref={ref}\n        className={cn(\n            'text-lg klda font-semibold leading-none tracking-tight',\n            className\n        )}\n        {...props}\n    />\n))\nCardTitle.displayName = 'CardTitle'\n\nconst CardDescription = React.forwardRef<\n    HTMLParagraphElement,\n    React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n    <p\n        ref={ref}\n        className={cn('sm:text-sm text-base text-muted-foreground', className)}\n        {...props}\n    />\n))\nCardDescription.displayName = 'CardDescription'\n\nconst CardContent = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n    <div\n        ref={ref}\n        className={cn(\n            'px-6 pb-6 has-[table]:p-0 [&:has(table)]:border-t [&_.td]:px-6 [&_.th]:px-6',\n            className\n        )}\n        {...props}\n    />\n))\nCardContent.displayName = 'CardContent'\n\nconst CardFooter = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n    ({ className, ...props }, ref) => (\n        <div\n            ref={ref}\n            className={cn('flex items-center p-6 pt-0', className)}\n            {...props}\n        />\n    )\n)\nCardFooter.displayName = 'CardFooter'\n\nCard.Header = CardHeader\nCard.Footer = CardFooter\nCard.Title = CardTitle\nCard.Description = CardDescription\nCard.Content = CardContent\n\nexport { Card }\n",
    "type": "ui"
  },
  "dialog": {
    "component": "@/components/ui/dialog",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconX } from 'cleon-icons'\nimport {\n    Dialog as DialogPrimitive,\n    type DialogProps,\n    OverlayTriggerStateContext\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { useMediaQuery } from '@/lib/utils'\n\nimport { Button, type ButtonProps } from './button'\nimport { Heading, type HeadingProps } from './heading'\n\nconst dialogStyles = tv({\n    slots: {\n        root: [\n            'dlc peer relative flex max-h-[inherit] [&::-webkit-scrollbar]:size-0.5 [scrollbar-width:thin] flex-col overflow-hidden outline-none peer',\n            '[&:not(:has([data-slot=dialog-body]))]:px-6 [&:has([data-slot=dialog-body])_[data-slot=dialog-header]]:px-6 [&:has([data-slot=dialog-body])_[data-slot=dialog-footer]]:px-6'\n        ],\n        header: 'relative flex flex-col pb-2 pt-6',\n        title: 'flex flex-1 items-center',\n        description: 'text-sm text-muted-foreground mt-1',\n        body: [\n            'flex flex-1 flex-col gap-2 overflow-auto px-6 py-1',\n            'max-h-[calc(var(--visual-viewport-height)-var(--visual-viewport-vertical-padding)-var(--dialog-header-height,0px)-var(--dialog-footer-height,0px))]'\n        ],\n        footer: 'mt-auto flex flex-col-reverse justify-between gap-3 pb-6 pt-4 sm:flex-row',\n        closeIndicator: 'close absolute right-2 top-2 size-6 z-50'\n    }\n})\n\nconst { root, header, title, description, body, footer, closeIndicator } = dialogStyles()\n\nconst Dialog = ({ role, className, ...props }: DialogProps) => {\n    return (\n        <DialogPrimitive\n            {...props}\n            role={role ?? 'dialog'}\n            className={root({ className })}\n        />\n    )\n}\n\nconst DialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n    const headerRef = React.useRef<HTMLHeadingElement>(null)\n\n    React.useEffect(() => {\n        const header = headerRef.current\n        if (!header) {\n            return\n        }\n\n        const observer = new ResizeObserver((entries) => {\n            for (const entry of entries) {\n                header.parentElement?.style.setProperty(\n                    '--dialog-header-height',\n                    `${entry.target.clientHeight}px`\n                )\n            }\n        })\n\n        observer.observe(header)\n        return () => {\n            observer.unobserve(header)\n        }\n    }, [])\n\n    return (\n        <div data-slot='dialog-header' ref={headerRef} className={header({ className })}>\n            {typeof props.children === 'string' ? (\n                <DialogTitle {...props} />\n            ) : (\n                props.children\n            )}\n        </div>\n    )\n}\n\ninterface DialogTitleProps extends HeadingProps {\n    className?: string\n}\n\nconst DialogTitle = ({\n    tracking = 'tight',\n    level = 2,\n    className,\n    ...props\n}: DialogTitleProps) => (\n    <Heading\n        slot='title'\n        tracking={tracking}\n        level={level}\n        className={title({ className })}\n        {...props}\n    />\n)\n\nconst DialogDescription = ({ className, ...props }: HeadingProps) => (\n    <p className={description({ className })} {...props} />\n)\n\nconst DialogBody = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n    <div data-slot='dialog-body' className={body({ className })} {...props} />\n)\n\nconst DialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => {\n    const footerRef = React.useRef<HTMLDivElement>(null)\n\n    React.useEffect(() => {\n        const footer = footerRef.current\n\n        if (!footer) {\n            return\n        }\n\n        const observer = new ResizeObserver((entries) => {\n            for (const entry of entries) {\n                footer.parentElement?.style.setProperty(\n                    '--dialog-footer-height',\n                    `${entry.target.clientHeight}px`\n                )\n            }\n        })\n\n        observer.observe(footer)\n        return () => {\n            observer.unobserve(footer)\n        }\n    }, [])\n    return (\n        <div\n            ref={footerRef}\n            data-slot='dialog-footer'\n            className={footer({ className })}\n            {...props}\n        />\n    )\n}\n\nconst DialogClose = ({ className, ...props }: ButtonProps) => {\n    const state = React.useContext(OverlayTriggerStateContext)!\n    return (\n        <Button\n            className={className}\n            variant='outline'\n            onPress={() => state.close()}\n            {...props}\n        />\n    )\n}\n\ninterface CloseButtonIndicatorProps {\n    className?: string\n    close: () => void\n    isDismissable?: boolean | undefined\n}\n\nconst DialogCloseIndicator = ({ className, ...props }: CloseButtonIndicatorProps) => {\n    const isMobile = useMediaQuery('(max-width: 600px)')\n    const buttonRef = React.useRef<HTMLButtonElement>(null)\n\n    React.useEffect(() => {\n        if (isMobile && buttonRef.current) {\n            buttonRef.current.focus()\n        }\n    }, [isMobile])\n    return props.isDismissable ? (\n        <Button\n            ref={buttonRef}\n            {...(isMobile ? { autoFocus: true } : {})}\n            variant='ghost'\n            size='icon'\n            aria-label='Close'\n            onPress={props.close}\n            className={closeIndicator({ className })}\n        >\n            <IconX className='size-4' />\n        </Button>\n    ) : null\n}\n\nDialog.Body = DialogBody\nDialog.Close = DialogClose\nDialog.CloseIndicator = DialogCloseIndicator\nDialog.Description = DialogDescription\nDialog.Footer = DialogFooter\nDialog.Header = DialogHeader\nDialog.Title = DialogTitle\n\nexport { Dialog, type DialogTitleProps }\n",
    "type": "ui"
  },
  "table": {
    "component": "@/components/ui/table",
    "raw": "'use client'\n\nimport { IconChevronDown, IconChevronUp, IconGripVertical } from 'cleon-icons'\nimport {\n    Button,\n    Cell,\n    Collection,\n    Column,\n    Row,\n    TableBody as TableBodyPrimitive,\n    TableHeader as TableHeaderPrimitive,\n    Table as TablePrimitive,\n    useTableOptions,\n    type CellProps,\n    type ColumnProps,\n    type RowProps,\n    type TableBodyProps,\n    type TableHeaderProps,\n    type TableProps as TablePrimitiveProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\n\nimport { Checkbox } from './checkbox'\n\nconst table = tv({\n    slots: {\n        root: 'table w-full caption-bottom border-spacing-0 text-sm outline-none',\n        column: 'whitespace-nowrap allows-sorting:cursor-pointer px-3 py-3 text-left dragging:cursor-grabbing font-medium outline-none [&:has([slot=selection])]:pr-0',\n        header: 'border-b x32',\n        row: 'tr group relative cursor-default border-b text-foreground/70 outline-none ring-primary focus-visible:ring-1 selected:bg-primary/15',\n        cell: 'whitespace-nowrap px-3 py-3 outline-none td'\n    }\n})\n\nconst { root, header, column, row, cell } = table()\n\nconst TableBody = <T extends object>(props: TableBodyProps<T>) => (\n    <TableBodyPrimitive {...props} className={cn('[&_.tr:last-child]:border-0')} />\n)\n\ninterface TableProps extends TablePrimitiveProps {\n    className?: string\n}\n\nconst Table = ({ children, className, ...props }: TableProps) => (\n    <div className='relative w-full overflow-auto'>\n        <TablePrimitive {...props} className={root({ className })}>\n            {children}\n        </TablePrimitive>\n    </div>\n)\n\ninterface TableCellProps extends CellProps {\n    className?: string\n}\n\nconst TableCell = ({ children, className, ...props }: TableCellProps) => (\n    <Cell {...props} className={cell({ className })}>\n        {children}\n    </Cell>\n)\n\ninterface TableColumnProps extends ColumnProps {\n    className?: string\n}\n\nconst TableColumn = ({ children, className, ...props }: TableColumnProps) => (\n    <Column {...props} className={column({ className })}>\n        {({ allowsSorting, sortDirection }) => (\n            <div className='flex [&>[data-slot=icon]]:shrink-0 items-center gap-2'>\n                <>\n                    {children}\n                    {allowsSorting &&\n                        (sortDirection === undefined ? (\n                            <div className='w-6' />\n                        ) : sortDirection === 'ascending' ? (\n                            <IconChevronUp className='size-4' />\n                        ) : (\n                            <IconChevronDown className='size-4' />\n                        ))}\n                </>\n            </div>\n        )}\n    </Column>\n)\n\nconst TableHeader = <T extends object>({\n    children,\n    className,\n    columns,\n    ...props\n}: TableHeaderProps<T> & { className?: string }) => {\n    const { selectionBehavior, selectionMode, allowsDragging } = useTableOptions()\n    return (\n        <TableHeaderPrimitive {...props} className={header({ className })}>\n            {allowsDragging && <Column />}\n            {selectionBehavior === 'toggle' && (\n                <Column className='pl-4'>\n                    {selectionMode === 'multiple' && <Checkbox slot='selection' />}\n                </Column>\n            )}\n            <Collection items={columns}>{children}</Collection>\n        </TableHeaderPrimitive>\n    )\n}\n\nconst TableRow = <T extends object>({\n    children,\n    className,\n    columns,\n    id,\n    ...props\n}: RowProps<T> & { className?: string }) => {\n    const { selectionBehavior, allowsDragging } = useTableOptions()\n    return (\n        <Row\n            id={id}\n            {...props}\n            className={row({\n                className:\n                    'href' in props\n                        ? cn('cursor-pointer hover:bg-secondary/50', className)\n                        : ''\n            })}\n        >\n            {allowsDragging && (\n                <Cell className='ring-primary group cursor-grab dragging:cursor-grabbing'>\n                    <Button\n                        className='bg-transparent pl-1.5 py-1.5 text-muted-foreground pressed:text-foreground'\n                        slot='drag'\n                    >\n                        <IconGripVertical />\n                    </Button>\n                </Cell>\n            )}\n            {selectionBehavior === 'toggle' && (\n                <Cell className='pl-4'>\n                    <span\n                        aria-hidden\n                        className='absolute inset-y-0 left-0 hidden h-full w-0.5 bg-primary group-selected:block'\n                    />\n                    <Checkbox slot='selection' />\n                </Cell>\n            )}\n            <Collection items={columns}>{children}</Collection>\n        </Row>\n    )\n}\n\nTable.Body = TableBody\nTable.Cell = TableCell\nTable.Column = TableColumn\nTable.Header = TableHeader\nTable.Row = TableRow\n\nexport { Table, type TableCellProps, type TableColumnProps, type TableProps }\n",
    "type": "ui"
  },
  "sheet": {
    "component": "@/components/ui/sheet",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n    Button,\n    composeRenderProps,\n    DialogTrigger,\n    ModalOverlay,\n    Modal as ModalPrimitive,\n    type DialogProps,\n    type DialogTriggerProps,\n    type Modal,\n    type ModalOverlayProps as ModalOverlayPrimitiveProps\n} from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { Dialog } from './dialog'\n\ninterface SheetSubComponents {\n    Body: typeof SheetBody\n    Close: typeof SheetClose\n    Content: typeof SheetContent\n    Description: typeof SheetDescription\n    Footer: typeof SheetFooter\n    Header: typeof SheetHeader\n    Title: typeof SheetTitle\n    Trigger: typeof SheetTrigger\n}\n\ntype SheetProps = VariantProps<typeof sheetStyles> & DialogTriggerProps\n\nconst Sheet: React.FC<SheetProps> & SheetSubComponents = (props: SheetProps) => (\n    <DialogTrigger {...props}>{props.children}</DialogTrigger>\n)\n\nconst SheetTrigger = Button\nconst SheetFooter = Dialog.Footer\nconst SheetHeader = Dialog.Header\nconst SheetTitle = Dialog.Title\nconst SheetDescription = Dialog.Description\nconst SheetBody = Dialog.Body\nconst SheetClose = Dialog.Close\n\nconst sheetOverlayStyles = tv({\n    base: [\n        'fixed top-0 left-0 w-full h-[--visual-viewport-height] isolate z-50 flex items-center justify-center p-4'\n    ],\n    variants: {\n        isBlurred: {\n            true: 'backdrop-blur',\n            false: 'bg-black/25 dark:bg-black/60'\n        },\n        isEntering: {\n            true: 'animate-in fade-in duration-200 ease-out'\n        },\n        isExiting: {\n            true: 'animate-out fade-out duration-200 ease-in'\n        }\n    }\n})\n\ntype Sides = 'top' | 'bottom' | 'left' | 'right'\nconst generateCompoundVariants = (sides: Array<Sides>) => {\n    return sides.map((side) => ({\n        side,\n        isStack: true,\n        className:\n            side === 'top'\n                ? 'top-2 inset-x-2 rounded-lg border'\n                : side === 'bottom'\n                  ? 'bottom-2 inset-x-2 rounded-lg border'\n                  : side === 'left'\n                    ? 'left-2 inset-y-2 rounded-lg border'\n                    : 'right-2 inset-y-2 rounded-lg border'\n    }))\n}\n\nconst sheetStyles = tv({\n    base: 'fixed z-50 grid gap-4 bg-background text-foreground shadow-lg transition ease-in-out',\n    variants: {\n        isEntering: {\n            true: 'duration-300 animate-in '\n        },\n        isExiting: {\n            true: 'duration-200 animate-out'\n        },\n        side: {\n            top: 'inset-x-0 top-0 rounded-b-2xl border-b entering:slide-in-from-top exiting:slide-out-to-top',\n            bottom: 'inset-x-0 bottom-0 rounded-t-2xl border-t entering:slide-in-from-bottom exiting:slide-out-to-bottom',\n            left: 'inset-y-0 left-0 h-auto w-72 sm:w-3/4 overflow-y-auto border-r entering:slide-in-from-left exiting:slide-out-to-left sm:max-w-xs',\n            right: 'inset-y-0 right-0 h-auto w-72 sm:w-3/4 overflow-y-auto border-l entering:slide-in-from-right exiting:slide-out-to-right sm:max-w-xs'\n        },\n        isStack: {\n            true: '',\n            false: ''\n        }\n    },\n    compoundVariants: generateCompoundVariants(['top', 'bottom', 'left', 'right'])\n})\n\ninterface SheetContentProps\n    extends Omit<React.ComponentProps<typeof Modal>, 'children' | 'className'>,\n        Omit<ModalOverlayPrimitiveProps, 'className'>,\n        VariantProps<typeof sheetOverlayStyles> {\n    'aria-label'?: DialogProps['aria-label']\n    'aria-labelledby'?: DialogProps['aria-labelledby']\n    role?: DialogProps['role']\n    closeButton?: boolean\n    isBlurred?: boolean\n    isStack?: boolean\n    side?: Sides\n    classNames?: {\n        overlay?: ModalOverlayPrimitiveProps['className']\n        content?: ModalOverlayPrimitiveProps['className']\n    }\n}\n\nconst SheetContent = ({\n    classNames,\n    isBlurred = false,\n    isDismissable = true,\n    side = 'right',\n    role = 'dialog',\n    closeButton = true,\n    isStack = true,\n    ...props\n}: SheetContentProps) => {\n    const _isDismissable = role === 'alertdialog' ? false : isDismissable\n    return (\n        <ModalOverlay\n            isDismissable={_isDismissable}\n            className={composeRenderProps(\n                classNames?.overlay,\n                (className, renderProps) => {\n                    return sheetOverlayStyles({\n                        ...renderProps,\n                        isBlurred,\n                        className\n                    })\n                }\n            )}\n            {...props}\n        >\n            <ModalPrimitive\n                className={composeRenderProps(\n                    classNames?.content,\n                    (className, renderProps) =>\n                        sheetStyles({\n                            ...renderProps,\n                            side,\n                            isStack,\n                            className\n                        })\n                )}\n                {...props}\n            >\n                <Dialog role={role} className='h-full'>\n                    {(values) => (\n                        <>\n                            {props.children}\n                            {closeButton && (\n                                <Dialog.CloseIndicator\n                                    className='top-2.5 right-2.5'\n                                    close={values.close}\n                                    isDismissable={_isDismissable}\n                                />\n                            )}\n                        </>\n                    )}\n                </Dialog>\n            </ModalPrimitive>\n        </ModalOverlay>\n    )\n}\n\nSheet.Body = SheetBody\nSheet.Close = SheetClose\nSheet.Content = SheetContent\nSheet.Description = SheetDescription\nSheet.Footer = SheetFooter\nSheet.Header = SheetHeader\nSheet.Title = SheetTitle\nSheet.Trigger = SheetTrigger\nexport { Sheet }\n",
    "type": "ui"
  },
  "color-picker": {
    "component": "@/components/ui/color-picker",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n    Button as ButtonPrimitive,\n    ColorPicker as ColorPickerPrimitive,\n    type ColorPickerProps as ColorPickerPrimitiveProps,\n    type ColorSpace,\n    DialogTrigger,\n    getColorChannels,\n    Group\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\nimport tailwindColors from 'tailwindcss/colors'\n\nimport { Button } from './button'\nimport {\n    ColorArea,\n    ColorSlider,\n    ColorSwatch,\n    ColorSwatchPicker,\n    ColorSwatchPickerItem,\n    ColorThumb,\n    defaultColor\n} from './color'\nimport { ColorField } from './color-field'\nimport { Description, Label } from './field'\nimport { Popover } from './popover'\nimport { Select } from './select'\n\nconst colorPickerStyles = tv({\n    slots: {\n        base: 'flex w-full flex-col gap-1',\n        triggerColorField: 'size-10 -mr-2.5 grid place-content-center focus:outline-none',\n        triggerColorPicker: 'w-full max-w-sm justify-start',\n        colorArea: 'w-full sm:w-[calc(18rem-1.30rem)]',\n        colorSlider: 'mt-2 [&_.cstrk]:orientation-horizontal:h-3',\n        colorSwatchPicker: 'flex flex-wrap gap-x-2 gap-y-2.5'\n    }\n})\n\nconst {\n    base,\n    triggerColorField,\n    triggerColorPicker,\n    colorArea,\n    colorSlider,\n    colorSwatchPicker\n} = colorPickerStyles()\n\ninterface ColorPickerProps extends ColorPickerPrimitiveProps {\n    space?: ColorSpace\n    enableColorSwatch?: boolean\n    enableColorFormatSelection?: boolean\n    isHex?: boolean\n    label?: string\n    description?: string\n    errorMessage?: string\n    placeholder?: string\n    colors?: string[]\n    isDisabled?: boolean\n    className?: string\n    trigger?: 'color-picker' | 'color-field'\n    enableColorField?: boolean\n    closeButton?: boolean\n}\n\nconst ColorPicker = ({\n    closeButton = true,\n    enableColorSwatch = false,\n    enableColorFormatSelection = false,\n    enableColorField = true,\n    label,\n    description,\n    colors = [...Object.values(tailwindColors.zinc)],\n    placeholder = 'Fill Color',\n    isHex = true,\n    isDisabled = false,\n    className,\n    trigger = 'color-picker',\n    ...props\n}: ColorPickerProps) => {\n    const [space, setSpace] = React.useState<ColorSpace>('rgb')\n    const [isHexFormat, setIsHexFormat] = React.useState(false)\n    const value = props.value ?? props.defaultValue\n    return (\n        <Group className={base(className)}>\n            {label && <Label>{label}</Label>}\n            <ColorPickerPrimitive defaultValue={defaultColor} {...props}>\n                <DialogTrigger>\n                    {trigger === 'color-field' ? (\n                        <ButtonPrimitive\n                            aria-label='Color swatch'\n                            className={triggerColorField()}\n                        >\n                            <ColorSwatch\n                                color={value?.toString(space)}\n                                className='size-6'\n                            />\n                        </ButtonPrimitive>\n                    ) : trigger === 'color-picker' ? (\n                        <Button\n                            aria-label='Color picker'\n                            isDisabled={isDisabled}\n                            variant='outline'\n                            className={triggerColorPicker()}\n                        >\n                            <ColorSwatch\n                                color={value?.toString(space)}\n                                className='-ml-1.5 size-6'\n                            />\n                            {value ? (\n                                <span>{value.toString(space)}</span>\n                            ) : (\n                                <span>{placeholder}</span>\n                            )}\n                        </Button>\n                    ) : null}\n                    <Popover.Content\n                        showArrow={false}\n                        className='p-2 min-w-[--trigger-width]'\n                        {...props}\n                    >\n                        <div>\n                            <ColorArea\n                                aria-describedby={`${label ? `${label} color area` : 'Color slider'}`}\n                                className={colorArea()}\n                                colorSpace='hsb'\n                                xChannel='saturation'\n                                yChannel='brightness'\n                            >\n                                <ColorThumb className='z-50' />\n                            </ColorArea>\n                            <ColorSlider\n                                aria-describedby={`${label ? `${label} color slider` : 'Color slider'}`}\n                                showOutput={false}\n                                className={colorSlider()}\n                                colorSpace='hsb'\n                                channel='hue'\n                            />\n                        </div>\n\n                        <div className='grid gap-2'>\n                            {enableColorFormatSelection && (\n                                <Select\n                                    aria-label='Color Space'\n                                    selectedKey={space}\n                                    defaultSelectedKey={space}\n                                    onSelectionChange={(s) => {\n                                        setSpace(s as ColorSpace)\n                                        setIsHexFormat(s === 'hex')\n                                    }}\n                                >\n                                    {['rgb', 'hex', 'hsl', 'hsb'].map((s) => (\n                                        <Select.Item key={s} id={s} textValue={s}>\n                                            {s}\n                                        </Select.Item>\n                                    ))}\n                                </Select>\n                            )}\n\n                            {enableColorFormatSelection ? (\n                                <div className='flex gap-1 w-[inherit]'>\n                                    {isHexFormat ? (\n                                        <ColorField\n                                            aria-label='Hex color'\n                                            colorSpace={space}\n                                        />\n                                    ) : (\n                                        getColorChannels(space).map((channel) => (\n                                            <ColorField\n                                                aria-describedby={label ?? 'Color field'}\n                                                colorSpace={space}\n                                                channel={channel}\n                                                key={channel}\n                                            />\n                                        ))\n                                    )}\n                                </div>\n                            ) : enableColorField ? (\n                                <ColorField\n                                    aria-label={`Color in ${space} format`}\n                                    colorSpace={space}\n                                />\n                            ) : null}\n                        </div>\n\n                        {enableColorSwatch && colors && colors.length > 0 && (\n                            <ColorSwatchPicker\n                                aria-label='Color swatch picker'\n                                layout='grid'\n                                className={colorSwatchPicker()}\n                            >\n                                {colors.map((color) => (\n                                    <ColorSwatchPickerItem key={color} color={color} />\n                                ))}\n                            </ColorSwatchPicker>\n                        )}\n\n                        {closeButton && (\n                            <div className='sm:hidden py-2.5 mx-auto w-full max-w-[inherit]'>\n                                <Popover.Close shape='circle' className='w-full'>\n                                    Close\n                                </Popover.Close>\n                            </div>\n                        )}\n                    </Popover.Content>\n                </DialogTrigger>\n            </ColorPickerPrimitive>\n            {description && <Description>{description}</Description>}\n        </Group>\n    )\n}\n\nexport { ColorPicker, type ColorPickerProps }\n",
    "type": "ui"
  },
  "select": {
    "component": "@/components/ui/select",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconChevronDown } from 'cleon-icons'\nimport {\n    Button,\n    composeRenderProps,\n    Group,\n    Select as SelectPrimitive,\n    SelectValue,\n    type SelectProps as SelectPrimitiveProps,\n    type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\nimport type { Placement } from '@react-types/overlays'\n\nimport { DropdownItem, DropdownItemDetails, DropdownSection } from './dropdown'\nimport { Description, FieldError, Label } from './field'\nimport { ListBox } from './list-box'\nimport { Popover } from './popover'\n\nconst selectTriggerStyles = tv({\n    base: [\n        'btr outline-none group-disabled:bg-secondary group-disabled:opacity-50 focus-visible:border-primary focus-visible:ring-4 focus-visible:ring-primary/20 group-open:border-primary group-open:ring-4 group-open:ring-primary/20 flex h-10 w-full cursor-default items-center gap-4 rounded-lg border border-input bg-background py-2 pl-3 pr-2 text-start shadow-[inset_0_1px_0_0_rgba(255,255,255,0.1)] transition dark:shadow-none'\n    ],\n    variants: {\n        isDisabled: {\n            false: 'text-foreground group-invalid:border-danger group-invalid:ring-danger/20 forced-colors:group-invalid:border-[Mark]',\n            true: 'bg-secondary text-muted-foreground forced-colors:border-[GrayText] forced-colors:text-[GrayText]'\n        }\n    }\n})\n\ninterface SelectProps<T extends object>\n    extends Omit<SelectPrimitiveProps<T>, 'children'> {\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    items?: Iterable<T>\n    children: React.ReactNode | ((item: T) => React.ReactNode)\n    placement?: Placement\n    prefix?: React.ReactNode\n    className?: string\n}\n\nconst Select = <T extends object>({\n    label,\n    description,\n    placement,\n    errorMessage,\n    children,\n    items,\n    className,\n    ...props\n}: SelectProps<T>) => {\n    return (\n        <SelectPrimitive\n            {...props}\n            className={cn('group flex w-full flex-col gap-1', className)}\n        >\n            {label && <Label>{label}</Label>}\n            <Group className='relative'>\n                <Button\n                    className={composeRenderProps(className, (className, renderProps) =>\n                        selectTriggerStyles({\n                            ...renderProps,\n                            className\n                        })\n                    )}\n                >\n                    {props.prefix && <span className='-mr-1'>{props.prefix}</span>}\n                    <SelectValue className='flex-1 [&_[slot=description]]:hidden text-base placeholder-shown:text-muted-foreground lg:text-sm' />\n\n                    <IconChevronDown\n                        aria-hidden\n                        className='size-4 text-muted-foreground duration-300 group-open:rotate-180 group-open:text-foreground group-disabled:opacity-50 forced-colors:text-[ButtonText] forced-colors:group-disabled:text-[GrayText]'\n                    />\n                </Button>\n            </Group>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n            <Popover.Picker trigger='Select' placement={placement}>\n                <ListBox.Picker aria-label='items' items={items}>\n                    {children}\n                </ListBox.Picker>\n            </Popover.Picker>\n        </SelectPrimitive>\n    )\n}\n\nconst SelectItemDetails = DropdownItemDetails\nconst SelectItem = DropdownItem\nconst SelectSection = DropdownSection\n\nSelect.Item = SelectItem\nSelect.ItemDetails = SelectItemDetails\nSelect.Section = SelectSection\n\nexport { Select }\n",
    "type": "ui"
  },
  "toaster": {
    "component": "@/components/ui/toaster",
    "raw": "'use client'\n\nimport {\n    IconAlertCircle,\n    IconAlertTriangle,\n    IconCircleCheck,\n    IconLoader\n} from 'cleon-icons'\nimport { Toaster as ToasterPrimitive, type ToasterProps } from 'sonner'\n\nimport { useTheme } from '@/components/providers'\nimport { cn } from '@/lib/utils'\n\nimport { buttonVariants } from './button'\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n    const { theme = 'system' } = useTheme()\n    return (\n        <ToasterPrimitive\n            theme={theme as ToasterProps['theme']}\n            className='toaster group'\n            icons={{\n                info: <IconAlertCircle className='size-4' />,\n                success: <IconCircleCheck className='size-4' />,\n                warning: <IconAlertTriangle className='size-4' />,\n                error: <IconAlertTriangle className='size-4' />,\n                loading: <IconLoader className='animate-spin size-4' />\n            }}\n            toastOptions={{\n                unstyled: true,\n                closeButton: true,\n                classNames: {\n                    toast: cn(\n                        'bg-background ring-1 ring-border dark:ring-inset sm:min-w-[22rem] rounded-xl text-foreground overflow-hidden text-[0.925rem] backdrop-blur-xl px-4 py-3 font-normal sm:px-5 sm:py-5',\n                        '[&:has([data-icon])_[data-content]]:ml-6',\n                        '[&:has([data-button])_[data-close-button=\"true\"]]:hidden',\n                        '[&:not([data-description])_[data-title]]:font-normal',\n                        '[&:has([data-description])_[data-title]]:!font-medium [&:has([data-description])_[data-title]]:!text-lg',\n                        '[&>[data-button]]:absolute [&>[data-button=true]]:bottom-4',\n                        '[&>[data-action=true]]:right-4',\n                        '[&>[data-cancel=true]]:left-4'\n                    ),\n                    icon: 'absolute top-1/2 -translate-y-1/2',\n                    content:\n                        '[&:not(:has(+button))]:pr-10 [&:has(+button)]:pb-11 md:[&:has(+button)]:pb-9',\n                    error: 'bg-danger text-white ring-white/10 text-danger-foreground dark:ring-inset [&>[data-close-button=true]>svg]:text-white [&>[data-close-button=true]:hover]:bg-white/20',\n                    info: 'bg-info ring-white/10 text-info-foreground dark:ring-inset [&>[data-close-button=true]>svg]:text-white [&>[data-close-button=true]:hover]:bg-white/20',\n                    warning:\n                        'bg-warning text-warning-foreground ring-white/10 dark:ring-inset [&>[data-close-button=true]>svg]:text-amber-950 [&>[data-close-button=true]:hover]:bg-white/20',\n                    success:\n                        'bg-success text-white ring-white/10 text-success-foreground dark:ring-inset [&>[data-close-button=true]>svg]:text-white [&>[data-close-button=true]:hover]:bg-white/20',\n                    cancelButton: buttonVariants({\n                        className: '',\n                        size: 'xs',\n                        variant: 'outline'\n                    }),\n                    actionButton: buttonVariants({\n                        className: 'self-end justify-self-end',\n                        size: 'xs'\n                    }),\n                    closeButton:\n                        '[&_svg]:size-5 size-8 absolute top-1/2 transform -translate-y-1/2 right-2 lg:right-3 left-auto grid place-content-center rounded-md hover:bg-black/20 dark:hover:bg-white/20 border-0 [&_svg]:text-foreground'\n                }\n            }}\n            {...props}\n        />\n    )\n}\n\nexport { Toaster }\n",
    "type": "ui"
  },
  "color-field": {
    "component": "@/components/ui/color-field",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n    ColorField as ColorFieldPrimitive,\n    type ColorFieldProps as ColorFieldPrimitiveProps,\n    type ValidationResult\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { ColorSwatch } from './color'\nimport { ColorPicker } from './color-picker'\nimport {\n    Description,\n    FieldError,\n    FieldGroup,\n    fieldGroupPrefixStyles,\n    Input,\n    Label\n} from './field'\n\ninterface ColorFieldProps extends ColorFieldPrimitiveProps {\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n    placeholder?: string\n    prefix?: React.ReactNode\n    suffix?: React.ReactNode\n    isLoading?: boolean\n    enableColorPicker?: boolean\n}\n\nconst ColorField = ({\n    label,\n    description,\n    errorMessage,\n    placeholder,\n    prefix,\n    suffix,\n    isLoading,\n    enableColorPicker = true,\n    ...props\n}: ColorFieldProps) => {\n    const value = props.value ?? props.defaultValue\n    return (\n        <ColorFieldPrimitive\n            {...props}\n            aria-label={props['aria-label'] ?? 'Color field'}\n            className={cn('group w-full flex flex-col gap-1', props.className)}\n        >\n            {label && <Label>{label}</Label>}\n            <FieldGroup\n                data-loading={isLoading ? 'true' : undefined}\n                className={fieldGroupPrefixStyles()}\n            >\n                {prefix ? <span className='atrs isPfx'>{prefix}</span> : null}\n                <div className='flex items-center'>\n                    {value && (\n                        <span>\n                            {enableColorPicker ? (\n                                <ColorPicker\n                                    enableColorField={false}\n                                    onChange={props.onChange}\n                                    defaultValue={value}\n                                    className='size-9'\n                                    trigger='color-field'\n                                />\n                            ) : (\n                                <ColorSwatch\n                                    className='size-6 ml-2'\n                                    color={value.toString()}\n                                />\n                            )}\n                        </span>\n                    )}\n\n                    <Input className='px-2.5' placeholder={placeholder} />\n                </div>\n                {suffix ? <span className='atrs ml-auto isSfx'>{suffix}</span> : null}\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </ColorFieldPrimitive>\n    )\n}\n\nexport { ColorField }\n",
    "type": "ui"
  },
  "command": {
    "component": "@/components/ui/command",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconSearch, IconX } from 'cleon-icons'\nimport { Command as CommandPrimitive } from 'cmdk'\nimport {\n    Button,\n    Dialog,\n    Modal,\n    ModalOverlay,\n    Text,\n    type ModalOverlayProps,\n    type SeparatorProps,\n    type TextProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { useMediaQuery } from '@/lib/utils'\n\nimport { Keyboard, type KeyboardProps } from './keyboard'\nimport { Separator } from './separator'\n\nconst commandStyles = tv({\n    slots: {\n        command: [\n            'flex h-svh w-full flex-col overflow-hidden rounded-md bg-background text-foreground sm:h-full',\n            '[&_[cmdk-group-heading]]:ml-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:-mb-1.5 [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_[data-slot=icon]]:size-5 [&_[cmdk-input]]:h-12',\n            // for specific properties, it has to be controlled by the command\n            '[&_[cmdk-item]]:py-2.5 [&_[cmdk-item]]:pl-2.5 [&_[cmdk-item]]:pr-4'\n        ],\n        list: 'overflow-y-auto lg:pb-0 max-h-[calc(100vh-35%)] pb-16 [&:not(:has(.command-section))]:p-2 [&:not(:has(.command-section))_.command-separator]:my-2 overflow-x-hidden md:max-h-[456px]',\n        input: [\n            'flex w-full rounded-md bg-transparent text-base placeholder:text-muted-foreground',\n            'focus:outline-none',\n            'disabled:opacity-50 disabled:cursor-not-allowed'\n        ],\n        section: [\n            'command-section overflow-hidden py-2 px-2 text-foreground',\n            '[&_[cmdk-group-heading]]:select-none [&_[cmdk-group-heading]]:ml-[1px] [&_[cmdk-group-heading]]:py-2 [&_[cmdk-group-heading]]:text-[0.8rem] [&_[cmdk-group-heading]]:text-muted-foreground'\n        ],\n        modalOverlay: [\n            'fixed inset-0 max-h-[--visual-viewport-height] z-50 bg-black/60 entering:animate-in entering:fade-in-0 exiting:animate-in exiting:fade-out-0'\n        ],\n        modal: [\n            'fixed bottom-0 left-[50%] top-auto z-50 grid h-[calc(100vh-35%)] w-full max-w-full translate-x-[-50%] gap-4 overflow-hidden rounded-t-xl bg-background shadow-lg ring-1 ring-border sm:bottom-auto sm:top-[6rem] sm:h-auto sm:w-full sm:max-w-2xl sm:rounded-xl',\n            'sm:entering:slide-in-from-bottom-auto entering:duration-300 entering:animate-in entering:fade-in-0 entering:slide-in-from-bottom-1/2 entering:slide-in-from-left-1/2 entering:[transition-timing-function:ease-out] sm:entering:duration-300 sm:entering:slide-in-from-top-[2rem]',\n            'exiting:duration-300 exiting:animate-out exiting:fade-out-0 exiting:slide-out-to-bottom-1/2 exiting:slide-out-to-left-1/2 exiting:[transition-timing-function:ease] sm:exiting:slide-out-to-top-[4rem]'\n        ],\n        closeButton: [\n            'absolute right-3 top-1.5 [&>span>[data-slot=icon]]:text-muted-foreground pressed:[&_[data-slot=icon]]:text-foreground lg:top-3.5 rounded-full border lg:border-border border-transparent lg:bg-secondary/50 py-2.5 px-2.5 lg:py-0.5 text-xs transition-opacity data-[state=open]:bg-secondary data-[state=open]:text-muted-foreground lg:focus:border-foreground/70 focus:outline-none lg:focus:ring-2 lg:focus:ring-ring disabled:pointer-events-none',\n            'focus:outline-none lg:focus:bg-primary/10 lg:focus:ring-2 lg:focus:ring-primary/20 lg:focus:border-primary/70',\n            'disabled:pointer-events-none'\n        ],\n        empty: 'py-6 text-center text-sm text-muted-foreground x3tmpy',\n        kbdKeyboard: 'lg:block hidden group-data-[selected=true]:opacity-60',\n        description:\n            'sm:inline hidden text-sm group-data-[selected=true]:text-primary-foreground/70 text-muted-foreground ml-auto',\n        item: [\n            'group relative flex cursor-default select-none items-center rounded-lg py-2 text-sm outline-none',\n            // selected\n            'data-[selected=true]:bg-primary data-[selected=true]:text-primary-foreground [&[data-selected=true]_[data-slot=icon]]:text-primary-foreground',\n            // danger\n            'data-[danger=true]:text-danger data-[danger=true]:data-[selected=true]:bg-danger data-[danger=true]:data-[selected=true]:text-danger-foreground',\n            // disabled\n            'data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50',\n            // icon\n            '[&_[data-slot=icon]]:mr-2 [&_[data-slot=icon]]:size-[1.10rem] [&_[data-slot=icon]]:shrink-0 [&_[data-slot=icon]]:text-muted-foreground',\n            '[&_[data-slot=avatar]]:mr-2 [&_[data-slot=avatar]]:size-[1.10rem] [&_[data-slot=avatar]]:shrink-0'\n        ]\n    },\n\n    variants: {\n        isDanger: {\n            true: 'text-danger data-[selected=true]:bg-danger data-[selected=true]:text-danger-foreground [&[data-selected=true]_[data-slot=icon]]:text-danger-foreground'\n        }\n    }\n})\n\nconst {\n    command,\n    empty,\n    section,\n    list,\n    item,\n    closeButton,\n    modal,\n    input,\n    modalOverlay,\n    kbdKeyboard,\n    description\n} = commandStyles()\n\ninterface CommandContextProps {\n    hideSearchIndicator?: boolean\n    hideCloseButton?: boolean\n    messageOnEmpty?: boolean | string\n}\n\nconst CommandContext = React.createContext<CommandContextProps>({})\n\ninterface CommandProps extends ModalOverlayProps, CommandContextProps {\n    children: React.ReactNode\n    value?: string\n    messageOnEmpty?: boolean | string\n    onValueChange?: (value: string) => void\n}\n\nconst Command = ({\n    hideSearchIndicator = false,\n    hideCloseButton = false,\n    messageOnEmpty,\n    value,\n    onValueChange,\n    children,\n    ...props\n}: CommandProps) => {\n    const isDesktop = useMediaQuery('(min-width: 1024px)')\n    return (\n        <CommandContext.Provider\n            value={{ hideSearchIndicator, hideCloseButton, messageOnEmpty }}\n        >\n            <ModalOverlay isDismissable className={modalOverlay()} {...props}>\n                <Modal className={modal()}>\n                    <Dialog className='outline-none' aria-label='Command Palette'>\n                        {({ close }) => (\n                            <>\n                                <CommandPrimitive\n                                    value={value}\n                                    onValueChange={onValueChange}\n                                    className={command()}\n                                >\n                                    {children}\n                                </CommandPrimitive>\n                                {!hideCloseButton && (\n                                    <Button\n                                        autoFocus={!isDesktop}\n                                        onPress={close}\n                                        className={closeButton()}\n                                    >\n                                        <span className='lg:block hidden'>Esc</span>\n                                        <span className='lg:hidden -mr-2 block'>\n                                            <IconX />\n                                            <span className='sr-only'>\n                                                Close command palette\n                                            </span>\n                                        </span>\n                                    </Button>\n                                )}\n                            </>\n                        )}\n                    </Dialog>\n                </Modal>\n            </ModalOverlay>\n        </CommandContext.Provider>\n    )\n}\n\ninterface CommandInputProps\n    extends React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input> {}\n\nconst CommandInput = React.forwardRef<\n    React.ElementRef<typeof CommandPrimitive.Input>,\n    CommandInputProps\n>(({ className, ...props }, ref) => {\n    const { hideSearchIndicator } = React.useContext(CommandContext)\n    return (\n        <div className='flex border-b items-center px-3'>\n            {!hideSearchIndicator && (\n                <IconSearch className='mr-2 size-5 shrink-0 opacity-50' />\n            )}\n            <CommandPrimitive.Input\n                autoFocus\n                ref={ref}\n                className={input({ className: hideSearchIndicator ? 'pl-1' : className })}\n                {...props}\n            />\n        </div>\n    )\n})\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\ninterface CommandListProps extends React.ComponentProps<typeof CommandPrimitive.List> {}\n\nconst CommandList = ({ className, ...props }: CommandListProps) => {\n    const { messageOnEmpty } = React.useContext(CommandContext)\n    return (\n        <CommandPrimitive.List className={list({ className })} {...props}>\n            {messageOnEmpty !== false && (\n                <CommandEmpty>\n                    {typeof messageOnEmpty === 'string'\n                        ? messageOnEmpty\n                        : 'No results found.'}\n                </CommandEmpty>\n            )}\n            {props.children}\n        </CommandPrimitive.List>\n    )\n}\n\ninterface CommandEmptyProps extends React.ComponentProps<typeof CommandPrimitive.Empty> {}\n\nconst CommandEmpty = ({ className, ...props }: CommandEmptyProps) => {\n    return <CommandPrimitive.Empty className={empty({ className })} {...props} />\n}\n\ninterface CommandSectionProps\n    extends React.ComponentProps<typeof CommandPrimitive.Group> {\n    separator?: boolean\n}\n\nconst CommandSection = ({ className, separator, ...props }: CommandSectionProps) => {\n    return (\n        <>\n            <CommandPrimitive.Group className={section({ className })} {...props}>\n                {props.children}\n                {separator && <CommandSeparator className='mt-2' />}\n            </CommandPrimitive.Group>\n        </>\n    )\n}\n\nconst CommandSeparator = ({ className, ...props }: SeparatorProps) => {\n    return (\n        <div className='-mx-4 command-separator'>\n            <Separator className={className} {...props} orientation='horizontal' />\n        </div>\n    )\n}\n\ninterface CommandItemProps extends React.ComponentProps<typeof CommandPrimitive.Item> {\n    isDanger?: boolean\n}\n\nconst CommandItem = ({ isDanger, className, ...props }: CommandItemProps) => {\n    return (\n        <CommandPrimitive.Item\n            data-danger={isDanger ? 'true' : undefined}\n            className={item({ isDanger, className })}\n            {...props}\n        />\n    )\n}\n\nconst CommandDescription = ({ className, ...props }: TextProps) => {\n    return <Text {...props} slot='description' className={description({ className })} />\n}\n\nconst CommandKeyboard = (props: KeyboardProps) => (\n    <Keyboard classNames={{ kbd: kbdKeyboard(), base: '-mr-2.5' }} {...props} />\n)\n\nCommand.Description = CommandDescription\nCommand.Empty = CommandEmpty\nCommand.Input = CommandInput\nCommand.Item = CommandItem\nCommand.Keyboard = CommandKeyboard\nCommand.List = CommandList\nCommand.Section = CommandSection\nCommand.Separator = CommandSeparator\n\nexport { Command }\n",
    "type": "ui"
  },
  "meter": {
    "component": "@/components/ui/meter",
    "raw": "'use client'\n\nimport { IconAlertTriangle } from 'cleon-icons'\nimport { motion } from 'framer-motion'\nimport {\n    Meter as MeterPrimitive,\n    type MeterProps as AriaMeterProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { Label } from './field'\n\nexport interface MeterProps extends AriaMeterProps {\n    label?: string\n}\n\nconst Meter = ({ label, ...props }: MeterProps) => {\n    return (\n        <MeterPrimitive {...props} className={cn('flex flex-col gap-1', props.className)}>\n            {({ percentage, valueText }) => (\n                <>\n                    <div className='flex w-full justify-between gap-2'>\n                        <Label>{label}</Label>\n                        <span\n                            className={`text-sm ${percentage >= 80 ? 'text-danger' : 'text-muted-foreground'}`}\n                        >\n                            {percentage >= 80 && (\n                                <IconAlertTriangle\n                                    aria-label='Alert'\n                                    className='inline-block size-4 align-text-bottom'\n                                />\n                            )}\n                            {' ' + valueText}\n                        </span>\n                    </div>\n                    <div className='relative h-2 min-w-64 rounded-full bg-muted outline outline-1 -outline-offset-1 outline-transparent'>\n                        <motion.div\n                            className='absolute left-0 top-0 h-full rounded-full forced-colors:bg-[Highlight]'\n                            initial={{ width: '0%', backgroundColor: getColor(0) }}\n                            animate={{\n                                width: `${percentage}%`,\n                                backgroundColor: getColor(percentage)\n                            }}\n                            transition={{ duration: 0.5 }}\n                        />\n                    </div>\n                </>\n            )}\n        </MeterPrimitive>\n    )\n}\n\nconst getColor = (percentage: number) => {\n    if (percentage < 30) {\n        return 'hsl(var(--primary))'\n    }\n    if (percentage < 50) {\n        return 'hsl(var(--info))'\n    }\n    if (percentage < 70) {\n        return 'hsl(var(--success))'\n    }\n    if (percentage < 80) {\n        return 'hsl(var(--warning))'\n    }\n    return 'hsl(var(--danger))'\n}\n\nexport { getColor, Meter }\n",
    "type": "ui"
  },
  "snippet": {
    "component": "@/components/ui/snippet",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconCheck, IconClipboard } from 'cleon-icons'\nimport { AnimatePresence, m, motion } from 'framer-motion'\nimport { toast } from 'sonner'\n\nimport { cn, wait } from '@/lib/utils'\n\nimport { Button, type ButtonProps } from './button'\n\ninterface SnippetProps extends React.HTMLAttributes<HTMLDivElement> {\n    text: string\n}\n\nconst Snippet: React.FC<SnippetProps> = ({ className, text, ...props }) => {\n    const [copied, setCopied] = React.useState(false)\n\n    const handleCopy = async () => {\n        if (navigator.clipboard && window.isSecureContext) {\n            await navigator.clipboard.writeText(text)\n            setCopied(true)\n            wait(2000).then(() => setCopied(false))\n        } else {\n            toast.error('Failed to copy to clipboard')\n        }\n    }\n\n    return (\n        <div\n            {...props}\n            className={cn(\n                'relative flex items-center justify-between text-zinc-200 rounded-lg border bg-zinc-900 py-2.5 pl-3 pr-2.5 font-mono text-sm [&>svg]:transition [&_svg]:shrink-0',\n                className\n            )}\n        >\n            <span className='mr-6'>{text}</span>\n            <Button\n                className='size-7 border border-zinc-700 bg-zinc-800 text-white backdrop-blur-lg hover:bg-zinc-700'\n                aria-label='Copy imports statement'\n                size='icon'\n                variant='ghost'\n                onPress={handleCopy}\n            >\n                <AnimatePresence mode='wait' initial={false}>\n                    {copied ? (\n                        <motion.span\n                            key='checkmark-import'\n                            initial={{ opacity: 0, scale: 0.5 }}\n                            animate={{ opacity: 1, scale: 1 }}\n                        >\n                            <IconCheck />\n                        </motion.span>\n                    ) : (\n                        <motion.span\n                            key='copy'\n                            initial={{ opacity: 0, scale: 0.5 }}\n                            animate={{ opacity: 1, scale: 1 }}\n                        >\n                            <IconClipboard />\n                        </motion.span>\n                    )}\n                </AnimatePresence>\n            </Button>\n        </div>\n    )\n}\n\ninterface CopyButtonProps extends ButtonProps {\n    isCopied?: boolean\n    ariaLabel?: string\n    initialIcon?: React.ReactNode\n    copiedIcon?: React.ReactNode\n}\n\nconst CopyButton = ({\n    initialIcon,\n    copiedIcon,\n    ariaLabel = 'Copy',\n    isCopied,\n    ...props\n}: CopyButtonProps) => {\n    return (\n        <Button\n            className='size-7 border border-zinc-700 bg-zinc-800 text-white backdrop-blur-lg hover:bg-zinc-700'\n            aria-label={ariaLabel}\n            size='icon'\n            variant='ghost'\n            {...props}\n        >\n            <AnimatePresence mode='wait' initial={false}>\n                {isCopied ? (\n                    <m.span\n                        key='checkmark-import'\n                        initial={{ opacity: 0, scale: 0.5 }}\n                        animate={{ opacity: 1, scale: 1 }}\n                    >\n                        {copiedIcon ?? <IconCheck />}\n                    </m.span>\n                ) : (\n                    <m.span\n                        key='copy'\n                        initial={{ opacity: 0, scale: 0.5 }}\n                        animate={{ opacity: 1, scale: 1 }}\n                    >\n                        {initialIcon ?? <IconClipboard />}\n                    </m.span>\n                )}\n            </AnimatePresence>\n        </Button>\n    )\n}\n\nexport { CopyButton, Snippet, type SnippetProps }\n",
    "type": "ui"
  },
  "radio": {
    "component": "@/components/ui/radio",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n    RadioGroup as RadioGroupPrimitive,\n    Radio as RadioPrimitive,\n    type RadioGroupProps as RACRadioGroupProps,\n    type RadioProps as RadioPrimitiveProps,\n    type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\n\nimport { Description, FieldError, Label } from './field'\n\ninterface RadioGroupProps extends Omit<RACRadioGroupProps, 'children'> {\n    label?: string\n    children?: React.ReactNode\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst RadioGroup = ({\n    label,\n    description,\n    errorMessage,\n    children,\n    ...props\n}: RadioGroupProps) => {\n    return (\n        <RadioGroupPrimitive\n            {...props}\n            className={cn('group flex flex-col gap-2', props.className)}\n        >\n            {label && <Label>{label}</Label>}\n            <div className='flex select-none gap-2 group-orientation-horizontal:flex-wrap group-orientation-horizontal:gap-2 sm:group-orientation-horizontal:gap-4 group-orientation-vertical:flex-col'>\n                {children}\n            </div>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </RadioGroupPrimitive>\n    )\n}\n\nconst radioStyles = tv({\n    base: 'size-4 shrink-0 rounded-full border bg-background transition',\n    variants: {\n        isSelected: {\n            false: 'border-muted',\n            true: 'border-[4.5px] border-primary'\n        },\n        isFocused: {\n            true: [\n                'border-primary bg-primary/20 ring-4 ring-primary/20',\n                'group-invalid:border-danger/70 group-invalid:bg-danger/20 group-invalid:ring-danger/20'\n            ]\n        },\n        isInvalid: {\n            true: 'border-danger/70 bg-danger/20'\n        },\n        isDisabled: {\n            true: 'opacity-50'\n        }\n    }\n})\n\ninterface RadioProps extends RadioPrimitiveProps {\n    description?: string\n}\n\nconst Radio = ({ description, ...props }: RadioProps) => {\n    return (\n        <>\n            <RadioPrimitive\n                {...props}\n                className={cn(\n                    'group flex items-center gap-2 text-sm text-foreground transition disabled:text-foreground/50 forced-colors:disabled:text-[GrayText]',\n                    props.className\n                )}\n            >\n                {(renderProps) => (\n                    <div className='flex gap-2'>\n                        <div\n                            className={radioStyles({\n                                ...renderProps,\n                                className: 'description' in props ? 'mt-1' : 'mt-0.5'\n                            })}\n                        />\n                        <div className='flex flex-col gap-1'>\n                            <>{props.children}</>\n                            {description && (\n                                <Description className='block'>{description}</Description>\n                            )}\n                        </div>\n                    </div>\n                )}\n            </RadioPrimitive>\n        </>\n    )\n}\n\nexport { Radio, RadioGroup, radioStyles }\n",
    "type": "ui"
  },
  "rating": {
    "component": "@/components/ui/rating",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { motion } from 'framer-motion'\nimport {\n    composeRenderProps,\n    Slider,\n    SliderOutput,\n    SliderStateContext,\n    SliderTrack,\n    TextContext,\n    type LabelProps,\n    type SliderOutputProps,\n    type SliderProps,\n    type SliderTrackProps,\n    type TextProps\n} from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\nimport { useSlotId } from '@react-aria/utils'\n\nimport { Description, Label } from './field'\n\nconst ratingVariants = tv({\n    base: 'text-transparent bg-clip-text select-none',\n    variants: {\n        size: {\n            sm: 'text-sm',\n            md: 'text-base',\n            lg: 'text-lg',\n            xl: 'text-xl',\n            '2xl': 'text-2xl',\n            '3xl': 'text-3xl',\n            '4xl': 'text-4xl',\n            '5xl': 'text-5xl'\n        }\n    },\n    defaultVariants: {\n        size: 'md'\n    }\n})\n\ninterface RatingProps extends RatingRootProps, VariantProps<typeof ratingVariants> {\n    label?: LabelProps['children']\n    description?: TextProps['children']\n    showValue?: boolean | ((value: number[]) => string)\n    shape?: 'star' | 'circle' | 'square' | 'heart' | 'triangle' | 'diamond'\n}\n\nconst Rating = ({\n    label,\n    size,\n    description,\n    showValue = false,\n    shape = 'star',\n    maxValue = 5,\n    step = 0.5,\n    ...props\n}: RatingProps) => {\n    return (\n        <RatingRoot maxValue={maxValue} step={step} {...props}>\n            <div className='flex items-center justify-between w-auto gap-2'>\n                {label && <Label>{label}</Label>}\n                {(showValue || typeof showValue === 'function') && <RatingValueLabel />}\n            </div>\n            <SliderControl size={size} shape={shape} />\n            {description && <Description>{description}</Description>}\n        </RatingRoot>\n    )\n}\n\ninterface SliderControlProps\n    extends SliderTrackProps,\n        VariantProps<typeof ratingVariants> {\n    shape?: 'star' | 'circle' | 'square' | 'heart' | 'triangle' | 'diamond'\n}\n\nconst SliderControl = ({ shape = 'star', size, ...props }: SliderControlProps) => {\n    const getColor = (percentage: number) => {\n        if (percentage < 40) {\n            return 'hsl(var(--danger))'\n        }\n        if (percentage < 80) {\n            return 'hsl(var(--warning))'\n        }\n        return 'hsl(var(--success))'\n    }\n    const shapeCharacter = {\n        star: '★',\n        circle: '●',\n        square: '■',\n        heart: '♥',\n        triangle: '▲',\n        diamond: '◆'\n    }\n    const { values, getThumbMaxValue } = React.useContext(SliderStateContext)\n    return (\n        <SliderTrack\n            {...props}\n            className={cn(\n                ratingVariants({ size }),\n                'bg-muted relative flex items-center justify-start'\n            )}\n        >\n            <motion.div\n                initial={{ width: '0%', backgroundColor: getColor(0) }}\n                animate={{\n                    width: `${(values[0] / getThumbMaxValue(0)) * 100}%`,\n                    backgroundColor: getColor((values[0] / getThumbMaxValue(0)) * 100)\n                }}\n                transition={{ duration: 0.4 }}\n                className={cn(\n                    ratingVariants({ size }),\n                    'absolute left-0 top-0 flex gap-0 justify-end w-full flex-row-reverse cursor-pointer'\n                )}\n            >\n                {Array.from({ length: getThumbMaxValue(0) }).map((_, index) => (\n                    <span\n                        key={index}\n                        className={cn(\n                            `cursor-pointer`,\n                            (index / getThumbMaxValue(0)) * 100 < 40\n                                ? 'hover:text-success peer-hover:text-success'\n                                : (index / getThumbMaxValue(0)) * 100 < 80\n                                  ? 'hover:text-warning peer-hover:text-warning'\n                                  : 'hover:text-danger peer-hover:text-danger'\n                        )}\n                    >\n                        {shapeCharacter[shape]}\n                    </span>\n                ))}\n            </motion.div>\n            {Array.from({ length: getThumbMaxValue(0) }).map((_, index) => (\n                <span className='cursor-pointer' key={index}>\n                    {shapeCharacter[shape]}\n                </span>\n            ))}\n        </SliderTrack>\n    )\n}\n\ninterface RatingRootProps extends SliderProps {}\n\nconst RatingRoot = (props: RatingRootProps) => {\n    const descriptionId = useSlotId()\n    return (\n        <TextContext.Provider value={{ slots: { description: { id: descriptionId } } }}>\n            <Slider\n                data-slot='root'\n                aria-describedby={descriptionId}\n                className={cn('flex flex-col gap-0 w-auto', props.className)}\n                {...props}\n            />\n        </TextContext.Provider>\n    )\n}\n\ninterface RatingValueProps extends SliderOutputProps {}\n\nconst RatingValueLabel = ({ className, ...props }: RatingValueProps) => {\n    return (\n        <SliderOutput {...props} className='text-muted-foreground text-sm'>\n            {composeRenderProps(\n                props.children,\n                (children, { state }) => children ?? Number(state.values[0]).toFixed(2)\n            )}\n        </SliderOutput>\n    )\n}\n\nRating.Root = RatingRoot\nRating.ValueLabel = RatingValueLabel\n\nexport { Rating }\n",
    "type": "ui"
  },
  "modal": {
    "component": "@/components/ui/modal",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n    Button as ButtonPrimitive,\n    composeRenderProps,\n    DialogTrigger as DialogTriggerPrimitive,\n    ModalOverlay as ModalOverlayPrimitive,\n    Modal as ModalPrimitive,\n    type DialogProps,\n    type DialogTriggerProps,\n    type ModalOverlayProps as ModalOverlayPrimitiveProps\n} from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { Dialog } from './dialog'\n\nconst ModalTrigger = ButtonPrimitive\nconst ModalHeader = Dialog.Header\nconst ModalTitle = Dialog.Title\nconst ModalDescription = Dialog.Description\nconst ModalFooter = Dialog.Footer\nconst ModalBody = Dialog.Body\nconst ModalClose = Dialog.Close\n\ninterface ModalSubComponents {\n    Body: typeof ModalBody\n    Close: typeof ModalClose\n    Content: typeof ModalContent\n    Description: typeof ModalDescription\n    Footer: typeof ModalFooter\n    Header: typeof ModalHeader\n    Title: typeof ModalTitle\n    Trigger: typeof ModalTrigger\n}\nconst Modal: React.FC<DialogTriggerProps> & ModalSubComponents = (props) => (\n    <DialogTriggerPrimitive {...props} />\n)\n\nconst modalOverlayStyles = tv({\n    base: [\n        'fixed left-0 top-0 isolate z-50 h-[--visual-viewport-height] w-full',\n        'flex items-end text-center sm:items-center sm:justify-center',\n        '[--visual-viewport-vertical-padding:16px] sm:[--visual-viewport-vertical-padding:32px]'\n    ],\n    variants: {\n        isBlurred: {\n            true: 'backdrop-blur',\n            false: 'bg-black/15 dark:bg-black/40'\n        },\n        isEntering: {\n            true: 'ease-out animate-in fade-in'\n        },\n        isExiting: {\n            true: 'duration-200 ease-in animate-out fade-out'\n        }\n    }\n})\nconst modalContentStyles = tv({\n    base: [\n        'max-h-full rounded-t-2xl sm:rounded-lg overflow-hidden bg-background text-foreground text-left align-middle shadow-lg',\n        'ring-1 ring-zinc-950/5 dark:ring-white/15',\n        'w-full'\n    ],\n    variants: {\n        isEntering: {\n            true: [\n                'animate-in duration-200 fade-in-0 slide-in-from-bottom-1/2',\n                'sm:slide-in-from-bottom-auto sm:slide-in-from-top-[20%]'\n            ]\n        },\n        isExiting: {\n            true: [\n                'duration-200 ease-in animate-out slide-out-to-bottom ',\n                'sm:exiting:slide-out-to-top-[10%]'\n            ]\n        },\n        size: {\n            xs: 'sm:max-w-xs',\n            sm: 'sm:max-w-sm',\n            md: 'sm:max-w-md',\n            lg: 'sm:max-w-lg sm:has-[[role=alertdialog]]:max-w-lg sm:has-[[role=dialog]]:max-w-lg',\n            xl: 'sm:max-w-xl',\n            '2xl': 'sm:max-w-2xl',\n            '3xl': 'sm:max-w-3xl',\n            '4xl': 'sm:max-w-4xl',\n            '5xl': 'sm:max-w-5xl'\n        }\n    },\n    defaultVariants: {\n        size: 'lg'\n    }\n})\n\ninterface ModalContentProps\n    extends Omit<React.ComponentProps<typeof Modal>, 'children'>,\n        Omit<ModalOverlayPrimitiveProps, 'className'>,\n        VariantProps<typeof modalContentStyles> {\n    'aria-label'?: DialogProps['aria-label']\n    'aria-labelledby'?: DialogProps['aria-labelledby']\n    role?: DialogProps['role']\n    closeButton?: boolean\n    isBlurred?: boolean\n    classNames?: {\n        overlay?: ModalOverlayPrimitiveProps['className']\n        content?: ModalOverlayPrimitiveProps['className']\n    }\n}\n\nconst ModalContent = ({\n    classNames,\n    isDismissable = true,\n    isBlurred = true,\n    children,\n    size,\n    role,\n    closeButton = true,\n    ...props\n}: ModalContentProps) => {\n    const _isDismissable = role === 'alertdialog' ? false : isDismissable\n    return (\n        <ModalOverlayPrimitive\n            isDismissable={_isDismissable}\n            className={composeRenderProps(\n                classNames?.overlay,\n                (className, renderProps) => {\n                    return modalOverlayStyles({\n                        ...renderProps,\n                        isBlurred,\n                        className\n                    })\n                }\n            )}\n            {...props}\n        >\n            <ModalPrimitive\n                className={composeRenderProps(\n                    classNames?.content,\n                    (className, renderProps) =>\n                        modalContentStyles({\n                            ...renderProps,\n                            size,\n                            className\n                        })\n                )}\n                {...props}\n            >\n                <Dialog role={role}>\n                    {({ close }) => (\n                        <>\n                            {children}\n                            {closeButton && (\n                                <Dialog.CloseIndicator\n                                    close={close}\n                                    isDismissable={_isDismissable}\n                                />\n                            )}\n                        </>\n                    )}\n                </Dialog>\n            </ModalPrimitive>\n        </ModalOverlayPrimitive>\n    )\n}\n\nModal.Body = ModalBody\nModal.Close = ModalClose\nModal.Content = ModalContent\nModal.Description = ModalDescription\nModal.Footer = ModalFooter\nModal.Header = ModalHeader\nModal.Title = ModalTitle\nModal.Trigger = ModalTrigger\n\nexport { Modal, modalContentStyles, modalOverlayStyles, type ModalContentProps }\n",
    "type": "ui"
  },
  "field": {
    "component": "@/components/ui/field",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n    composeRenderProps,\n    FieldError as FieldErrorPrimitive,\n    Group,\n    Input as InputPrimitive,\n    Label as LabelPrimitive,\n    Text,\n    type FieldErrorProps,\n    type GroupProps,\n    type InputProps,\n    type LabelProps,\n    type TextProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\n\nconst fieldBorderStyles = tv({\n    base: 'group-focus-within:border-primary forced-colors:border-[Highlight]',\n    variants: {\n        isInvalid: {\n            true: 'border-danger/70 group-focus-within:border-danger/70 forced-colors:border-[Mark]'\n        }\n    }\n})\n\nconst fieldGroupPrefixStyles = tv({\n    base: [\n        'flex group-invalid:border-danger group-disabled:bg-secondary group-disabled:opacity-50 items-center group-invalid:focus-within:ring-danger/20',\n        '[&>.atrs>.btn]:size-7 [&>.atrs>.btn]:rounded-sm [&>.atrs:has(.btn)]:size-9 [&>.atrs:has(.btn)]:grid [&>.atrs:has(.btn)]:place-items-center',\n        '[&>.atrs>.btn]:before:rounded-[calc(theme(borderRadius.sm)-1px)] [&>.atrs>.btn]:after:rounded-[calc(theme(borderRadius.sm)-1px)] dark:[&>.atrs>.btn]:after:rounded-sm',\n        '[&>.isSfx:has(.btn)]:-mr-2 [&>.isPfx:has(.btn)]:-ml-2 [&>.isSfx>.btn]:mr-0.5 [&>.isPfx>.btn]:ml-0.5'\n    ]\n})\n\nconst fieldStyles = tv({\n    slots: {\n        description: 'text-pretty text-base/6 text-muted-foreground sm:text-sm/6',\n        label: 'w-fit cursor-default font-medium text-secondary-foreground text-sm',\n        fieldError: 'text-sm text-danger forced-colors:text-[Mark]',\n        input: [\n            'w-full min-w-0 bg-transparent p-2 text-base text-foreground placeholder-muted-foreground focus:outline-none lg:text-sm'\n        ]\n    }\n})\n\nconst { description, label, fieldError, input } = fieldStyles()\n\nconst Label = ({ className, ...props }: LabelProps) => {\n    return <LabelPrimitive {...props} className={label({ className })} />\n}\n\nconst Description = ({ className, ...props }: TextProps) => {\n    return <Text {...props} slot='description' className={description({ className })} />\n}\n\nconst FieldError = ({ className, ...props }: FieldErrorProps) => {\n    return <FieldErrorPrimitive {...props} className={cn(fieldError(), className)} />\n}\n\nconst fieldGroupStyles = tv({\n    base: [\n        'group flex h-10 items-center overflow-hidden rounded-lg border border-input bg-background transition disabled:opacity-50 disabled:bg-secondary forced-colors:bg-[Field]',\n        'focus-within:border-primary focus-within:ring-4 focus-within:ring-primary/20',\n        'focus-within:invalid:border-danger focus-within:invalid:ring-4 focus-within:invalid:ring-danger/20',\n        'invalid:border-danger',\n        'has-[.isPfx]:pl-2.5 has-[.isSfx]:pr-2.5 [&_[data-slot=icon]]:size-4 has-[.atrs]:shrink-0 has-[.atrs]:text-muted-foreground'\n    ]\n})\n\nconst FieldGroup = (props: GroupProps) => {\n    return (\n        <Group\n            {...props}\n            className={composeRenderProps(props.className, (className, renderProps) =>\n                fieldGroupStyles({ ...renderProps, className })\n            )}\n        />\n    )\n}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>((props, ref) => {\n    return (\n        <InputPrimitive ref={ref} {...props} className={cn(input(), props.className)} />\n    )\n})\nInput.displayName = 'Input'\n\nexport {\n    Description,\n    fieldBorderStyles,\n    FieldError,\n    FieldGroup,\n    fieldGroupPrefixStyles,\n    fieldGroupStyles,\n    Input,\n    InputPrimitive,\n    Label\n}\n",
    "type": "ui"
  },
  "grid-list": {
    "component": "@/components/ui/grid-list",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport { IconGripVertical } from 'cleon-icons'\nimport {\n    Button,\n    GridListItem as GridListItemPrimitive,\n    GridList as GridListPrimitive,\n    type GridListItemProps,\n    type GridListProps as GridListPrimitiveProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\n\nimport { Checkbox } from './checkbox'\n\ninterface GridListProps<T extends object> extends GridListPrimitiveProps<T> {}\n\nconst GridList = <T extends object>({\n    selectionMode = 'single',\n    children,\n    ...props\n}: GridListProps<T>) => (\n    <GridListPrimitive\n        selectionMode={selectionMode}\n        {...props}\n        className={cn('relative overflow-auto rounded-lg border', props.className)}\n    >\n        {children}\n    </GridListPrimitive>\n)\n\nconst itemStyles = tv({\n    base: 'relative -mb-px flex cursor-default select-none gap-3 border-y px-3 py-2 text-sm text-foreground -outline-offset-2 first:rounded-t-md first:border-t-0 last:mb-0 last:rounded-b-md last:border-b-0',\n    variants: {\n        isSelected: {\n            false: 'hover:bg-secondary',\n            true: 'z-20 border-y-primary/50 bg-primary/20'\n        },\n        isDisabled: {\n            true: 'z-10 text-muted-foreground forced-colors:text-[GrayText]'\n        }\n    }\n})\n\nconst GridListItem = ({ children, ...props }: GridListItemProps) => {\n    const textValue = typeof children === 'string' ? children : undefined\n    return (\n        <GridListItemPrimitive textValue={textValue} {...props} className={itemStyles}>\n            {({ selectionMode, selectionBehavior, allowsDragging }) => (\n                <>\n                    {allowsDragging && (\n                        <Button slot='drag'>\n                            <IconGripVertical />\n                        </Button>\n                    )}\n                    {selectionMode === 'multiple' && selectionBehavior === 'toggle' && (\n                        <Checkbox slot='selection' />\n                    )}\n                    {children}\n                </>\n            )}\n        </GridListItemPrimitive>\n    )\n}\n\nconst GridEmptyState = (props: React.HTMLAttributes<HTMLDivElement>) => (\n    <div className='p-6' {...props} />\n)\n\nGridList.Item = GridListItem\nGridList.EmptyState = GridEmptyState\n\nexport { GridList }\n",
    "type": "ui"
  },
  "file-trigger": {
    "component": "@/components/ui/file-trigger",
    "raw": "'use client'\n\nimport { IconCamera, IconFolder, IconPaperclip } from 'cleon-icons'\nimport {\n    FileTrigger as FileTriggerPrimitive,\n    type FileTriggerProps as FileTriggerPrimitiveProps\n} from 'react-aria-components'\n\nimport { Button } from './button'\n\ninterface FileTriggerProps extends FileTriggerPrimitiveProps {\n    withIcon?: boolean\n    isDisabled?: boolean\n    variant?:\n        | 'primary'\n        | 'secondary'\n        | 'danger'\n        | 'warning'\n        | 'info'\n        | 'success'\n        | 'outline'\n        | 'ghost'\n        | 'dark'\n    size?: 'xs' | 'sm' | 'md' | 'lg' | 'icon'\n    shape?: 'square' | 'circle'\n}\n\nconst FileTrigger = ({\n    variant = 'primary',\n    size = 'md',\n    shape = 'square',\n    withIcon = true,\n    ...props\n}: FileTriggerProps) => {\n    return (\n        <FileTriggerPrimitive {...props}>\n            <Button\n                isDisabled={props.isDisabled}\n                size={size}\n                shape={shape}\n                variant={variant}\n            >\n                {withIcon && (\n                    <>\n                        {props.defaultCamera ? (\n                            <IconCamera />\n                        ) : props.acceptDirectory ? (\n                            <IconFolder />\n                        ) : (\n                            <IconPaperclip />\n                        )}\n                    </>\n                )}\n                {size !== 'icon' && (\n                    <>\n                        {props.children ? (\n                            props.children\n                        ) : (\n                            <>\n                                {props.allowsMultiple\n                                    ? 'Browse a files'\n                                    : props.acceptDirectory\n                                      ? 'Browse'\n                                      : 'Browse a file'}\n                                ...\n                            </>\n                        )}\n                    </>\n                )}\n            </Button>\n        </FileTriggerPrimitive>\n    )\n}\n\nexport { FileTrigger }\n",
    "type": "ui"
  },
  "search-field": {
    "component": "@/components/ui/search-field",
    "raw": "'use client'\n\nimport { IconSearch, IconX } from 'cleon-icons'\nimport {\n    SearchField as SearchFieldPrimitive,\n    type SearchFieldProps as SearchFieldPrimitiveProps,\n    type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\n\nimport { Button } from './button'\nimport { Description, FieldError, FieldGroup, Input, Label } from './field'\n\nconst searchFieldStyles = tv({\n    slots: {\n        base: 'group flex min-w-10 flex-col gap-1',\n        searchIcon:\n            'ml-2 size-4 shrink-0 text-muted-foreground group-disabled:text-muted-foreground/50 forced-colors:text-[ButtonText] forced-colors:group-disabled:text-[GrayText]',\n        closeButton:\n            'mr-1 size-8 text-muted-foreground group-empty:invisible hover:bg-transparent pressed:text-foreground',\n        input: '[&::-webkit-search-cancel-button]:hidden'\n    }\n})\n\nconst { base, searchIcon, closeButton, input } = searchFieldStyles()\n\ninterface SearchFieldProps extends SearchFieldPrimitiveProps {\n    label?: string\n    placeholder?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst SearchField = ({\n    className,\n    placeholder = 'Search',\n    label,\n    description,\n    errorMessage,\n    ...props\n}: SearchFieldProps) => {\n    return (\n        <SearchFieldPrimitive {...props} className={cn(base(), className)}>\n            {label && <Label>{label}</Label>}\n            <FieldGroup>\n                <IconSearch aria-hidden className={searchIcon()} />\n                <Input placeholder={placeholder} className={input()} />\n                <Button size='icon' variant='ghost' className={closeButton()}>\n                    <IconX aria-hidden className='size-4' />\n                </Button>\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n        </SearchFieldPrimitive>\n    )\n}\n\nexport { SearchField, type SearchFieldProps }\n",
    "type": "ui"
  },
  "choicebox": {
    "component": "@/components/ui/choicebox",
    "raw": "'use client'\n\nimport {\n    composeRenderProps,\n    GridList,\n    GridListItem,\n    type GridListItemProps,\n    type GridListProps\n} from 'react-aria-components'\nimport type { VariantProps } from 'tailwind-variants'\nimport { tv } from 'tailwind-variants'\n\nimport { Checkbox } from './checkbox'\nimport { Description, Label } from './field'\n\nconst choiceboxStyles = tv({\n    base: 'grid',\n    variants: {\n        columns: {\n            1: 'sm:grid-cols-1',\n            2: 'sm:grid-cols-2',\n            3: 'sm:grid-cols-3',\n            4: 'sm:grid-cols-4',\n            5: 'sm:grid-cols-5',\n            6: 'sm:grid-cols-6'\n        },\n        gap: {\n            2: 'gap-2',\n            4: 'gap-4',\n            6: 'gap-6'\n        }\n    },\n    defaultVariants: {\n        columns: 2,\n        gap: 6\n    }\n})\n\ninterface ChoiceboxProps<T extends object>\n    extends GridListProps<T>,\n        VariantProps<typeof choiceboxStyles> {\n    className?: string\n}\n\nconst Choicebox = <T extends object>({\n    columns,\n    gap,\n    className,\n    selectionMode = 'multiple',\n    ...props\n}: ChoiceboxProps<T>) => {\n    return (\n        <GridList\n            layout={columns === 1 ? 'stack' : 'grid'}\n            selectionMode={selectionMode}\n            className={choiceboxStyles({\n                columns,\n                gap,\n                className\n            })}\n            {...props}\n        />\n    )\n}\n\nconst choiceboxItemStyles = tv({\n    base: 'rounded-lg transition duration-200 cursor-pointer focus:ring focus:ring-4 focus:ring-accent/20 border outline-none p-4 [&_[slot=title]]:font-medium',\n    variants: {\n        isSelected: {\n            true: [\n                'z-20 bg-accent/10 hover:bg-accent/10 border-accent',\n                '[&_[slot=title]]:text-accent',\n                '[&_[slot=description]]:text-accent/50'\n            ]\n        },\n        isFocused: {\n            true: 'border-accent/70'\n        },\n        isHovered: {\n            true: 'bg-muted/50'\n        },\n        isDisabled: {\n            true: 'z-10 cursor-default opacity-80 [&_[slot=title]]:text-muted-foreground forced-colors:text-[GrayText]'\n        }\n    }\n})\n\ninterface ChoiceboxItemProps\n    extends GridListItemProps,\n        VariantProps<typeof choiceboxItemStyles> {\n    title: string\n    description?: string\n}\n\nconst ChoiceboxItem = ({ children, className, ...props }: ChoiceboxItemProps) => {\n    const textValue = typeof children === 'string' ? children : undefined\n    return (\n        <GridListItem\n            textValue={textValue}\n            {...props}\n            className={composeRenderProps(className, (className, renderProps) =>\n                choiceboxItemStyles({\n                    ...renderProps,\n                    className\n                })\n            )}\n        >\n            {(values) => (\n                <div className='flex items-center w-full justify-between gap-2'>\n                    <div className='pr-8 flex flex-col'>\n                        <Label slot='title' htmlFor={textValue}>\n                            {props.title}\n                        </Label>\n                        {props.description && (\n                            <Description>{props.description}</Description>\n                        )}\n                    </div>\n                    <>\n                        {values.selectionMode === 'multiple' &&\n                            values.selectionBehavior === 'toggle' && (\n                                <Checkbox slot='selection' />\n                            )}\n                    </>\n                </div>\n            )}\n        </GridListItem>\n    )\n}\n\nChoicebox.Item = ChoiceboxItem\nexport { Choicebox }\n",
    "type": "ui"
  },
  "checkbox": {
    "component": "@/components/ui/checkbox",
    "raw": "'use client'\n\nimport { type ReactNode } from 'react'\n\nimport {\n    CheckboxGroup as CheckboxGroupPrimitive,\n    type CheckboxGroupProps as CheckboxGroupPrimitiveProps,\n    Checkbox as CheckboxPrimitive,\n    type CheckboxProps as CheckboxPrimitiveProps,\n    composeRenderProps,\n    type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\n\nimport { Description, FieldError, Label } from './field'\n\ninterface CheckboxGroupProps extends Omit<CheckboxGroupPrimitiveProps, 'children'> {\n    label?: string\n    children?: ReactNode\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst CheckboxGroup = (props: CheckboxGroupProps) => {\n    return (\n        <CheckboxGroupPrimitive\n            {...props}\n            className={cn('flex flex-col gap-2', props.className)}\n        >\n            <Label>{props.label}</Label>\n            <>{props.children}</>\n            {props.description && (\n                <Description className='block'>{props.description}</Description>\n            )}\n            <FieldError>{props.errorMessage}</FieldError>\n        </CheckboxGroupPrimitive>\n    )\n}\n\nconst checkboxStyles = tv({\n    base: 'racc group flex items-center gap-2 text-sm transition',\n    variants: {\n        isDisabled: {\n            false: 'opacity-100',\n            true: 'opacity-50'\n        }\n    }\n})\n\nconst boxStyles = tv({\n    base: 'flex size-4 flex-shrink-0 items-center justify-center rounded border text-background transition',\n    variants: {\n        isSelected: {\n            false: 'border-muted bg-background',\n            true: [\n                'border-primary/70 bg-primary text-primary-foreground',\n                'group-invalid:border-danger/70 group-invalid:bg-danger group-invalid:text-danger-foreground'\n            ]\n        },\n        isFocused: {\n            true: [\n                'border-primary/70 ring-4 ring-primary/20',\n                'group-invalid:border-danger/70 group-invalid:text-danger-foreground group-invalid:ring-danger/20'\n            ]\n        },\n        isInvalid: {\n            true: 'border-danger/70 bg-danger/20 text-danger-foreground ring-danger/20'\n        }\n    }\n})\n\ninterface CheckboxProps extends CheckboxPrimitiveProps {\n    description?: string\n}\n\nconst Checkbox = (props: CheckboxProps) => {\n    return (\n        <CheckboxPrimitive\n            {...props}\n            className={composeRenderProps(props.className, (className, renderProps) =>\n                checkboxStyles({ ...renderProps, className })\n            )}\n        >\n            {({ isSelected, isIndeterminate, ...renderProps }) => (\n                <div className='flex gap-2'>\n                    <div\n                        className={boxStyles({\n                            isSelected: isSelected || isIndeterminate,\n                            className: props.description ? 'mt-1' : 'mt-0.5',\n                            ...renderProps\n                        })}\n                    >\n                        {isIndeterminate ? (\n                            <svg\n                                xmlns='http://www.w3.org/2000/svg'\n                                width={24}\n                                height={24}\n                                viewBox='0 0 24 24'\n                                fill='none'\n                                stroke='currentColor'\n                                strokeWidth={2.5}\n                                strokeLinecap='round'\n                                strokeLinejoin='round'\n                                className='size-3'\n                            >\n                                <line x1={5} y1={12} x2={19} y2={12} />\n                            </svg>\n                        ) : isSelected ? (\n                            <svg\n                                xmlns='http://www.w3.org/2000/svg'\n                                width={24}\n                                height={24}\n                                viewBox='0 0 24 24'\n                                fill='none'\n                                stroke='currentColor'\n                                strokeWidth={2.5}\n                                strokeLinecap='round'\n                                strokeLinejoin='round'\n                                className='size-3'\n                            >\n                                <polyline points='20 6 9 17 4 12' />\n                            </svg>\n                        ) : null}\n                    </div>\n\n                    <div className='flex flex-col gap-1'>\n                        <>{props.children}</>\n                        {props.description && (\n                            <Description>{props.description}</Description>\n                        )}\n                    </div>\n                </div>\n            )}\n        </CheckboxPrimitive>\n    )\n}\n\nexport { Checkbox, CheckboxGroup }\n",
    "type": "ui"
  },
  "icon": {
    "component": "@/components/ui/icon",
    "raw": "import * as icons from 'cleon-icons'\n\nimport { cn } from '@/lib/utils'\n\nexport interface IconProps extends React.SVGProps<SVGSVGElement> {\n    icon: keyof typeof icons\n    className?: string\n}\n\nexport const Icon = ({ icon, className, ...props }: IconProps) => {\n    const CleonIcon = icons[icon] as React.FC<React.SVGProps<SVGSVGElement>>\n    if (!CleonIcon) return null\n    return <CleonIcon className={cn('size-5', className)} {...props} />\n}\n",
    "type": "ui"
  },
  "date-picker": {
    "component": "@/components/ui/date-picker",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconCalendarDays } from 'cleon-icons'\nimport {\n    DatePicker as DatePickerPrimitive,\n    type DatePickerProps as DatePickerPrimitiveProps,\n    type DateValue,\n    type DialogProps,\n    type PopoverProps,\n    type ValidationResult\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\n\nimport { Button } from './button'\nimport { Calendar } from './calendar'\nimport { DateInput } from './date-field'\nimport { Description, FieldError, FieldGroup, Label } from './field'\nimport { Popover } from './popover'\n\nconst datePickerStyles = tv({\n    slots: {\n        base: 'group flex flex-col gap-1',\n        datePickerIcon:\n            'group mr-1 h-7 dark:[&>[data-slot=icon]]:text-zinc-400 [&>[data-slot=icon]]:text-zinc-800 w-8 rounded outline-offset-0 hover:bg-transparent pressed:bg-transparent',\n        calendarIcon: 'size-4 text-muted-foreground group-open:text-foreground',\n        datePickerInput: 'w-full px-2 font-mono uppercase text-base lg:text-sm',\n        dateRangePickerInputStart: 'px-2 lg:text-sm font-mono uppercase text-base',\n        dateRangePickerInputEnd:\n            'flex-1 px-2 py-1.5 font-mono uppercase text-base lg:text-sm',\n        dateRangePickerDash:\n            'text-zinc-800 group-disabled:text-zinc-200 dark:text-zinc-200 group-disabled:dark:text-zinc-600 forced-colors:text-[ButtonText] group-disabled:forced-colors:text-[GrayText]'\n    }\n})\n\nconst { base, datePickerIcon, calendarIcon, datePickerInput } = datePickerStyles()\n\ninterface DatePickerOverlayProps\n    extends Omit<DialogProps, 'children' | 'className' | 'style'>,\n        Omit<PopoverProps, 'children' | 'className' | 'style'> {\n    className?: string | DialogProps['className'] | PopoverProps['className']\n    children?: React.ReactNode\n    closeButton?: boolean\n    range?: boolean\n}\n\nconst DatePickerOverlay = ({\n    closeButton = true,\n    range,\n    ...props\n}: DatePickerOverlayProps) => {\n    return (\n        <Popover.Content\n            showArrow={false}\n            className='flex justify-center min-w-[--trigger-width]'\n            {...props}\n        >\n            {range ? <Calendar.RangeCalendar /> : <Calendar />}\n            {closeButton && (\n                <div className='sm:hidden py-2.5 mx-auto w-full max-w-[inherit]'>\n                    <Popover.Close shape='circle' className='w-full'>\n                        Close\n                    </Popover.Close>\n                </div>\n            )}\n        </Popover.Content>\n    )\n}\n\nconst DatePickerIcon = () => (\n    <Button size='icon' variant='ghost' className={datePickerIcon()}>\n        <IconCalendarDays aria-hidden className={calendarIcon()} />\n    </Button>\n)\n\ninterface DatePickerProps<T extends DateValue> extends DatePickerPrimitiveProps<T> {\n    label?: string\n    description?: string\n    errorMessage?: string | ((validation: ValidationResult) => string)\n}\n\nconst DatePicker = <T extends DateValue>({\n    label,\n    className,\n    description,\n    children,\n    errorMessage,\n    ...props\n}: DatePickerProps<T>) => {\n    return (\n        <DatePickerPrimitive {...props} className={cn(base(), className)}>\n            {label && <Label>{label}</Label>}\n            <FieldGroup className='min-w-40'>\n                <DateInput className={datePickerInput()} />\n                <DatePickerIcon />\n            </FieldGroup>\n            {description && <Description>{description}</Description>}\n            <FieldError>{errorMessage}</FieldError>\n            <DatePickerOverlay />\n        </DatePickerPrimitive>\n    )\n}\n\nDatePicker.Icon = DatePickerIcon\nDatePicker.Overlay = DatePickerOverlay\n\nexport { DatePicker, type DatePickerProps, type DateValue, type ValidationResult }\n",
    "type": "ui"
  },
  "toggle": {
    "component": "@/components/ui/toggle",
    "raw": "'use client'\n\nimport {\n    composeRenderProps,\n    ToggleButton as ToggleButtonPrimitive,\n    type ToggleButtonProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { type ButtonProps } from './button'\n\nconst toggleStyles = tv({\n    base: [\n        'relative whitespace-nowrap outline-none transition no-underline isolate inline-flex items-center justify-center gap-x-2 font-medium',\n        '[&_svg]:size-4 [&_svg]:shrink-0',\n        'disabled:cursor-default disabled:opacity-50'\n    ],\n    variants: {\n        isDisabled: {\n            true: 'opacity-50 cursor-default forced-colors:border-[GrayText]'\n        },\n        variant: {\n            primary:\n                'border bg-background text-foreground selected:bg-primary selected:text-primary-foreground pressed:ring pressed:ring-primary/40 shadow-sm',\n            secondary:\n                'border bg-background text-foreground selected:bg-secondary selected:text-secondary-foreground pressed:ring pressed:ring-secondary/40 shadow-sm',\n            danger: 'border bg-background text-foreground selected:bg-danger selected:text-danger-foreground pressed:ring pressed:ring-danger/40 shadow-sm',\n            success:\n                'border bg-background text-foreground selected:bg-success selected:text-success-foreground pressed:ring pressed:ring-success/40 shadow-sm',\n            info: 'border bg-background text-foreground selected:bg-info selected:text-info-foreground pressed:ring pressed:ring-info/40 shadow-sm',\n            warning:\n                'border bg-background text-foreground selected:bg-warning selected:text-warning-foreground pressed:ring pressed:ring-warning/40 shadow-sm',\n            dark: 'border bg-background text-foreground selected:bg-dark selected:text-dark-foreground pressed:ring pressed:ring-dark/40 shadow-sm',\n            outline:\n                'border bg-background selected:bg-muted text-foreground shadow-sm hover:bg-muted pressed:bg-muted',\n            ghost: 'text-foreground selected:bg-muted bg-transparent hover:bg-muted pressed:bg-muted'\n        },\n        size: {\n            xs: 'h-8 px-2 text-xs',\n            sm: 'h-9 px-3 text-sm',\n            md: 'h-10 px-4 py-2 text-sm',\n            lg: 'h-10 sm:h-11 px-6 sm:px-8 text-base',\n            icon: 'size-9 sm:size-10 shrink-0'\n        },\n        shape: {\n            square: 'rounded-lg',\n            circle: 'rounded-full'\n        }\n    },\n    defaultVariants: {\n        variant: 'outline',\n        size: 'md',\n        shape: 'square'\n    }\n})\n\ninterface ToggleProps extends ToggleButtonProps {\n    variant?: ButtonProps['variant']\n    size?: ButtonProps['size']\n    shape?: ButtonProps['shape']\n}\n\nconst Toggle = ({ className, ...props }: ToggleProps) => {\n    return (\n        <ToggleButtonPrimitive\n            {...props}\n            className={composeRenderProps(className, (className, renderProps) =>\n                toggleStyles({\n                    ...renderProps,\n                    variant: props.variant,\n                    size: props.size,\n                    shape: props.shape,\n                    className\n                })\n            )}\n        />\n    )\n}\n\nexport { Toggle, toggleStyles, type ToggleProps }\n",
    "type": "ui"
  },
  "breadcrumbs": {
    "component": "@/components/ui/breadcrumbs",
    "raw": "'use client'\n\nimport { IconChevronRight } from 'cleon-icons'\nimport type { BreadcrumbProps, BreadcrumbsProps } from 'react-aria-components'\nimport {\n    Breadcrumb as BreadcrumbPrimitive,\n    Breadcrumbs as BreadcrumbsPrimitive,\n    type LinkProps\n} from 'react-aria-components'\n\nimport { cn } from '@/lib/utils'\n\nimport { Link } from './link'\n\nconst Breadcrumbs = <T extends object>({ className, ...props }: BreadcrumbsProps<T>) => {\n    return <BreadcrumbsPrimitive {...props} className={cn('flex gap-1', className)} />\n}\n\nconst Breadcrumb = ({ className, ...props }: BreadcrumbProps & LinkProps) => {\n    return (\n        <BreadcrumbPrimitive\n            {...props}\n            className={cn('flex items-center gap-1', className)}\n        >\n            <Link href={props.href} {...props} />\n            {'href' in props && (\n                <IconChevronRight className='size-4 shrink-0 text-muted-foreground' />\n            )}\n        </BreadcrumbPrimitive>\n    )\n}\n\nexport { Breadcrumb, Breadcrumbs }\n",
    "type": "ui"
  },
  "accordion": {
    "component": "@/components/ui/accordion",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconChevronDown } from 'cleon-icons'\nimport { AnimatePresence, motion, type MotionProps } from 'framer-motion'\nimport { Button, composeRenderProps, type ButtonProps } from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\n\ninterface AccordionContextType extends React.HtmlHTMLAttributes<HTMLDivElement> {\n    hideBorder?: boolean\n    hideIndicator?: boolean\n    disabledKeys?: number[]\n    defaultExpandedKeys?: number[] | string[]\n}\n\nconst AccordionContext = React.createContext<AccordionContextType>({})\nconst useAccordion = () => React.useContext(AccordionContext)\n\ninterface AccordionProps extends AccordionContextType {\n    children: React.ReactNode\n}\n\nconst Accordion = ({\n    children,\n    disabledKeys,\n    hideIndicator,\n    hideBorder,\n    defaultExpandedKeys,\n    ...props\n}: AccordionProps) => {\n    return (\n        <AccordionContext.Provider\n            value={{ hideIndicator, defaultExpandedKeys, hideBorder, disabledKeys }}\n        >\n            <div {...props}>{children}</div>\n        </AccordionContext.Provider>\n    )\n}\n\nconst accordionItemStyles = tv({\n    base: 'accordion-item flex group pb-3 relative w-full flex-col border-b'\n})\n\ninterface AccordionItemContextProps {\n    setExpanded?: (index: null | number | string) => void\n    isOpen?: boolean\n    currentId: number | string\n}\n\nconst AccordionItemContext = React.createContext<AccordionItemContextProps | undefined>(\n    undefined\n)\nconst useAccordionItem = () => {\n    const context = React.useContext(AccordionItemContext)\n    if (!context) {\n        throw new Error('Accordion.Item must be used within an Accordion')\n    }\n    return context\n}\n\ninterface AccordionItemProps extends React.HTMLAttributes<HTMLDivElement> {\n    currentId: number | string\n}\n\nconst AccordionItem = ({ className, children, currentId }: AccordionItemProps) => {\n    const { defaultExpandedKeys, disabledKeys } = useAccordion()\n    const [expanded, setExpanded] = React.useState<any>(\n        // @ts-ignore - TS doesn't know that defaultExpandedKeys is an array of numbers\n        defaultExpandedKeys?.includes(currentId) ? currentId : false\n    )\n    const isOpen = currentId === expanded\n    const isLocked = disabledKeys?.includes(currentId as number)\n    return (\n        <AccordionItemContext.Provider value={{ setExpanded, isOpen, currentId }}>\n            <div\n                data-slot='item'\n                data-locked={isLocked ?? undefined}\n                data-open={isOpen ?? undefined}\n                className={accordionItemStyles({ className })}\n            >\n                {children}\n            </div>\n        </AccordionItemContext.Provider>\n    )\n}\n\ninterface AccordionContentProps extends React.HTMLAttributes<HTMLDivElement> {\n    children: React.ReactNode\n}\n\nconst AccordionContent = ({ className, children }: AccordionContentProps) => {\n    const { isOpen } = useAccordionItem()\n    return (\n        <AnimatePresence initial={false}>\n            {isOpen && (\n                <motion.section\n                    className={cn('overflow-hidden pr-6 accordion-content', className)}\n                    initial='collapsed'\n                    animate='open'\n                    exit='collapsed'\n                    variants={{\n                        open: { opacity: 1, height: 'initial' },\n                        collapsed: { opacity: 0, height: 0 }\n                    }}\n                    transition={{ duration: 0.4, ease: [0.04, 0.62, 0.23, 0.98] }}\n                >\n                    <div className='pb-0 pt-1'>{children}</div>\n                </motion.section>\n            )}\n        </AnimatePresence>\n    )\n}\n\ninterface AccordionTriggerProps\n    extends Omit<\n        ButtonProps & React.RefAttributes<HTMLButtonElement> & MotionProps,\n        'ref'\n    > {\n    children: React.ReactNode\n}\n\nconst accordionTriggerStyles = tv({\n    base: [\n        'flex flex-1 rounded-lg text-foreground hover:text-primary [&_svg]:size-4 [&>[data-slot=icon]]:size-6 items-center gap-x-2 pt-3 font-medium'\n    ],\n    variants: {\n        isFocused: {\n            true: 'outline-none text-primary'\n        },\n        isOpen: {\n            true: 'text-primary'\n        },\n        isDisabled: {\n            true: 'opacity-50 cursor-default'\n        }\n    }\n})\n\nconst AccordionTrigger = ({ className, children, ...props }: AccordionTriggerProps) => {\n    const { setExpanded, isOpen, currentId } = useAccordionItem()\n    const { hideIndicator, disabledKeys } = useAccordion()\n    const isLocked = disabledKeys?.includes(currentId as number)\n\n    const handlePress = () => {\n        if (setExpanded) {\n            setExpanded(isOpen ? null : currentId)\n        }\n    }\n\n    const onKeyDownHandler = (e: React.KeyboardEvent<HTMLButtonElement>) => {\n        if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {\n            e.preventDefault()\n            const buttons = document.querySelectorAll(\n                'div[data-slot=\"ai-31kxlae0321lsd\"] > button'\n            )\n            const currentButton = e.currentTarget\n            const currentIndex = Array.from(buttons).indexOf(currentButton)\n            const totalItems = buttons.length\n            let nextIndex = currentIndex + (e.key === 'ArrowDown' ? 1 : -1)\n\n            if (nextIndex >= totalItems) {\n                nextIndex = 0\n            } else if (nextIndex < 0) {\n                nextIndex = totalItems - 1\n            }\n\n            ;(buttons[nextIndex] as HTMLElement).focus()\n        }\n    }\n\n    return (\n        <Button\n            {...props}\n            isDisabled={isLocked}\n            onKeyDown={onKeyDownHandler}\n            onPress={handlePress}\n            className={composeRenderProps(className, (className, renderProps) =>\n                accordionTriggerStyles({\n                    ...renderProps,\n                    isOpen,\n                    className\n                })\n            )}\n        >\n            {children}\n            {!hideIndicator && (\n                <IconChevronDown\n                    className={cn(\n                        'ml-auto transition duration-300 group-disabled:rotate-0',\n                        isOpen ? 'rotate-180' : 'rotate-0'\n                    )}\n                />\n            )}\n        </Button>\n    )\n}\n\nAccordion.Item = AccordionItem\nAccordion.Content = AccordionContent\nAccordion.Trigger = AccordionTrigger\n\nexport { Accordion, type AccordionTriggerProps }\n",
    "type": "ui"
  },
  "note": {
    "component": "@/components/ui/note",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { IconAlertCircle, IconAlertTriangle, IconCircleCheck } from 'cleon-icons'\nimport { Text } from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\n\nconst noteStyles = tv({\n    base: [\n        'my-4 px-5 py-4 overflow-hidden rounded-xl border [&_strong]:font-medium',\n        '[&_[data-slot=icon]]:size-4 [&_[data-slot=icon]]:shrink-0'\n    ],\n    variants: {\n        variant: {\n            primary: [\n                'border-primary/20 [&_a]:text-primary text-primary bg-primary/10 [&_[data-slot=icon]]:text-primary leading-4'\n            ],\n            secondary: [\n                'border-foreground/20 [&_a]:text-foreground text-foreground bg-secondary/20 [&_[data-slot=icon]]:text-foreground leading-4'\n            ],\n            info: [\n                'border-info/20 [&_a]:text-info text-info bg-info/10 [&_[data-slot=icon]]:text-info leading-4'\n            ],\n            warning: [\n                'border-warning/20 [&_a]:text-warning text-warning bg-warning/10 [&_[data-slot=icon]]:text-warning leading-4'\n            ],\n            danger: [\n                'border-danger/20 [&_a]:text-danger text-danger bg-danger/10 [&_[data-slot=icon]]:text-danger leading-4'\n            ],\n            success: [\n                'border-success/20 [&_a]:text-success text-success bg-success/10 [&_[data-slot=icon]]:text-success leading-4'\n            ]\n        }\n    },\n    defaultVariants: {\n        variant: 'primary'\n    }\n})\n\ninterface NoteProps\n    extends React.HtmlHTMLAttributes<HTMLDivElement>,\n        VariantProps<typeof noteStyles> {}\n\nconst Note = ({ variant = 'secondary', className, ...props }: NoteProps) => {\n    return (\n        <div className={noteStyles({ variant, className })} {...props}>\n            <div className='flex items-start gap-x-3'>\n                <div className='mt-0.5 w-5'>\n                    {['info', 'primary', 'secondary'].includes(variant) ? (\n                        <IconAlertCircle />\n                    ) : variant === 'success' ? (\n                        <IconCircleCheck />\n                    ) : (\n                        <IconAlertTriangle />\n                    )}\n                </div>\n                <Text\n                    slot='description'\n                    {...props}\n                    className={cn('text-sm block', className)}\n                >\n                    {props.children}\n                </Text>\n            </div>\n        </div>\n    )\n}\n\nexport { Note, type NoteProps }\n",
    "type": "ui"
  },
  "switch": {
    "component": "@/components/ui/switch",
    "raw": "'use client'\n\nimport {\n    Switch as SwitchPrimitive,\n    type SwitchProps as SwitchPrimitiveProps\n} from 'react-aria-components'\nimport { tv, type VariantProps } from 'tailwind-variants'\n\nimport { cn } from '@/lib/utils'\n\nconst trackStyles = tv({\n    base: 'mr-2 h-5 w-8 cursor-pointer rounded-full border-2 border-transparent bg-muted transition duration-200',\n    variants: {\n        variant: {\n            primary: 'group-selected:bg-primary',\n            secondary: 'group-selected:bg-secondary',\n            success: 'group-selected:bg-success',\n            danger: 'group-selected:bg-danger',\n            warning: 'group-selected:bg-warning',\n            info: 'group-selected:bg-info'\n        }\n    },\n    defaultVariants: {\n        variant: 'primary'\n    }\n})\n\ninterface SwitchProps extends SwitchPrimitiveProps, VariantProps<typeof trackStyles> {}\n\nconst Switch = ({ children, variant, className, ...props }: SwitchProps) => {\n    return (\n        <SwitchPrimitive\n            {...props}\n            className={(values) =>\n                cn(\n                    'group inline-flex touch-none lg:text-sm items-center disabled:opacity-60 forced-colors:disabled:text-[GrayText]',\n                    typeof className === 'function' ? className(values) : className\n                )\n            }\n            style={{ WebkitTapHighlightColor: 'transparent' }}\n        >\n            {(values) => (\n                <>\n                    <span className={trackStyles({ variant })}>\n                        <span className='forced-colors:disabled:outline-[GrayText] group-selected:ml-3 group-selected:group-data-[pressed]:ml-2 group-pressed:w-5 block size-4 origin-right rounded-full bg-white shadow transition-all duration-200' />\n                    </span>\n                    {typeof children === 'function' ? children(values) : children}\n                </>\n            )}\n        </SwitchPrimitive>\n    )\n}\n\nexport { Switch }\n",
    "type": "ui"
  },
  "tooltip": {
    "component": "@/components/ui/tooltip",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    Button,\n    composeRenderProps,\n    OverlayArrow,\n    Tooltip as TooltipPrimitive,\n    TooltipTrigger as TooltipTriggerPrimitive,\n    type TooltipProps as TooltipPrimitiveProps,\n    type TooltipTriggerComponentProps\n} from 'react-aria-components'\nimport { tv } from 'tailwind-variants'\n\nexport interface TooltipProps extends Omit<TooltipPrimitiveProps, 'children'> {\n    children: React.ReactNode\n}\n\nconst tooltipStyles = tv({\n    base: [\n        'group rounded-md [&_strong]:font-medium bg-foreground border border-foreground text-background px-2 py-1.5 text-sm will-change-transform dark:shadow-none',\n        'placement-left:slide-in-from-right-1 placement-right:slide-in-from-left-1 placement-top:slide-in-from-bottom-1 placement-bottom:slide-in-from-top-1'\n    ],\n    variants: {\n        isEntering: {\n            true: 'animate-in fade-in'\n        },\n        isExiting: {\n            true: 'animate-in fade-in direction-reverse'\n        }\n    }\n})\nconst Tooltip = (props: TooltipTriggerComponentProps) => {\n    return <TooltipTriggerPrimitive {...props} />\n}\nconst TooltipTrigger = Button\n\nconst TooltipContent = ({ children, ...props }: TooltipProps) => {\n    return (\n        <TooltipPrimitive\n            {...props}\n            offset={10}\n            className={composeRenderProps(props.className, (className, renderProps) =>\n                tooltipStyles({\n                    ...renderProps,\n                    className\n                })\n            )}\n        >\n            <OverlayArrow>\n                <svg\n                    width={8}\n                    height={8}\n                    viewBox='0 0 8 8'\n                    className='fill-foreground stroke-foreground group-placement-left:-rotate-90 group-placement-right:rotate-90 group-placement-bottom:rotate-180 forced-colors:fill-[Canvas] forced-colors:stroke-[ButtonBorder]'\n                >\n                    <path d='M0 0 L4 4 L8 0' />\n                </svg>\n            </OverlayArrow>\n            {children}\n        </TooltipPrimitive>\n    )\n}\n\nTooltip.Content = TooltipContent\nTooltip.Trigger = TooltipTrigger\n\nexport { Tooltip }\n",
    "type": "ui"
  },
  "visually-hidden": {
    "component": "@/components/ui/visually-hidden",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport { useVisuallyHidden } from 'react-aria'\n\ntype VisuallyHiddenSpanProps = {\n    children: React.ReactNode\n}\n\nconst VisuallyHidden = ({ children }: VisuallyHiddenSpanProps) => {\n    const { visuallyHiddenProps } = useVisuallyHidden()\n\n    return <span {...visuallyHiddenProps}>{children}</span>\n}\n\nexport { VisuallyHidden }\n",
    "type": "ui"
  }
}