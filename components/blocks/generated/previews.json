{
  "chat-app": {
    "component": "@/components/blocks/chat-app",
    "raw": "'use client'\n\nimport React from 'react'\n\nimport {\n    IconBrandCleon,\n    IconBroadcast,\n    IconCircleX,\n    IconDotsVertical,\n    IconLogout,\n    IconMessage,\n    IconMessageDots,\n    IconMessages,\n    IconMicrophone,\n    IconMovie,\n    IconSend,\n    IconSettings,\n    IconTrash,\n    IconUser,\n    IconUsers\n} from 'cleon-icons'\nimport { TextArea } from 'react-aria-components'\n\nimport {\n    Avatar,\n    Button,\n    buttonVariants,\n    EmojiPicker,\n    FileTrigger,\n    Form,\n    Menu,\n    Popover,\n    Tooltip\n} from '@/components/ui'\nimport { cn, convertToHtml, formatTime } from '@/lib/utils'\n\nexport default function ChatApp() {\n    const [chats, setChats] = React.useState<BubbleChatProps[]>([\n        {\n            message: \"Assalamu'alaikum, Hello Bro!\",\n            time: '10:00',\n            role: 'recieve'\n        },\n        {\n            message: \"Wa'alaikumsalam, Yes Bro... What's up?\",\n            time: '10:01',\n            role: 'send',\n            status: 'read'\n        },\n        {\n            message: `I Have a good news, There is new Component at this site. I hope you will like it.\n                Check it out. https://cleon-ui.vercel.app\n                `,\n            time: '10:03',\n            role: 'recieve'\n        }\n    ])\n\n    const ContactList = [\n        {\n            status: 'online',\n            name: 'DQ Al-Haqqi',\n            avatar: 'https://github.com/dq-alhq.png',\n            active: true\n        },\n        {\n            status: 'online',\n            name: 'Barbara Kirlin Sr.',\n            avatar: 'https://i.pravatar.cc/150?img=1'\n        },\n        {\n            status: 'offline',\n            last_seen: '10 mins ago',\n            name: 'Rosemarie Koch',\n            avatar: 'https://i.pravatar.cc/150?img=2'\n        },\n        {\n            status: 'offline',\n            last_seen: '13 mins ago',\n            name: 'Mrs. Reva Heaney Jr.',\n            avatar: 'https://i.pravatar.cc/150?img=3'\n        },\n        {\n            status: 'online',\n            name: 'Ms. Ettie Abshire DVM',\n            avatar: 'https://i.pravatar.cc/150?img=4'\n        },\n        {\n            status: 'online',\n            name: 'Bria Ziemann',\n            avatar: 'https://i.pravatar.cc/150?img=5'\n        },\n        {\n            status: 'online',\n            name: 'Heloise Borer Sr.',\n            avatar: 'https://i.pravatar.cc/150?img=6'\n        },\n        {\n            status: 'offline',\n            last_seen: '3 days ago',\n            name: 'Miss Jacinthe Gerlach DVM',\n            avatar: 'https://i.pravatar.cc/150?img=7'\n        },\n        {\n            status: 'offline',\n            last_seen: 'a week ago',\n            name: 'Miss Stephania Schaefer Sr.',\n            avatar: 'https://i.pravatar.cc/150?img=8'\n        }\n    ]\n\n    const [message, setMessage] = React.useState('')\n    const messageRef = React.useRef<HTMLTextAreaElement>(null)\n    const [emoji, setEmoji] = React.useState(false)\n    const [cursorPosition, setCursorPosition] = React.useState<number>(0)\n    function openEmoji() {\n        messageRef.current?.focus()\n        setEmoji(!emoji)\n    }\n    function pickEmoji(emoji: string) {\n        messageRef.current?.focus()\n        setEmoji(true)\n        const start = message.substring(0, messageRef.current?.selectionStart)\n        const end = message.substring(messageRef.current?.selectionStart || 0)\n        setMessage(start + emoji + end)\n        setCursorPosition(start.length + emoji.length)\n        messageRef.current?.setSelectionRange(cursorPosition, cursorPosition)\n    }\n\n    React.useEffect(() => {\n        if (cursorPosition > 0) {\n            messageRef.current?.setSelectionRange(cursorPosition, cursorPosition)\n        }\n    }, [cursorPosition])\n\n    const [file, setFile] = React.useState<string[] | null>(null)\n\n    function sendMessage(e: any) {\n        e.preventDefault()\n        setChats([\n            ...chats,\n            {\n                message,\n                time: formatTime(new Date()),\n                role: 'send'\n            }\n        ])\n        setMessage('')\n    }\n\n    function deleteChat(index: number) {\n        setChats([...chats.slice(0, index), ...chats.slice(index + 1)])\n    }\n    return (\n        <>\n            <div className='grid h-screen w-full md:pl-[56px]'>\n                <aside className='inset-y hidden fixed left-0 z-20 md:flex h-full flex-col border-r'>\n                    <div className='border-b p-2'>\n                        <Button variant='outline' size='icon' aria-label='Home'>\n                            <IconBrandCleon className='!size-6 fill-foreground' />\n                        </Button>\n                    </div>\n                    <nav className='grid gap-1 p-2'>\n                        <Tooltip>\n                            <Tooltip.Trigger\n                                className={cn(\n                                    buttonVariants({ variant: 'outline', size: 'icon' })\n                                )}\n                            >\n                                <IconMessageDots className='!size-6' />\n                            </Tooltip.Trigger>\n                            <Tooltip.Content placement='right'>Chats</Tooltip.Content>\n                        </Tooltip>\n                        <Tooltip>\n                            <Tooltip.Trigger\n                                className={cn(\n                                    buttonVariants({ variant: 'ghost', size: 'icon' })\n                                )}\n                            >\n                                <IconMovie className='!size-6' />\n                            </Tooltip.Trigger>\n                            <Tooltip.Content placement='right'>Reels</Tooltip.Content>\n                        </Tooltip>\n                        <Tooltip>\n                            <Tooltip.Trigger\n                                className={cn(\n                                    buttonVariants({ variant: 'ghost', size: 'icon' })\n                                )}\n                            >\n                                <IconBroadcast className='!size-6' />\n                            </Tooltip.Trigger>\n                            <Tooltip.Content placement='right'>Broadcast</Tooltip.Content>\n                        </Tooltip>\n                        <Tooltip>\n                            <Tooltip.Trigger\n                                className={cn(\n                                    buttonVariants({ variant: 'ghost', size: 'icon' })\n                                )}\n                            >\n                                <IconUsers className='!size-6' />\n                            </Tooltip.Trigger>\n                            <Tooltip.Content placement='right'>Groups</Tooltip.Content>\n                        </Tooltip>\n                    </nav>\n                    <nav className='mt-auto flex flex-col gap-2 p-2 items-center'>\n                        <Tooltip>\n                            <Tooltip.Trigger\n                                className={cn(\n                                    buttonVariants({ variant: 'ghost', size: 'icon' })\n                                )}\n                            >\n                                <IconSettings className='!size-6' />\n                            </Tooltip.Trigger>\n                            <Tooltip.Content placement='right'>Settings</Tooltip.Content>\n                        </Tooltip>\n                        <Avatar src='https://github.com/dq-alhq.png' initials='DQ' />\n                    </nav>\n                </aside>\n                <main className='grid flex-1 gap-4 overflow-auto md:p-4 md:grid-cols-2 lg:grid-cols-3'>\n                    <div className='relative hidden flex-col gap-4 items-start md:flex border rounded-lg overflow-scroll'>\n                        <div className='flex w-full justify-between items-center sticky top-0 z-20 bg-background p-4'>\n                            <h1 className='text-2xl font-bold'>Chats</h1>\n                            <div className='flex justify-between items-center gap-2'>\n                                <Button variant='ghost' size='icon'>\n                                    <IconMessage className='!size-6' />\n                                </Button>\n                                <Menu>\n                                    <Menu.Trigger\n                                        className={buttonVariants({\n                                            variant: 'ghost',\n                                            size: 'icon'\n                                        })}\n                                    >\n                                        <IconDotsVertical />\n                                    </Menu.Trigger>\n                                    <Menu.Content placement='bottom end'>\n                                        <Menu.Item>\n                                            <IconMessages />\n                                            New Group\n                                        </Menu.Item>\n                                        <Menu.Item isDanger>\n                                            <IconLogout />\n                                            Logout\n                                        </Menu.Item>\n                                    </Menu.Content>\n                                </Menu>\n                            </div>\n                        </div>\n                        <div className='grid w-full gap-2 px-4'>\n                            {ContactList.map((contact: any, i: number) => (\n                                <Contact key={i} {...contact} />\n                            ))}\n                        </div>\n                    </div>\n                    <div className='relative flex h-full min-h-[50vh] flex-col rounded-lg bg-background lg:col-span-2'>\n                        <div className='p-2 md:px-4 rounded-lg flex flex-row gap-3 items-center border-b md:border'>\n                            <Avatar\n                                initials='DQ'\n                                status='muted'\n                                src='https://github.com/dq-alhq.png'\n                            />\n                            <div className='grid'>\n                                <span className='text-sm'>DQ Al-Haqqi</span>\n                                <small className='text-muted-foreground text-xs'>\n                                    Last seen 1 hour ago\n                                </small>\n                            </div>\n                            <Menu>\n                                <Menu.Trigger\n                                    className={cn(\n                                        buttonVariants({\n                                            variant: 'ghost',\n                                            size: 'icon'\n                                        }),\n                                        'ml-auto'\n                                    )}\n                                >\n                                    <IconDotsVertical />\n                                </Menu.Trigger>\n                                <Menu.Content placement='bottom end'>\n                                    <Menu.Item>\n                                        <IconUser />\n                                        Contact Info\n                                    </Menu.Item>\n                                    <Menu.Item>\n                                        <IconTrash />\n                                        Clear Chat\n                                    </Menu.Item>\n                                    <Menu.Item isDanger>\n                                        <IconCircleX />\n                                        Block\n                                    </Menu.Item>\n                                </Menu.Content>\n                            </Menu>\n                        </div>\n                        <div className='flex-1 flex-col space-y-2 text-muted-foreground py-4 px-2 overflow-y-scroll overflow-x-hidden'>\n                            {chats.length > 0 ? (\n                                chats?.map((chat: BubbleChatProps, i: number) => (\n                                    <BubbleChat\n                                        key={i}\n                                        {...chat}\n                                        onDelete={() => deleteChat(i)}\n                                    />\n                                ))\n                            ) : (\n                                <div className='flex flex-col items-center justify-center h-full'>\n                                    <IconMessageDots className='!size-6' />\n                                    <p className='text-center font-bold text-xl'>\n                                        Start a conversation\n                                    </p>\n                                </div>\n                            )}\n                        </div>\n                        <Form\n                            onSubmit={sendMessage}\n                            className='relative overflow-hidden rounded-lg border-t md:border bg-background focus-within:ring-1 focus-within:ring-ring'\n                        >\n                            <TextArea\n                                onKeyDown={(e) => {\n                                    if (e.key === 'Enter' && !e.shiftKey) {\n                                        e.preventDefault()\n                                        sendMessage(e)\n                                    }\n                                }}\n                                value={message}\n                                ref={messageRef}\n                                onChange={(e) => setMessage(e.target.value)}\n                                aria-label='Message'\n                                id='message'\n                                placeholder='Type your message here...'\n                                className='min-h-12 w-full no-scrollbar resize-none border-0 outline-none p-3'\n                            />\n                            <div className='flex items-center p-3 pt-0'>\n                                <EmojiPicker\n                                    placement='left'\n                                    open={emoji}\n                                    setOpen={openEmoji}\n                                    onPickEmoji={(e) => pickEmoji(e)}\n                                />\n                                <FileTrigger\n                                    variant='ghost'\n                                    size='icon'\n                                    onSelect={(e) => {\n                                        const files = Array.from(e ?? [])\n                                        const filenames = files.map((file) => file.name)\n                                        setFile(filenames)\n                                    }}\n                                />\n                                <Tooltip>\n                                    <Tooltip.Trigger\n                                        className={buttonVariants({\n                                            variant: 'ghost',\n                                            size: 'icon'\n                                        })}\n                                    >\n                                        <IconMicrophone className='size-4' />\n                                        <span className='sr-only'>Use Microphone</span>\n                                    </Tooltip.Trigger>\n                                    <Tooltip.Content placement='top'>\n                                        Use Microphone\n                                    </Tooltip.Content>\n                                </Tooltip>\n                                <Button\n                                    isDisabled={!message}\n                                    type='submit'\n                                    size='sm'\n                                    className='ml-auto gap-1.5'\n                                >\n                                    Send Message\n                                    <IconSend />\n                                </Button>\n                            </div>\n                        </Form>\n                    </div>\n                </main>\n            </div>\n        </>\n    )\n}\n\ninterface BubbleChatProps {\n    message: string\n    time: string\n    role: 'send' | 'recieve'\n    status?: 'pending' | 'sent' | 'delivered' | 'read'\n    onDelete?: () => void\n}\n\nconst BubbleChat = ({ message, time, role, status, onDelete }: BubbleChatProps) => {\n    const statusIcon: Record<string, React.ReactNode> = {\n        pending: (\n            <svg\n                xmlns='http://www.w3.org/2000/svg'\n                className='size-5 text-foreground'\n                viewBox='0 0 24 24'\n            >\n                <g\n                    fill='none'\n                    stroke='currentColor'\n                    strokeLinecap='round'\n                    strokeLinejoin='round'\n                    strokeWidth={2}\n                >\n                    <path d='M3 12a9 9 0 1 0 18 0a9 9 0 0 0-18 0'></path>\n                    <path d='M12 7v5l3 3'></path>\n                </g>\n            </svg>\n        ),\n        sent: (\n            <svg\n                xmlns='http://www.w3.org/2000/svg'\n                className='size-5 text-foreground'\n                viewBox='0 0 24 24'\n            >\n                <path\n                    fill='none'\n                    stroke='currentColor'\n                    strokeLinecap='round'\n                    strokeLinejoin='round'\n                    strokeWidth={2}\n                    d='m5 12l5 5L20 7'\n                ></path>\n            </svg>\n        ),\n        delivered: (\n            <svg\n                xmlns='http://www.w3.org/2000/svg'\n                className='size-5 text-foreground'\n                viewBox='0 0 24 24'\n            >\n                <path\n                    fill='none'\n                    stroke='currentColor'\n                    strokeLinecap='round'\n                    strokeLinejoin='round'\n                    strokeWidth={2}\n                    d='m7 12l5 5L22 7M2 12l5 5m5-5l5-5'\n                ></path>\n            </svg>\n        ),\n        read: (\n            <svg\n                xmlns='http://www.w3.org/2000/svg'\n                className='size-5 text-success'\n                viewBox='0 0 24 24'\n            >\n                <path\n                    fill='none'\n                    stroke='currentColor'\n                    strokeLinecap='round'\n                    strokeLinejoin='round'\n                    strokeWidth={2}\n                    d='m7 12l5 5L22 7M2 12l5 5m5-5l5-5'\n                ></path>\n            </svg>\n        )\n    }\n    return (\n        <div\n            className={cn(\n                'flex items-start group',\n                role === 'send' ? 'flex-row-reverse' : 'flex-row'\n            )}\n        >\n            <div>\n                <div\n                    className={cn(\n                        'rounded-lg border-0 outline-none text-right [&_strong]:font-medium px-2 py-1.5 text-sm',\n                        role === 'send'\n                            ? 'bg-dark text-dark-foreground rounded-br-none'\n                            : 'bg-primary text-primary-foreground rounded-bl-none'\n                    )}\n                >\n                    <div\n                        className='text-left prose dark:prose-blue prose-invert text-sm'\n                        dangerouslySetInnerHTML={{ __html: convertToHtml(message) }}\n                    ></div>\n                </div>\n                <small\n                    className={cn(\n                        'flex gap-1 mt-0.5 text-muted-foreground items-center',\n                        role === 'send' ? 'justify-end' : 'justify-start'\n                    )}\n                >\n                    {time}\n                    {role === 'send' && status && statusIcon[status]}\n                </small>\n            </div>\n            <Popover>\n                <Button\n                    variant='danger'\n                    size='icon'\n                    className='size-8 mx-2 opacity-0 pressed:opacity-100 group-hover:opacity-100 transition p-1 sm:size-8'\n                >\n                    <IconTrash className='size-3' />\n                </Button>\n                <Popover.Content>\n                    <Popover.Header>\n                        <Popover.Title>Delete Chat</Popover.Title>\n                        <Popover.Description>\n                            This action will permanently delete this chat. Continue?\n                        </Popover.Description>\n                    </Popover.Header>\n                    <Popover.Footer>\n                        <Button onPress={onDelete} variant='danger'>\n                            Delete\n                        </Button>\n                    </Popover.Footer>\n                </Popover.Content>\n            </Popover>\n        </div>\n    )\n}\n\ninterface ContactProps {\n    name: string\n    avatar: string\n    status?: 'online' | 'offline'\n    last_seen?: string\n    active?: boolean\n}\nconst Contact = ({ name, avatar, status, last_seen, active }: ContactProps) => {\n    return (\n        <div\n            className={cn(\n                'p-2 md:px-4 rounded-lg flex flex-row gap-3 items-center border-b cursor-pointer md:border',\n                active ? 'bg-primary/20' : ''\n            )}\n        >\n            {status === 'online' ? (\n                <Avatar src={avatar} status='success' />\n            ) : (\n                <Avatar src={avatar} />\n            )}\n            <div className='grid'>\n                <span className='text-sm'>{name}</span>\n                {status === 'online' ? (\n                    <small className='text-success text-xs'>Online</small>\n                ) : (\n                    <small className='text-muted-foreground text-xs'>\n                        Last seen {last_seen}\n                    </small>\n                )}\n            </div>\n        </div>\n    )\n}\n",
    "type": "blocks"
  },
  "product-management": {
    "component": "@/components/blocks/product-management",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n    IconBrandCleon,\n    IconCircleCheck,\n    IconLifebuoy,\n    IconLoader,\n    IconLogout,\n    IconMenu,\n    IconSettings,\n    IconSquarePlus,\n    IconTrash\n} from 'cleon-icons'\nimport { motion } from 'framer-motion'\nimport Link from 'next/link'\nimport { type Key, type Selection, type SortDescriptor } from 'react-aria-components'\n\nimport { ThemeToggle } from '@/components/theme-toggle'\nimport {\n    Avatar,\n    Button,\n    buttonVariants,\n    Card,\n    ComboBox,\n    Form,\n    Menu,\n    Modal,\n    NumberField,\n    Pagination,\n    Popover,\n    SearchField,\n    Select,\n    Sheet,\n    Table,\n    TextField\n} from '@/components/ui'\nimport { cn } from '@/lib/utils'\n\nexport default function ProductManagement() {\n    return (\n        <div className='flex min-h-screen w-full flex-col'>\n            <header className='sticky z-50 top-0 flex py-2 justify-between items-center gap-4 border-b bg-background px-4 md:px-6'>\n                <nav className='hidden flex-col gap-6 text-lg font-medium md:flex md:flex-row md:items-center md:gap-5 md:text-sm lg:gap-6'>\n                    <Link\n                        href='#'\n                        className='flex items-center gap-2 text-lg font-semibold md:text-base'\n                    >\n                        <IconBrandCleon className='size-6' />\n                        <span className='sr-only'>Cleon UI</span>\n                    </Link>\n                    <Nav />\n                </nav>\n                <Sheet>\n                    <Sheet.Trigger\n                        className={cn(\n                            buttonVariants({ size: 'icon', variant: 'outline' }),\n                            'md:hidden'\n                        )}\n                    >\n                        <IconMenu className='h-5 w-5' />\n                    </Sheet.Trigger>\n                    <Sheet.Content side='left' aria-labelledby='Menu'>\n                        <Sheet.Header>\n                            <Sheet.Title id='Menu'>Menu</Sheet.Title>\n                            <Sheet.Description>Open the menu.</Sheet.Description>\n                        </Sheet.Header>\n                        <Sheet.Body className='px-6'>\n                            <Nav />\n                        </Sheet.Body>\n                    </Sheet.Content>\n                </Sheet>\n                <div className='flex items-center gap-2'>\n                    <Popover>\n                        <Popover.Trigger\n                            className={buttonVariants({\n                                size: 'icon',\n                                variant: 'outline'\n                            })}\n                        >\n                            <IconSettings className='h-5 w-5' />\n                        </Popover.Trigger>\n                        <Popover.Content>\n                            <SearchField aria-label='Search' />\n                        </Popover.Content>\n                    </Popover>\n                    <ThemeToggle />\n                    <Menu>\n                        <Menu.Trigger>\n                            <Avatar\n                                className='size-9 sm:size-10'\n                                initials='DQ'\n                                src='https://github.com/dq-alhq.png'\n                            />\n                        </Menu.Trigger>\n                        <Menu.Content>\n                            <Menu.Section>\n                                <Menu.Header separator>\n                                    <span className='block'>DQ Al-Haqqi</span>\n                                    <span className='font-normal text-muted-foreground'>\n                                        @dq-alhq\n                                    </span>\n                                </Menu.Header>\n                                <Menu.Item>\n                                    <IconSettings />\n                                    Settings\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <IconLifebuoy />\n                                    Support\n                                </Menu.Item>\n                                <Menu.Item isDanger>\n                                    <IconLogout />\n                                    Logout\n                                </Menu.Item>\n                            </Menu.Section>\n                        </Menu.Content>\n                    </Menu>\n                </div>\n            </header>\n            <main className='flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-8'>\n                <ProductTable />\n            </main>\n        </div>\n    )\n}\n\nconst NavLink = ({\n    href,\n    isActive,\n    children,\n    ...props\n}: {\n    href: string\n    isActive?: boolean\n    children: React.ReactNode\n}) => {\n    return (\n        <Link\n            href={href}\n            className={cn(\n                'relative whitespace-nowrap flex items-center gap-x-3 py-2 text-sm transition-colors focus:outline-none sm:py-3',\n                isActive ? 'text-primary' : 'text-foreground hover:text-primary'\n            )}\n            {...props}\n        >\n            <>\n                {children}\n                {isActive && (\n                    <motion.span\n                        layoutId='current-indicator-navlink'\n                        className='absolute inset-x-0 bottom-[-0.550rem] h-0.5 w-full rounded bg-primary'\n                    />\n                )}\n            </>\n        </Link>\n    )\n}\n\nconst Nav = () => {\n    return (\n        <>\n            <NavLink href='#'>Dashboard</NavLink>\n            <NavLink href='#'>Orders</NavLink>\n            <NavLink href='#' isActive>\n                Products\n            </NavLink>\n            <NavLink href='#'>Customers</NavLink>\n            <NavLink href='#'>Analytics</NavLink>\n        </>\n    )\n}\n\ninterface Product {\n    id: number\n    title: string\n    price: number\n    category: string\n}\n\nconst ProductTable = () => {\n    const [search, setSearch] = React.useState('')\n    const [list, setList] = React.useState<Product[]>([])\n    const [selectedKeys, setSelectedKeys] = React.useState<Selection>(new Set())\n    const [sortDescriptor, setSortDescriptor] = React.useState<SortDescriptor>({\n        column: 'id',\n        direction: 'ascending'\n    })\n    const [limit, setLimit] = React.useState<Key>(10)\n    const [page, setPage] = React.useState(1)\n\n    const [totalPage, setTotalPage] = React.useState(\n        Math.ceil(list.length / Number(limit)) || 1\n    )\n\n    React.useEffect(() => {\n        setTotalPage(Math.ceil(list.length / Number(limit)))\n    }, [list, limit])\n\n    React.useEffect(() => {\n        const getList = async () => {\n            await fetch(`https://fakestoreapi.com/products?limit=10`)\n                .then((res) => res.json())\n                .then((data) => setList(data))\n        }\n        getList()\n    }, [])\n\n    const products = React.useMemo(() => {\n        return list\n            .filter((p) => p.title.toLowerCase().includes(search.toLowerCase()))\n            .sort((a, b) => {\n                const first = a[sortDescriptor.column as keyof Key]\n                const second = b[sortDescriptor.column as keyof Key]\n                let sorted =\n                    (Number(first) || first) < (Number(second) || second) ? -1 : 1\n                sortDescriptor.direction === 'descending' ? (sorted *= -1) : sorted\n                return sorted\n            })\n            .slice((page - 1) * Number(limit), page * Number(limit))\n    }, [list, search, sortDescriptor, limit, page])\n\n    const handleSubmit = (e: any) => {\n        e.preventDefault()\n        const { name, price, category } = e.target\n        if (name.value && price.value && category.value) {\n            const newProduct: Product = {\n                id: Math.max(...list.map((product) => product.id)) + 1,\n                title: name.value,\n                price: parseInt(price.value),\n                category: category.value\n            }\n            setList([...list, newProduct])\n            setTotalPage(Math.ceil(list.length / Number(limit)))\n            name.value = price.value = category.value = ''\n        }\n    }\n\n    const [isDeleting, setIsDeleting] = React.useState(false)\n    const [loading, setLoading] = React.useState<'idle' | 'loading' | 'success'>('idle')\n    const triggerRef = React.useRef(null)\n\n    const deleteProducts = () => {\n        setLoading('loading')\n\n        if (selectedKeys === 'all') {\n            setList([])\n        } else {\n            setList(list.filter((product) => !selectedKeys.has(product.id)))\n        }\n        setLoading('success')\n        setIsDeleting(false)\n        setLoading('idle')\n        setSelectedKeys(new Set())\n        setTotalPage(Math.ceil(list.length / Number(limit)))\n    }\n\n    return (\n        <Card>\n            <div className='p-6'>\n                <div className='flex gap-2 flex-col lg:flex-row lg:items-center lg:justify-between'>\n                    <Card.Header className='p-0'>\n                        <Card.Title>Products</Card.Title>\n                        <Card.Description>\n                            The list of the products in the store\n                        </Card.Description>\n                    </Card.Header>\n                    <div className='flex flex-col lg:flex-row lg:items-center gap-2 lg:justify-end'>\n                        {Array.from(selectedKeys).length > 0 && (\n                            <>\n                                <Button\n                                    ref={triggerRef}\n                                    onPress={() => setIsDeleting(true)}\n                                    variant='danger'\n                                >\n                                    Delete Product\n                                </Button>\n                                <Popover.Content\n                                    triggerRef={triggerRef}\n                                    isOpen={isDeleting}\n                                    onOpenChange={setIsDeleting}\n                                    className='sm:max-w-sm'\n                                >\n                                    <Popover.Header>\n                                        <Popover.Title>Confirm Deletion</Popover.Title>\n                                        <Popover.Description>\n                                            Are you sure you want to delete your account?\n                                            This action cannot be undone.\n                                        </Popover.Description>\n                                    </Popover.Header>\n                                    <Popover.Footer className='flex justify-end'>\n                                        <Button\n                                            variant='outline'\n                                            onPress={() => setIsDeleting(false)}\n                                            className='mr-2'\n                                        >\n                                            Cancel\n                                        </Button>\n                                        <Button\n                                            isDisabled={loading === 'loading'}\n                                            onPress={deleteProducts}\n                                            variant={\n                                                ['loading', 'idle'].includes(loading)\n                                                    ? 'danger'\n                                                    : 'success'\n                                            }\n                                        >\n                                            {loading === 'loading' ? (\n                                                <>\n                                                    <IconLoader className='animate-spin' />\n                                                    Deleting...\n                                                </>\n                                            ) : loading === 'success' ? (\n                                                <>\n                                                    <IconCircleCheck />\n                                                    Deleted\n                                                </>\n                                            ) : (\n                                                <>\n                                                    <IconTrash />\n                                                    Delete\n                                                </>\n                                            )}\n                                        </Button>\n                                    </Popover.Footer>\n                                </Popover.Content>\n                            </>\n                        )}\n                        <SearchField\n                            aria-label='Search'\n                            value={search}\n                            onChange={(e) => {\n                                setSearch(e)\n                                setPage(1)\n                            }}\n                            className='min-w-[18rem]'\n                        />\n                        <Modal>\n                            <Button>\n                                <IconSquarePlus />\n                                New Product\n                            </Button>\n                            <Modal.Content>\n                                <Modal.Header>\n                                    <Modal.Title>Create New Product</Modal.Title>\n                                    <Modal.Description>\n                                        Fill in the form below to create a new product\n                                    </Modal.Description>\n                                </Modal.Header>\n                                <Form\n                                    onSubmit={(e) => handleSubmit(e)}\n                                    className='space-y-2'\n                                >\n                                    <TextField\n                                        id='name'\n                                        isRequired\n                                        label='Name'\n                                        placeholder='Product Name'\n                                    />\n                                    <NumberField\n                                        id='price'\n                                        isRequired\n                                        label='Price'\n                                        placeholder='00.00'\n                                    />\n                                    <ComboBox\n                                        id='category'\n                                        label='Category'\n                                        placeholder='Category'\n                                        isRequired\n                                    >\n                                        <ComboBox.Item id={'electronics'}>\n                                            electronics\n                                        </ComboBox.Item>\n                                        <ComboBox.Item id={'jewelery'}>\n                                            jewelery\n                                        </ComboBox.Item>\n                                        <ComboBox.Item id={\"men's clothing\"}>\n                                            men's clothing\n                                        </ComboBox.Item>\n                                        <ComboBox.Item id={\"women's clothing\"}>\n                                            women's clothing\n                                        </ComboBox.Item>\n                                    </ComboBox>\n                                    <Modal.Footer className='pt-4'>\n                                        <Modal.Close>Cancel</Modal.Close>\n                                        <Modal.Close variant='primary' type='submit'>\n                                            Save\n                                        </Modal.Close>\n                                    </Modal.Footer>\n                                </Form>\n                            </Modal.Content>\n                        </Modal>\n                    </div>\n                </div>\n            </div>\n            <Card.Content>\n                <Table\n                    aria-label='Products'\n                    sortDescriptor={sortDescriptor}\n                    onSortChange={setSortDescriptor}\n                    selectionMode='multiple'\n                    selectedKeys={selectedKeys}\n                    onSelectionChange={setSelectedKeys}\n                >\n                    <Table.Header>\n                        <Table.Column id='id'>#</Table.Column>\n                        <Table.Column id='title' isRowHeader allowsSorting>\n                            Name\n                        </Table.Column>\n                        <Table.Column id='price' allowsSorting>\n                            Price\n                        </Table.Column>\n                        <Table.Column id='category' allowsSorting>\n                            Category\n                        </Table.Column>\n                    </Table.Header>\n                    <Table.Body\n                        items={products}\n                        renderEmptyState={() => (\n                            <div className='grid place-content-center p-10'>\n                                <h3 className='text-lg'>No products found</h3>\n                            </div>\n                        )}\n                    >\n                        {(item) => (\n                            <Table.Row id={item.id}>\n                                <Table.Cell>{item.id}</Table.Cell>\n                                <Table.Cell>{item.title}</Table.Cell>\n                                <Table.Cell>${item.price}</Table.Cell>\n                                <Table.Cell>{item.category}</Table.Cell>\n                            </Table.Row>\n                        )}\n                    </Table.Body>\n                </Table>\n            </Card.Content>\n            <Card.Footer className='justify-between border-t gap-2 pt-6'>\n                <div className='flex whitespace-nowrap items-center gap-1 text-sm text-muted-foreground'>\n                    Show\n                    <Select\n                        placement='top'\n                        aria-label='Products per page'\n                        selectedKey={limit}\n                        onSelectionChange={setLimit}\n                        placeholder='10'\n                        className='max-w-[4rem]'\n                    >\n                        <Select.Item id={5}>5</Select.Item>\n                        <Select.Item id={10}>10</Select.Item>\n                        <Select.Item id={20}>20</Select.Item>\n                        <Select.Item id={50}>50</Select.Item>\n                    </Select>\n                    from {list?.length}\n                </div>\n                <Pagination className='sm:justify-end'>\n                    <Pagination.List>\n                        <Pagination.Item\n                            role='first'\n                            isDisabled={page <= 1}\n                            onAction={() => setPage(1)}\n                        />\n                        <Pagination.Item\n                            isDisabled={page <= 1}\n                            role='previous'\n                            onAction={() => setPage(page - 1)}\n                        />\n                        <Pagination.Section\n                            aria-label='Pagination Segment'\n                            className='hidden lg:flex'\n                        >\n                            {page - 1 > 1 && (\n                                <>\n                                    <Pagination.Item onAction={() => setPage(1)}>\n                                        1\n                                    </Pagination.Item>\n                                    {page - 1 !== 2 && (\n                                        <Pagination.Item role='ellipsis' />\n                                    )}\n                                </>\n                            )}\n                            {page > 1 && (\n                                <Pagination.Item onAction={() => setPage(page - 1)}>\n                                    {page - 1}\n                                </Pagination.Item>\n                            )}\n                            <Pagination.Item isCurrent>{page}</Pagination.Item>\n                            {page < totalPage && (\n                                <Pagination.Item onAction={() => setPage(page + 1)}>\n                                    {page + 1}\n                                </Pagination.Item>\n                            )}\n                            {page + 1 < totalPage && (\n                                <>\n                                    {totalPage - 2 !== page && (\n                                        <Pagination.Item role='ellipsis' />\n                                    )}\n                                    <Pagination.Item onAction={() => setPage(page + 1)}>\n                                        {totalPage}\n                                    </Pagination.Item>\n                                </>\n                            )}\n                        </Pagination.Section>\n                        <Pagination.Item\n                            role='next'\n                            onAction={() => setPage(page + 1)}\n                            isDisabled={page >= totalPage}\n                        />\n                        <Pagination.Item\n                            role='last'\n                            onAction={() => setPage(totalPage)}\n                            isDisabled={page >= totalPage}\n                        />\n                    </Pagination.List>\n                </Pagination>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "blocks"
  },
  "social-media-timeline": {
    "component": "@/components/blocks/social-media-timeline",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n    IconBrandCleon,\n    IconCalendarTime,\n    IconHome,\n    IconMessage,\n    IconMessages,\n    IconRecycle,\n    IconRefresh,\n    IconRocket,\n    IconSearch,\n    IconSend,\n    IconThumbUp,\n    IconTrendingUp,\n    IconUser,\n    IconUserPlus,\n    IconUsers\n} from 'cleon-icons'\nimport { motion } from 'framer-motion'\nimport { TextArea } from 'react-aria-components'\n\nimport { ThemeToggle } from '@/components/theme-toggle'\nimport {\n    Avatar,\n    Button,\n    Card,\n    EmojiPicker,\n    FileTrigger,\n    Form,\n    Link,\n    SearchField\n} from '@/components/ui'\nimport { cn, convertToHtml, formatTime, getInitials } from '@/lib/utils'\n\ntype FeedProps = {\n    author: {\n        name: string\n        avatar: string\n    }\n    body: string\n    time: string\n    likes: number\n    comments: number\n    share: number\n}\n\nconst FriendList = [\n    {\n        status: 'online',\n        name: 'DQ Al-Haqqi',\n        avatar: 'https://github.com/dq-alhq.png'\n    },\n    {\n        status: 'online',\n        name: 'Barbara Kirlin Sr.',\n        avatar: 'https://i.pravatar.cc/150?img=1'\n    },\n    {\n        status: 'offline',\n        last_seen: '10 mins ago',\n        name: 'Rosemarie Koch',\n        avatar: 'https://i.pravatar.cc/150?img=2'\n    },\n    {\n        status: 'offline',\n        last_seen: '13 mins ago',\n        name: 'Mrs. Reva Heaney Jr.',\n        avatar: 'https://i.pravatar.cc/150?img=3'\n    },\n    {\n        status: 'online',\n        name: 'Ms. Ettie Abshire DVM',\n        avatar: 'https://i.pravatar.cc/150?img=4'\n    },\n    {\n        status: 'online',\n        name: 'Bria Ziemann',\n        avatar: 'https://i.pravatar.cc/150?img=5'\n    },\n    {\n        status: 'online',\n        name: 'Heloise Borer Sr.',\n        avatar: 'https://i.pravatar.cc/150?img=6'\n    },\n    {\n        status: 'offline',\n        last_seen: '3 days ago',\n        name: 'Miss Jacinthe Gerlach DVM',\n        avatar: 'https://i.pravatar.cc/150?img=7'\n    },\n    {\n        status: 'offline',\n        last_seen: 'a week ago',\n        name: 'Miss Stephania Schaefer Sr.',\n        avatar: 'https://i.pravatar.cc/150?img=8'\n    }\n]\nexport default function SocialMediaTimeline() {\n    const [post, setPost] = React.useState('')\n    const postRef = React.useRef<HTMLTextAreaElement>(null)\n    const [emoji, setEmoji] = React.useState(false)\n    const [cursorPosition, setCursorPosition] = React.useState<number>(0)\n\n    const [feeds, setFeeds] = React.useState<FeedProps[]>([\n        {\n            author: {\n                name: 'DQ Al-Haqqi',\n                avatar: 'https://github.com/dqnahdliyan.png'\n            },\n            body: 'I Create a New Component today, check it out. https://cleon-ui.vercel.app',\n            time: '10:00',\n            likes: 10,\n            comments: 0,\n            share: 8\n        },\n        {\n            author: {\n                name: 'Yuni Ambar',\n                avatar: 'https://github.com/dq-alhq.png'\n            },\n            body: \"This UI Component library is awesome. Don't forget to give it a *star*. https://github.com/dq-alhq/cleon-ui\",\n            time: '12:00',\n            likes: 2,\n            comments: 0,\n            share: 4\n        }\n    ])\n\n    function openEmoji() {\n        postRef.current?.focus()\n        setEmoji(!emoji)\n    }\n\n    function pickEmoji(emoji: string) {\n        postRef.current?.focus()\n        setEmoji(true)\n        const start = post.substring(0, postRef.current?.selectionStart)\n        const end = post.substring(postRef.current?.selectionStart || 0)\n        setPost(start + emoji + end)\n        setCursorPosition(start.length + emoji.length)\n        postRef.current?.setSelectionRange(cursorPosition, cursorPosition)\n    }\n\n    React.useEffect(() => {\n        if (cursorPosition > 0) {\n            postRef.current?.setSelectionRange(cursorPosition, cursorPosition)\n        }\n    }, [cursorPosition])\n\n    const [file, setFile] = React.useState<string[] | null>(null)\n\n    function sendPost(e: any) {\n        e.preventDefault()\n        setFeeds([\n            ...feeds,\n            {\n                author: {\n                    name: 'DQ Al-Haqqi',\n                    avatar: 'https://github.com/dq-alhq.png'\n                },\n                body: post,\n                time: formatTime(new Date()),\n                likes: 0,\n                comments: 0,\n                share: 0\n            }\n        ])\n        setPost('')\n    }\n    return (\n        <>\n            <div className='sticky top-0 z-30 hidden overflow-hidden pb-1 sm:block'>\n                <nav className='border-b bg-background/60 py-2 backdrop-blur-xl'>\n                    <div className='container'>\n                        <div className='flex items-center justify-between'>\n                            <div className='flex items-center gap-x-6'>\n                                <Link\n                                    href='#'\n                                    className='flex items-center gap-2 mr-2 text-lg font-semibold md:text-base'\n                                >\n                                    <IconBrandCleon className='size-6' />\n                                    <span className='sr-only'>Cleon UI</span>\n                                </Link>\n                                <NavLink isActive href='/'>\n                                    <IconHome className='size-5' />\n                                    <span className='hidden md:flex'>Home</span>\n                                </NavLink>\n                                <NavLink href='#'>\n                                    <IconUsers className='size-5' />\n                                    <span className='hidden md:flex'>Friends</span>\n                                </NavLink>\n                                <NavLink href='#'>\n                                    <IconMessages className='size-5' />\n                                    <span className='hidden md:flex'>Messages</span>\n                                </NavLink>\n                                <NavLink href='#'>\n                                    <IconUser className='size-5' />\n                                    <span className='hidden md:flex'>Profile</span>\n                                </NavLink>\n                            </div>\n                            <div className='flex items-center gap-x-3'>\n                                <SearchField aria-label='Search' />\n                                <ThemeToggle />\n                            </div>\n                        </div>\n                    </div>\n                </nav>\n            </div>\n            <div className='container mx-auto'>\n                <div className='grid grid-cols-3 sm:grid-cols-4 lg:grid-cols-5'>\n                    <div className='col-span-1 hidden lg:flex p-6'>\n                        <div className='flex flex-col gap-2 w-full'>\n                            <SideNav href='#' isActive>\n                                <IconCalendarTime className='size-5' />\n                                <span className='hidden sm:flex'>Timeline</span>\n                            </SideNav>\n                            <SideNav href='#'>\n                                <IconSearch className='size-5' />\n                                <span className='hidden sm:flex'>Explore</span>\n                            </SideNav>\n                            <SideNav href='#'>\n                                <IconTrendingUp className='size-5' />\n                                <span className='hidden sm:flex'>Trending</span>\n                            </SideNav>\n                            <SideNav href='#'>\n                                <IconRocket className='size-5' />\n                                <span className='hidden sm:flex'>News</span>\n                            </SideNav>\n                        </div>\n                    </div>\n                    <div className='col-span-3 p-6 grid gap-4'>\n                        <h1 className='text-3xl font-bold'>Your Timeline</h1>\n                        <Form\n                            onSubmit={sendPost}\n                            className='relative overflow-hidden rounded-lg border-t md:border bg-background focus-within:ring-1 focus-within:ring-ring'\n                        >\n                            <Avatar\n                                initials='DQ'\n                                size='xl'\n                                className='absolute left-4 top-4'\n                            />\n                            <TextArea\n                                onKeyDown={(e) => {\n                                    if (e.key === 'Enter' && !e.shiftKey) {\n                                        e.preventDefault()\n                                        sendPost(e)\n                                    }\n                                }}\n                                value={post}\n                                ref={postRef}\n                                onChange={(e) => setPost(e.target.value)}\n                                aria-label='Post'\n                                id='post'\n                                placeholder='What’s on your mind?'\n                                className='min-h-10 w-full no-scrollbar resize-none border-0 outline-none p-4 pl-20'\n                            />\n                            <div className='flex items-center p-3 pt-0'>\n                                <EmojiPicker\n                                    placement='left'\n                                    open={emoji}\n                                    setOpen={openEmoji}\n                                    onPickEmoji={(e) => pickEmoji(e)}\n                                />\n                                <FileTrigger\n                                    defaultCamera='environment'\n                                    variant='ghost'\n                                    size='icon'\n                                    onSelect={(e) => {\n                                        const files = Array.from(e ?? [])\n                                        const filenames = files.map((file) => file.name)\n                                        setFile(filenames)\n                                    }}\n                                />\n\n                                <Button\n                                    isDisabled={!post}\n                                    type='submit'\n                                    size='sm'\n                                    className='ml-auto gap-1.5'\n                                >\n                                    Post\n                                    <IconSend />\n                                </Button>\n                            </div>\n                        </Form>\n                        <div className='w-full justify-between flex items-center'>\n                            <h4 className='text-muted-foreground text-lg my-2'>Feeds</h4>\n                            <Button variant='secondary' size='sm' className='group'>\n                                <IconRefresh className='transition group-pressed:-rotate-180' />\n                                Refresh\n                            </Button>\n                        </div>\n                        <div className='grid space-y-4'>\n                            {feeds.map((feed, i) => (\n                                <Feed feed={feed} key={i} />\n                            ))}\n                        </div>\n                    </div>\n                    <div className='col-span-1 hidden sm:flex'>\n                        <div className='flex flex-col gap-2 p-2 mt-2'>\n                            <h5 className='text-foreground text-lg'>Friends</h5>\n                            <p className='text-muted-foreground text-sm'>\n                                Add friends to see their posts here.\n                            </p>\n                            <div className='grid gap-2 mt-4'>\n                                {FriendList.map((friend: any, i: number) => (\n                                    <Friends key={i} {...friend} />\n                                ))}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n\ninterface FriendsProps {\n    name: string\n    avatar: string\n    status?: 'online' | 'offline'\n    last_seen?: string\n    active?: boolean\n}\n\nconst Friends = ({ name, avatar, status, last_seen, active }: FriendsProps) => {\n    return (\n        <div\n            className={cn(\n                'rounded-lg p-2 flex w-full flex-row gap-3 items-center border-b cursor-pointer md:border'\n            )}\n        >\n            {status === 'online' ? (\n                <Avatar src={avatar} status='success' />\n            ) : (\n                <Avatar src={avatar} />\n            )}\n            <div className='grid'>\n                <span className='text-sm line-clamp-1'>{name}</span>\n                {status === 'online' ? (\n                    <small className='text-success text-xs'>Online</small>\n                ) : (\n                    <small className='text-muted-foreground text-xs'>\n                        Last seen {last_seen}\n                    </small>\n                )}\n            </div>\n            <Button size='icon' variant='ghost' className='ml-auto'>\n                <IconUserPlus />\n            </Button>\n        </div>\n    )\n}\n\nconst SideNav = ({\n    href,\n    isActive,\n    children,\n    ...props\n}: {\n    href: string\n    isActive?: boolean\n    children: React.ReactNode\n}) => {\n    return (\n        <Link\n            href={href}\n            className={cn(\n                'flex items-center gap-3 rounded-lg px-3 py-2 text-foreground transition-all hover:text-primary',\n                {\n                    'bg-primary text-primary-foreground hover:text-primary-foreground':\n                        isActive\n                }\n            )}\n        >\n            {children}\n        </Link>\n    )\n}\n\nconst NavLink = ({\n    href,\n    isActive,\n    children,\n    ...props\n}: {\n    href: string\n    isActive?: boolean\n    children: React.ReactNode\n}) => {\n    return (\n        <Link\n            href={href}\n            className={cn(\n                'relative whitespace-nowrap flex items-center gap-x-3 py-2 transition-colors focus:outline-none sm:py-3',\n                isActive ? 'text-primary' : 'text-foreground hover:text-primary'\n            )}\n            {...props}\n        >\n            <>\n                {children}\n                {isActive && (\n                    <motion.span\n                        layoutId='current-indicator-navlink'\n                        className='absolute inset-x-0 bottom-[-0.550rem] h-0.5 w-full rounded bg-primary'\n                    />\n                )}\n            </>\n        </Link>\n    )\n}\n\nconst Feed = ({ feed }: { feed: FeedProps }) => {\n    return (\n        <Card>\n            <Card.Header className='flex-row gap-3'>\n                <Avatar\n                    initials={getInitials(feed.author.name)}\n                    src={feed.author.avatar}\n                />\n                <div className='flex items-center flex-row gap-2'>\n                    <Link href='#' className='font-semibold text-foreground'>\n                        {feed.author.name}\n                    </Link>\n                    <Link\n                        href='#'\n                        className='text-sm text-muted-foreground hover:underline'\n                    >\n                        {feed.time}\n                    </Link>\n                </div>\n            </Card.Header>\n            <Card.Content\n                className='text-left prose prose-blue dark:prose-invert text-sm'\n                dangerouslySetInnerHTML={{ __html: convertToHtml(feed.body) }}\n            />\n            <Card.Footer className='-m-6 mt-0'>\n                <div className='w-full flex flex-row items-center border-t rounded-t-lg'>\n                    <Button className='w-full' variant='ghost'>\n                        <IconThumbUp className='size-5' />\n                        <span className='ml-1'>{feed.likes}</span>\n                    </Button>\n                    <Button className='w-full' variant='ghost'>\n                        <IconMessage className='size-5' />\n                        <span className='ml-1'>{feed.comments}</span>\n                    </Button>\n                    <Button className='w-full' variant='ghost'>\n                        <IconRecycle className='size-5' />\n                        <span className='ml-1'>{feed.share}</span>\n                    </Button>\n                </div>\n            </Card.Footer>\n        </Card>\n    )\n}\n",
    "type": "blocks"
  },
  "dashboard": {
    "component": "@/components/blocks/dashboard",
    "raw": "'use client'\n\nimport * as React from 'react'\n\nimport {\n    IconBell,\n    IconBrandCleon,\n    IconCreditCard,\n    IconCurrencyDollar,\n    IconHome,\n    IconLifebuoy,\n    IconLoader,\n    IconLogout,\n    IconMenu,\n    IconPackage,\n    IconSettings,\n    IconShoppingCart,\n    IconTrendingUp,\n    IconUsers\n} from 'cleon-icons'\nimport Link from 'next/link'\nimport {\n    Bar,\n    BarChart,\n    CartesianGrid,\n    Line,\n    LineChart,\n    Rectangle,\n    XAxis,\n    YAxis\n} from 'recharts'\n\nimport { ThemeToggle } from '@/components/theme-toggle'\nimport {\n    Avatar,\n    Badge,\n    Button,\n    buttonVariants,\n    Card,\n    ChartContainer,\n    ChartTooltip,\n    ChartTooltipContent,\n    Menu,\n    Sheet,\n    Table\n} from '@/components/ui'\nimport { cn, formatDate } from '@/lib/utils'\nimport { useAsyncList } from '@react-stately/data'\n\nconst roles = [\n    {\n        id: 0,\n        name: 'Welcome To Dashboard',\n        description:\n            'We are happy to have you on board. We are looking forward to working with you.'\n    },\n    {\n        id: 1,\n        name: 'New Component',\n        description: 'We have added a new component. Check it out.'\n    },\n    { id: 2, name: 'New Feature', description: 'You can now add new features' }\n]\ninterface Product {\n    id: number\n    title: string\n    price: number\n    description: string\n    category: string\n    image: string\n    rating: {\n        rate: number\n        count: number\n    }\n}\nexport default function Dashboard() {\n    const list = useAsyncList<Product>({\n        async load({ signal }) {\n            const res = await fetch(`https://fakestoreapi.com/products?limit=5`, {\n                signal\n            })\n            const json = await res.json()\n            return {\n                items: json\n            }\n        },\n        async sort({ items, sortDescriptor }) {\n            return {\n                items: items.sort((a, b) => {\n                    // @ts-ignore\n                    const first = a[sortDescriptor.column]\n                    // @ts-ignore\n                    const second = b[sortDescriptor.column]\n                    let cmp =\n                        (parseInt(first) || first) < (parseInt(second) || second) ? -1 : 1\n                    if (sortDescriptor.direction === 'descending') {\n                        cmp *= -1\n                    }\n                    return cmp\n                })\n            }\n        }\n    })\n    return (\n        <div className='grid min-h-screen w-full md:grid-cols-[220px_1fr] lg:grid-cols-[280px_1fr]'>\n            <div className='hidden border-r bg-muted/40 md:block'>\n                <div className='flex h-full max-h-screen flex-col gap-2'>\n                    <div className='flex h-14 items-center border-b px-4 lg:h-[60px] lg:px-6'>\n                        <Link href='/' className='flex items-center gap-2 font-semibold'>\n                            <IconBrandCleon className='h-6 w-6' />\n                            <span className=''>Cleon UI</span>\n                        </Link>\n                        <Menu>\n                            <Button variant='outline' size='icon' className='ml-auto'>\n                                <IconBell />\n                            </Button>\n                            <Menu.Content items={roles}>\n                                {(item) => (\n                                    <Menu.Item id={item.id} textValue={item.name}>\n                                        <Menu.ItemDetails\n                                            label={item.name}\n                                            description={item.description}\n                                        />\n                                    </Menu.Item>\n                                )}\n                            </Menu.Content>\n                        </Menu>\n                    </div>\n                    <div className='flex-1'>\n                        <Sidebar />\n                    </div>\n                    <div className='mt-auto p-4'>\n                        <Card>\n                            <Card.Header className='p-2 pt-0 md:p-4'>\n                                <Card.Title>Upgrade to Pro</Card.Title>\n                                <Card.Description>\n                                    Unlock all features and get unlimited access to our\n                                    support team.\n                                </Card.Description>\n                            </Card.Header>\n                            <Card.Content className='p-2 pt-0 md:p-4 md:pt-0'>\n                                <Button size='sm' className='w-full'>\n                                    Upgrade\n                                </Button>\n                            </Card.Content>\n                        </Card>\n                    </div>\n                </div>\n            </div>\n            <div className='flex flex-col'>\n                <header className='flex h-14 items-center justify-between gap-4 border-b bg-background px-4 lg:h-[60px] lg:px-6'>\n                    <Sheet>\n                        <Sheet.Trigger\n                            className={cn(buttonVariants({ size: 'icon' }), 'md:hidden')}\n                        >\n                            <IconMenu className='h-5 w-5' />\n                        </Sheet.Trigger>\n                        <Sheet.Content side='left' aria-labelledby='Menu'>\n                            <Sheet.Header>\n                                <Sheet.Title id='Menu'>Menu</Sheet.Title>\n                                <Sheet.Description>Open the menu.</Sheet.Description>\n                            </Sheet.Header>\n                            <Sheet.Body className='px-1'>\n                                <Sidebar />\n                            </Sheet.Body>\n                        </Sheet.Content>\n                    </Sheet>\n                    <div className='font-semibold sm:text-lg md:text-xl'>Dashboard</div>\n                    <div className='flex items-center gap-2'>\n                        <ThemeToggle />\n                        <Menu>\n                            <Menu.Trigger>\n                                <Avatar\n                                    className='size-9 sm:size-10'\n                                    initials='DQ'\n                                    src='https://github.com/dq-alhq.png'\n                                />\n                            </Menu.Trigger>\n                            <Menu.Content>\n                                <Menu.Section>\n                                    <Menu.Header separator>\n                                        <span className='block'>DQ Al-Haqqi</span>\n                                        <span className='font-normal text-muted-foreground'>\n                                            @dq-alhq\n                                        </span>\n                                    </Menu.Header>\n                                    <Menu.Item>\n                                        <IconSettings />\n                                        Settings\n                                    </Menu.Item>\n                                    <Menu.Item>\n                                        <IconLifebuoy />\n                                        Support\n                                    </Menu.Item>\n                                    <Menu.Item isDanger>\n                                        <IconLogout />\n                                        Logout\n                                    </Menu.Item>\n                                </Menu.Section>\n                            </Menu.Content>\n                        </Menu>\n                    </div>\n                </header>\n                <main className='flex flex-col gap-4 p-4 lg:gap-6 lg:p-6'>\n                    <div className='grid gap-4 md:grid-cols-2 md:gap-8 lg:grid-cols-4'>\n                        <Card>\n                            <Card.Header className='flex flex-row items-center justify-between space-y-0 pb-2'>\n                                <Card.Title className='text-sm font-medium'>\n                                    Total Revenue\n                                </Card.Title>\n                                <IconCurrencyDollar className='size-4 text-muted-foreground' />\n                            </Card.Header>\n                            <Card.Content>\n                                <div className='text-2xl font-bold'>$45,231.89</div>\n                                <p className='text-xs text-muted-foreground'>\n                                    +20.1% from last month\n                                </p>\n                            </Card.Content>\n                        </Card>\n                        <Card>\n                            <Card.Header className='flex flex-row items-center justify-between space-y-0 pb-2'>\n                                <Card.Title className='text-sm font-medium'>\n                                    Subscriptions\n                                </Card.Title>\n                                <IconUsers className='size-4 text-muted-foreground' />\n                            </Card.Header>\n                            <Card.Content>\n                                <div className='text-2xl font-bold'>+2350</div>\n                                <p className='text-xs text-muted-foreground'>\n                                    +180.1% from last month\n                                </p>\n                            </Card.Content>\n                        </Card>\n                        <Card>\n                            <Card.Header className='flex flex-row items-center justify-between space-y-0 pb-2'>\n                                <Card.Title className='text-sm font-medium'>\n                                    Sales\n                                </Card.Title>\n                                <IconCreditCard className='size-4 text-muted-foreground' />\n                            </Card.Header>\n                            <Card.Content>\n                                <div className='text-2xl font-bold'>+1,234</div>\n                                <p className='text-xs text-muted-foreground'>\n                                    +79% from last month\n                                </p>\n                            </Card.Content>\n                        </Card>\n                        <Card>\n                            <Card.Header className='flex flex-row items-center justify-between space-y-0 pb-2'>\n                                <Card.Title className='text-sm font-medium'>\n                                    Active Now\n                                </Card.Title>\n                                <IconTrendingUp className='size-4 text-muted-foreground' />\n                            </Card.Header>\n                            <Card.Content>\n                                <div className='text-2xl font-bold'>+573</div>\n                                <p className='text-xs text-muted-foreground'>\n                                    +201 since last hour\n                                </p>\n                            </Card.Content>\n                        </Card>\n                    </div>\n                    <div className='grid grid-cols-1 sm:grid-cols-2 gap-4 lg:gap-6 w-full'>\n                        <Card>\n                            <Card.Header className='p-4 pb-0'>\n                                <Card.Title>Sales</Card.Title>\n                                <Card.Description>\n                                    You have sold over 2.043 products this month, keep up\n                                    the good work!\n                                </Card.Description>\n                            </Card.Header>\n                            <Card.Content className='flex flex-row items-baseline gap-4 p-4 pt-0'>\n                                <div className='flex items-baseline gap-1 text-3xl font-bold tabular-nums leading-none'>\n                                    68\n                                    <span className='text-sm font-normal text-muted-foreground'>\n                                        products/day\n                                    </span>\n                                </div>\n                                <ChartContainer\n                                    config={{\n                                        steps: {\n                                            label: 'Steps',\n                                            color: 'hsl(var(--chart-1))'\n                                        }\n                                    }}\n                                    className='ml-auto w-[72px]'\n                                >\n                                    <BarChart\n                                        margin={{\n                                            left: 0,\n                                            right: 0,\n                                            top: 0,\n                                            bottom: 0\n                                        }}\n                                        data={[\n                                            {\n                                                date: '2024-01-01',\n                                                steps: 2000\n                                            },\n                                            {\n                                                date: '2024-01-02',\n                                                steps: 2100\n                                            },\n                                            {\n                                                date: '2024-01-03',\n                                                steps: 2200\n                                            },\n                                            {\n                                                date: '2024-01-04',\n                                                steps: 1300\n                                            },\n                                            {\n                                                date: '2024-01-05',\n                                                steps: 1400\n                                            },\n                                            {\n                                                date: '2024-01-06',\n                                                steps: 2500\n                                            },\n                                            {\n                                                date: '2024-01-07',\n                                                steps: 1600\n                                            }\n                                        ]}\n                                    >\n                                        <Bar\n                                            dataKey='steps'\n                                            fill='var(--color-steps)'\n                                            radius={2}\n                                            fillOpacity={0.2}\n                                            activeIndex={6}\n                                            activeBar={<Rectangle fillOpacity={0.8} />}\n                                        />\n                                        <XAxis\n                                            dataKey='date'\n                                            tickLine={false}\n                                            axisLine={false}\n                                            tickMargin={4}\n                                            hide\n                                        />\n                                    </BarChart>\n                                </ChartContainer>\n                            </Card.Content>\n                        </Card>\n                        <Card>\n                            <Card.Header className='p-4 pb-0'>\n                                <Card.Title>Traffic</Card.Title>\n                                <Card.Description>\n                                    You have received over 12.124 visitors last month\n                                </Card.Description>\n                            </Card.Header>\n                            <Card.Content>\n                                <ChartContainer\n                                    config={{\n                                        resting: {\n                                            label: 'Resting',\n                                            color: 'hsl(var(--chart-1))'\n                                        }\n                                    }}\n                                    className='w-full max-h-10'\n                                >\n                                    <LineChart\n                                        margin={{\n                                            left: 14,\n                                            right: 14,\n                                            top: 10\n                                        }}\n                                        data={[\n                                            {\n                                                date: '2024-01-01',\n                                                resting: 62\n                                            },\n                                            {\n                                                date: '2024-01-02',\n                                                resting: 72\n                                            },\n                                            {\n                                                date: '2024-01-03',\n                                                resting: 35\n                                            },\n                                            {\n                                                date: '2024-01-04',\n                                                resting: 62\n                                            },\n                                            {\n                                                date: '2024-01-05',\n                                                resting: 52\n                                            },\n                                            {\n                                                date: '2024-01-06',\n                                                resting: 62\n                                            },\n                                            {\n                                                date: '2024-01-07',\n                                                resting: 70\n                                            }\n                                        ]}\n                                    >\n                                        <CartesianGrid\n                                            strokeDasharray='4 4'\n                                            vertical={false}\n                                            stroke='hsl(var(--muted-foreground))'\n                                            strokeOpacity={0.5}\n                                        />\n                                        <YAxis\n                                            hide\n                                            domain={['dataMin - 10', 'dataMax + 10']}\n                                        />\n                                        <XAxis\n                                            dataKey='date'\n                                            tickLine={false}\n                                            axisLine={false}\n                                            tickMargin={8}\n                                            hide\n                                        />\n                                        <Line\n                                            dataKey='resting'\n                                            type='natural'\n                                            fill='var(--color-resting)'\n                                            stroke='var(--color-resting)'\n                                            strokeWidth={2}\n                                            dot={false}\n                                            activeDot={{\n                                                fill: 'var(--color-resting)',\n                                                stroke: 'var(--color-resting)',\n                                                r: 4\n                                            }}\n                                        />\n                                        <ChartTooltip\n                                            content={\n                                                <ChartTooltipContent\n                                                    indicator='line'\n                                                    labelFormatter={(value) =>\n                                                        formatDate(value)\n                                                    }\n                                                />\n                                            }\n                                            cursor={false}\n                                        />\n                                    </LineChart>\n                                </ChartContainer>\n                            </Card.Content>\n                        </Card>\n                    </div>\n                    <Card>\n                        <Table\n                            aria-label='Products'\n                            selectionMode='multiple'\n                            sortDescriptor={list.sortDescriptor}\n                            onSortChange={list.sort}\n                        >\n                            <Table.Header>\n                                <Table.Column id='id'>#</Table.Column>\n                                <Table.Column id='title' isRowHeader allowsSorting>\n                                    Name\n                                </Table.Column>\n                                <Table.Column id='director' allowsSorting>\n                                    Price\n                                </Table.Column>\n                                <Table.Column id='producer' allowsSorting>\n                                    Category\n                                </Table.Column>\n                                <Table.Column id='sold' allowsSorting>\n                                    Sold\n                                </Table.Column>\n                            </Table.Header>\n                            <Table.Body\n                                items={list.items}\n                                renderEmptyState={() => (\n                                    <div className='grid place-content-center p-10'>\n                                        <IconLoader className='animate-spin' />\n                                    </div>\n                                )}\n                            >\n                                {(item) => (\n                                    <Table.Row id={item.id}>\n                                        <Table.Cell>{item.id}</Table.Cell>\n                                        <Table.Cell>{item.title}</Table.Cell>\n                                        <Table.Cell>${item.price}</Table.Cell>\n                                        <Table.Cell>{item.category}</Table.Cell>\n                                        <Table.Cell>{item.rating.count}</Table.Cell>\n                                    </Table.Row>\n                                )}\n                            </Table.Body>\n                        </Table>\n                    </Card>\n                </main>\n            </div>\n        </div>\n    )\n}\n\nconst NavLink = ({\n    href,\n    active,\n    children\n}: {\n    href: string\n    active?: boolean\n    children: React.ReactNode\n}) => {\n    return (\n        <Link\n            href={href}\n            className={cn(\n                'flex items-center gap-3 rounded-lg px-3 py-2 text-foreground transition-all hover:text-primary',\n                {\n                    'bg-primary text-primary-foreground hover:text-primary-foreground':\n                        active\n                }\n            )}\n        >\n            {children}\n        </Link>\n    )\n}\n\nconst Sidebar = () => {\n    return (\n        <nav className='grid items-start px-2 gap-1 text-sm font-medium lg:px-4'>\n            <NavLink active href='#'>\n                <IconHome className='size-4' />\n                Dashboard\n            </NavLink>\n            <NavLink href='#'>\n                <IconShoppingCart className='size-4' />\n                Orders\n                <Badge variant='info' shape='circle' className='ml-auto size-6 shrink-0'>\n                    6\n                </Badge>\n            </NavLink>\n            <NavLink href='#'>\n                <IconPackage className='size-4' />\n                Products\n            </NavLink>\n            <NavLink href='#'>\n                <IconUsers className='size-4' />\n                Customers\n            </NavLink>\n            <NavLink href='#'>\n                <IconTrendingUp className='size-4' />\n                Analytics\n            </NavLink>\n        </nav>\n    )\n}\n",
    "type": "blocks"
  }
}